PARSFILE
! CarSim 9.0.3
! Vehicle-suspension arrangement: i_i
! Revision 15870, June 5, 2015
! Simfile: simfile.sim

DATASET_TITLE resume_their_way
CATEGORY MY_STUFF
TITLE resume_their_way <MY_STUFF>

! This run was made 10:54 on February 18, 2016.

!------------------------------------------------------------------------------------
! SYSTEM PARAMETERS (SIMULATION AND MODEL OPTIONS)
!------------------------------------------------------------------------------------
! [D] (default) indicates that a parameter was not set by reading from a Parsfile.
! [I] indicates that changing the parameter via an Event triggers an initialization.

ID_EVENT            0 ; - ! [D] ID number that can be assigned to the current event
ID_RUN              0 ; - ! [D] ID number that can be assigned to a simulation run
IPRINT             25 ! Print interval: output time step TSTEP_WRITE = TSTEP*IPRINT
NDIGITS_ECHO       10 ! [D] Max. no. of digits for printing floating-point numbers
! NIMPORT           8 ! CALC -- Number of variables activated for import
! NLOAD             0 ! CALC -- Number of installed payloads
! NOBJECT           0 ! CALC -- Number of installed moving objects
! NOUT_ANI_LIVE    46 ! CALC -- Number of variables sent live to animators
! NOUT_EXPORT      10 ! CALC -- Number of output variables activated for export
! NOUT_WRITE      604 ! CALC -- Number of output variables written to VS or ERD file
! NPATH             1 ! CALC -- Number of installed reference paths
! NPREVIEW          0 ! CALC -- Number of installed driver preview sensors
! NREF_PT           0 ! CALC -- Number of installed reference points and forces
! NROAD             1 ! CALC -- Number of installed roads
! NSENSOR           0 ! CALC -- Number of installed range and tracking sensors
! NSENSOR_M         0 ! CALC -- Number of installed motion sensors
! NTAB_XY           0 ! CALC -- Number of XY spline tables for path segments
OPT_ALL_WRITE       1 ! Write all outputs to VS/ERD file? 1 -> all, 0 -> only
                      ! activated outputs
OPT_BUFFER_WRITE    0 ! [D] Use buffer for written outputs? 0 -> no, write during
                      ! run, 1 -> yes, write after run finishes
OPT_CALC_STATIC     0 ! Calculate and echo static loads and inertia properties? 1 ->
                      ! yes, 0 -> no
OPT_ECHO_ALL_PARS   0 ! [D] Echo all parameters in this VS Solver? 0 -> no, 1 -> yes
OPT_ECHO_ALL_UNITS  0 ! [D] Echo list of units and scale factors? 0 -> no, 1 -> yes
OPT_ECHO_ANI_LIVE   0 ! [D] Echo variables sent live to video? 0 -> no, 1 -> yes
OPT_ECHO_ICS        1 ! Echo initial conditions? 0 -> no, 1 -> yes
OPT_ECHO_WRITE      0 ! [D] Echo written outputs? 0 -> no, 1 -> yes
OPT_ERROR_DIALOG    1 ! [D] Show pop-up dialog box if fatal error occurs: 1 -> yes
                      ! (normal use), 0 -> no (for batch runs)
OPT_ERROR_DUP_DEF   0 ! [D] Handle case where DEFINE_IMPORT, DEFINE_OUTPUT,
                      ! DEFINE_PARAMETER, or DEFINE_VARIABLE attempts to define a
                      ! variable that already exists. 0 -> write warning in log
                      ! file, 1 -> generate error and stop the run
OPT_ERROR_SHOW_ALL  0 ! [D] Show pop-up boxes for all errors: 0 -> only show the
                      ! first, 1 -> also show subsequent errors
OPT_INIT_CONFIG     0 ! Initialize vehicle height, pitch, roll, and deflection
                      ! variables? 1 -> yes, 0 -> no, start 'as is' [I]
OPT_INIT_PATH       0 ! Initialize vehicle yaw, Xo, and Yo, to match driver path at
                      ! station SSTART? 1 -> yes, 0 -> no. If OPT_DRIVER_MODEL is
                      ! zero, the vehicle is located on the road path. [I]
OPT_INIT_SPEED      0 ! Initialize vehicle speed variables? 1 -> yes, 0 -> no, start
                      ! 'as is' [I]
OPT_INT_METHOD      2 ! Numerical integration method: 2 -> AM-2; 3 -> AM-3; 4 ->
                      ! AM-4; 1 -> RK-2; 0 -> AB-2 (full step)
OPT_IO_UPDATE       0 ! Option for exchanging I/O variables with other tools: 1 ->
                      ! use T_DT (half step), 0 -> use T_STEP (full step)
OPT_LINEARIZATION   0 ! [D] Numerical linearization applied for: 0 -> all ODEs of
                      ! the model, 1 -> only selected derivatives [I]
OPT_LOG_DEBUG       0 ! [D] Log file writing: 0 -> normal, 1 -> crash expected
OPT_LOG_VERBOSE     2 ! [D] Log file verbosity: 2 -> errors + most events + parsfile
                      ! names, 0 -> errors only, 1 -> errors + events, 3 ->
                      ! advanced diagnostics
OPT_LOG_WARNINGS    1 ! [D] Write warnings into log file? 1 -> yes, 0 -> no
OPT_PAUSE           0 ! [D] Pause at end of run with window open? 0 -> no, 1 -> yes
OPT_SORT_WRITE      1 ! [D] Sort written outputs? 1 -> alphabetical, 0 -> as entered
OPT_STOP            0 ! Option for stopping the run: 0 -> stop when T reaches TSTOP;
                      ! 1 -> stop when T reaches TSTOP or station reaches SSTOP; -1
                      ! -> run until stopped using VS Commands or external control
OPT_VS_FILETYPE     3 ! Type of output file: 1-> 64-bit VS, 2-> 32-bit VS, 3 ->
                      ! 32-bit ERD (legacy), 0 -> no output file
OPT_WRITE           1 ; - ! [D] Write outputs when T > TSTART_WRITE? 1 -> write, 0
                      ! -> don't write; update this using events or VS commands
! RTIME           879 ; - ! CALC -- Computational efficiency (sec/sim. sec)
R_GRAVITY           1 ; - ! [D] Scale factor applied to acceleration of gravity [I]
TSTART          0.001 ; s ! Starting time for the simulation clock
TSTART_T_EVENT      0 ; s ! [D] Event clock reset time: T_EVENT = T - TSTART_T_EVENT
TSTART_WRITE    0.001 ; s ! Start writing outputs when this time is reached
TSTEP           0.001 ; s ! Time step for numerical integration
! TSTEP_WRITE   0.025 ; s ! CALC -- Time interval in output time-series file
TSTOP             100 ; s ! Stop when this time is reached
! T_DT         0.0005 ; s ! CALC -- Time increment between calculations

!------------------------------------------------------------------------------------
! MODEL PARAMETERS
!------------------------------------------------------------------------------------
NGEARS              6 ! Number of gears in transmission [I]
OPT_BRAKE_MODEL     0 ! [D] 0 -> basic VS brake model (default); 1 -> not used
                      ! (reserved for future use); 2 -> full dynamics model; 3 ->
                      ! full dynamics model + control type A; 4 -> full dynamics
                      ! model + control type B [I]
OPT_CLUTCH          0 ! [D] Torque transfer to transmission: 0 -> hydraulic torque
                      ! converter, 1 -> mechanical clutch, 2 -> torque converter
                      ! with lock-up clutch [I]
OPT_CLUTCH_DIFF(2)  0 ! [D] Clutch control option for rear differential: 0 -> table
                      ! lookup or external, 1 -> Torsen parameters, 2 -> yaw
                      ! control [I]
OPT_DIFF_INTERNAL(2) 1 ! Model option for rear differential: 1 -> internal model, 0
                       ! -> external model [I]
OPT_ENGINE_INTERNAL 1 ! Model option for engine: 1 -> internal model, 0 -> external
                      ! model [I]
OPT_EXT_SP(1,1)     0 ! External spring option for L1 spring: 0 -> include internal
                      ! spring (with or without external model), 1 -> no internal
                      ! spring (external model only) [I]
OPT_EXT_SP(1,2)     0 ! External spring option for R1 spring [I]
OPT_EXT_SP(2,1)     0 ! External spring option for L2 spring [I]
OPT_EXT_SP(2,2)     0 ! External spring option for R2 spring [I]
OPT_IW_VLOW         0 ! [D] Increase wheel inertia at low speeds to avoid
                      ! instability with some HIL systems? 0 -> no, 1 -> yes [I]
OPT_JNC_DESIGN(1)   1 ! Specify jounce in the vehicle design condition for axle 1? 0
                      ! -> no, base jounce on suspension springs, 1 -> yes [I]
OPT_JNC_DESIGN(2)   1 ! Specify jounce in the vehicle design condition for axle 2?
                      ! [I]
OPT_LOCKED_DIFF(2)  0 ! Is the rear differential locked? 0 -> no, 1 -> yes [I]
OPT_M_SW_CALC       1 ! Steering torque: 0 = from table, 1 = calculated (See
                      ! Reference Manual for details)
OPT_POWER           1 ! Power steering? 0 = No, 1= Yes [I]
OPT_PT              2 ! Powertrain type: 0 -> Simple, 1 -> FWD, 2 -> RWD, 3 -> AWD,
                      ! 7 -> AVL Cruise [I]
OPT_PWR_CPL_INTERNAL 1 ! Model option for internal power coupling (torque converter
                       ! and clutch): 1 -> use internal model, 0 -> use external
                       ! model [I]
OPT_RACK(1)         1 ! Steering gear type for axle 1? 0 = Recirculating ball, 1 =
                      ! Rack and pinion [I]
OPT_RACK(2)         1 ! Steering gear type for axle 2? 0 = Recirculating ball, 1 =
                      ! Rack and pinion [I]
OPT_SHIFT_INTERNAL  1 ! Model option for gear shift command: 1 -> internal model, 0
                      ! -> external model [I]
OPT_STEER           0 ! Open-loop steer input? 0 = Angle, 1 = Torque [I]
OPT_STEER_DEF       1 ! Define steer angles: 1 -> with respect to vehicle X-Y plane,
                      ! 0 -> as rotation angle about steer axis [I]
OPT_THROTTLE_DELAY  0 ! Use throttle time constants: 0 -> no, 1 -> yes [I]
OPT_TRANS_INTERNAL  1 ! Model option for transmission: 1 -> internal model, 0 ->
                      ! external model [I]
OPT_TR_GEAR_INTERNAL 1 ! Model option for transmission gear ratio and inertia: 1 ->
                       ! up to 18 gears, 2 -> continuously variable (CVT), 0 ->
                       ! external model [I]
OPT_TWIN_CLUTCH(2)  0 ! [D] Does the rear axle differential have twin clutches? 0 ->
                      ! no, 1 -> yes [I]
AREA_AERO         2.2 ; m2 ! Frontal vehicle cross-section area (for aerodynamics)
                      ! [I]
AV_ENG_IDLE       750 ; rpm ! Engine idle speed [I]
A_CAMBER(1,1)       0 ; deg ! Static camber angle for axle 1, L wheel [I]
A_CAMBER(1,2)       0 ; deg ! Static camber angle for axle 1, R wheel [I]
A_CAMBER(2,1)       0 ; deg ! Static camber angle for axle 2, L wheel [I]
A_CAMBER(2,2)       0 ; deg ! Static camber angle for axle 2, R wheel [I]
A_CASTER(1,1)       3 ; deg ! Caster for axle 1, L wheel [I]
A_CASTER(1,2)       3 ; deg ! Caster for axle 1, R wheel [I]
A_CASTER(2,1)       0 ; deg ! Caster for axle 2, L wheel [I]
A_CASTER(2,2)       0 ; deg ! Caster for axle 2, R wheel [I]
A_KPI(1,1)       13.5 ; deg ! Kingpin inclination for axle 1, L wheel [I]
A_KPI(1,2)       13.5 ; deg ! Kingpin inclination for axle 1, R wheel [I]
A_KPI(2,1)          0 ; deg ! Kingpin inclination for axle 2, L wheel [I]
A_KPI(2,2)          0 ; deg ! Kingpin inclination for axle 2, R wheel [I]
A_MZ_BETA(1,1)    0.1 ; deg ! Ref. hysteretic angle for parking steer torque L1
A_MZ_BETA(1,2)    0.1 ; deg ! Ref. hysteretic angle for parking steer torque R1
A_MZ_BETA(2,1)      2 ; deg ! [D] Ref. hysteretic angle for parking steer torque L2
A_MZ_BETA(2,2)      2 ; deg ! [D] Ref. hysteretic angle for parking steer torque R2
A_TOE(1,1)          0 ; deg ! Static toe angle for axle 1, L wheel [I]
A_TOE(1,2)          0 ; deg ! Static toe angle for axle 1, R wheel [I]
A_TOE(2,1)          0 ; deg ! Static toe angle for axle 2, L wheel [I]
A_TOE(2,2)          0 ; deg ! Static toe angle for axle 2, R wheel [I]
BETA_COL          0.5 ; deg ! Ref hysteretic angle for steering column friction
                      ! torque
BETA_RACK(1)      0.5 ; mm ! Ref hys. displ. for steering rack friction for axle 1
BETA_RACK(2)      0.5 ; mm ! [D] Ref hys. displ. for steering rack friction for axle
                      ! 2
CMP_OFFSET(1,1)     0 ; mm ! Initial compression of L1 external spring [I]
CMP_OFFSET(1,2)     0 ; mm ! Initial compression of R1 external spring [I]
CMP_OFFSET(2,1)     0 ; mm ! Initial compression of L2 external spring [I]
CMP_OFFSET(2,2)     0 ; mm ! Initial compression of R2 external spring [I]
DAUX(1)             0 ; N-m-s/deg ! Axle 1 auxiliary roll damping
DAUX(2)             0 ; N-m-s/deg ! Axle 2 auxiliary roll damping
DRIVELINE_FREQ      9 ; Hz ! Natural frequency of entire driveline, including
                      ! transmission, differentials, and wheels, not including
                      ! engine. [I]
DRIVELINE_ZETA    0.9 ; - ! Damping ratio of entire driveline, including
                      ! transmission, differentials, and wheels, not including
                      ! engine. [I]
DZ_SHADOW        0.02 ; m ! Height of animator shadow above road (to avoid
                      ! flickering)
D_AIR           1.206 ; kg/m3 ! Air mass density [I]
D_COL            0.01 ; N-m-s/deg ! Steering column viscous damping [I]
D_RACK(1)           4 ; N-s/mm ! Steering rack viscous damping for axle 1
D_RACK(2)           0 ; N-s/mm ! [D] Steering rack viscous damping for axle 2
D_TBAR              0 ; N-m-s/deg ! [D] Torson bar viscous damping [I]
ENGINE_STALL_DAMP   1 ; N-m-s/deg ! [D] Damping coefficient of the stalled engine
                      ! [I]
FS_OFFSET(1,1)      0 ; N ! Force offset added to static load for L1 spring [I]
FS_OFFSET(1,2)      0 ; N ! Force offset added to static load for R1 spring [I]
FS_OFFSET(2,1)      0 ; N ! Force offset added to static load for L2 spring [I]
FS_OFFSET(2,2)      0 ; N ! Force offset added to static load for R2 spring [I]
F_BOOST_MAX(1)   1250 ; N ! Maximum power steering boost force for axle 1
F_BOOST_MAX(2)  10000 ; N ! [D] Maximum power steering boost force for axle 2
GPS_REF_LAT    42.231 ; deg ! [D] Reference GPS latitude [I]
GPS_REF_LONG  -83.727 ; deg ! [D] Reference GPS longitude [I]
HYS_COL           0.1 ; N-m ! Steering column friction torque
HYS_RACK(1)         0 ; N ! Steering rack hysteresis for axle 1
HYS_RACK(2)         0 ; N ! [D] Steering rack hysteresis for axle 2
H_CG_SU           540 ; mm ! Height (Z coord.) of vehicle unladen sprung mass CG [I]
H_REF_AERO          0 ; mm ! Height (Z coord.) of aerodynamic ref. pt. [I]
H_WC(1,1)         325 ; mm ! Height (Z coord.) of wheel center of L1 [I]
H_WC(1,2)         325 ; mm ! Height (Z coord.) of wheel center of R1 [I]
H_WC(2,1)         325 ; mm ! Height (Z coord.) of wheel center of L2 [I]
H_WC(2,2)         325 ; mm ! Height (Z coord.) of wheel center of R2 [I]
IDS(2)          0.013 ; kg-m2 ! Spin inertia of rear driveshaft [I]
IENG              0.4 ; kg-m2 ! Spin inertia of engine crankshaft [I]
IHS_L(2)        0.009 ; kg-m2 ! Spin inertia of half left shaft, rear differential
                      ! [I]
IHS_R(2)        0.009 ; kg-m2 ! Spin inertia of half right shaft, rear differential
                      ! [I]
ITC_INPUT_SHAFT 0.015 ; kg-m2 ! Spin inertia of input shaft of torque converter [I]
ITC_OUTPUT_SHAFT 0.015 ; kg-m2 ! Spin inertia of torque converter output shaft [I]
ITR(1)          0.037 ; kg-m2 ! 1st-gear transmission spin inertia at output shaft.
                      ! (Transmission spin inertias do not include the torque
                      ! converter.) [I]
ITR(2)          0.034 ; kg-m2 ! 2nd-gear trans. spin inertia at output shaft
ITR(3)          0.042 ; kg-m2 ! 3rd-gear trans. spin inertia at output shaft
ITR(4)           0.04 ; kg-m2 ! 4th-gear trans. spin inertia at output shaft
ITR(5)           0.04 ; kg-m2 ! 5th-gear trans. spin inertia at output shaft
ITR(6)           0.04 ; kg-m2 ! 6th-gear trans. spin inertia at output shaft
ITR_NEUTRAL     0.034 ; kg-m2 ! Neutral-gear spin inertia of transmission [I]
ITR_REVERSE     0.034 ; kg-m2 ! Reverse-gear spin inertia of transmission [I]
IT(1,1)             0 ; kg-m2 ! Spin inertia for tire L1 [I]
IT(1,2)             0 ; kg-m2 ! Spin inertia for tire R1 [I]
IT(2,1)             0 ; kg-m2 ! Spin inertia for tire L2 [I]
IT(2,2)             0 ; kg-m2 ! Spin inertia for tire R2 [I]
IW(1,1)           0.9 ; kg-m2 ! Spin inertia for wheel L1 [I]
IW(1,2)           0.9 ; kg-m2 ! Spin inertia for wheel R1 [I]
IW(2,1)           0.9 ; kg-m2 ! Spin inertia for wheel L2 [I]
IW(2,2)           0.9 ; kg-m2 ! Spin inertia for wheel R2 [I]
IXX_SU          536.6 ; kg-m2 ! Roll inertia of vehicle unladen sprung mass [I]
IXY_SU              0 ; kg-m2 ! XY inertia of vehicle unladen sprung mass [I]
IXZ_SU              0 ; kg-m2 ! XZ inertia of vehicle unladen sprung mass [I]
IYY_SU         1536.7 ; kg-m2 ! Pitch inertia of vehicle unladen sprung mass [I]
IYZ_SU              0 ; kg-m2 ! YZ inertia of vehicle unladen sprung mass [I]
IZZ_SU         1536.7 ; kg-m2 ! Yaw inertia of vehicle unladen sprung mass [I]
I_COL            0.02 ; kg-m2 ! Steering column inertia [I]
I_GEAR_IN      0.0001 ; kg-m2 ! Steering gear inertia [I]
JNC_DESIGN(1,1)     0 ; mm ! Jounce in the vehicle design condition at wheel L1 [I]
JNC_DESIGN(1,2)     0 ; mm ! Jounce in the vehicle design condition at wheel R1 [I]
JNC_DESIGN(2,1)     0 ; mm ! Jounce in the vehicle design condition at wheel L2 [I]
JNC_DESIGN(2,2)     0 ; mm ! Jounce in the vehicle design condition at wheel R2 [I]
LOCKED_DIFF_DAMP(2) 0.8 ; N-m-s/deg ! Torsional damping constant for locking rear
                        ! differential [I]
LOCKED_DIFF_K(2)   80 ; N-m/deg ! Torsional spring constant for locking rear
                      ! differential [I]
LOCK_BK_R_FREQ     33 ; - ! [D] Ratio: simulation update frequency (1/dt) divided by
                      ! natural torsional frequency of wheels during brake lockup
                      ! [I]
LOCK_BK_ZETA        2 ; - ! [D] Torsional damping ratio of wheels during brake
                      ! lockup
LX_AXLE(1)          0 ; mm ! [D] X distance axle 1 is behind vehicle origin [I]
LX_AXLE(2)       2910 ; mm ! X distance axle 2 is behind vehicle origin [I]
LX_CG_SU         1015 ; mm ! X dist. CG of vehicle unladen sprung mass is behind
                      ! vehicle origin [I]
L_CAMERA_FRONT    0.5 ; m ! Distance the camera front point leads the front axle
L_CAMERA_REAR     0.5 ; m ! Distance the camera rear point trails the front axle
L_KPO(1,1)       75.5 ; mm ! Lateral kingpin offset at center of wheel L1 [I]
L_KPO(1,2)       75.5 ; mm ! Lateral kingpin offset at center of wheel R1 [I]
L_KPO(2,1)          0 ; mm ! Lateral kingpin offset at center of wheel L2 [I]
L_KPO(2,2)          0 ; mm ! Lateral kingpin offset at center of wheel R2 [I]
L_LCA(1,1)        600 ; mm ! [D] Length of L1 lower control arm (used to define roll
                      ! for animation)
L_LCA(1,2)        600 ; mm ! [D] Length of R1 lower control arm
L_LCA(2,1)        600 ; mm ! [D] Length of L2 lower control arm
L_LCA(2,2)        600 ; mm ! [D] Length of R2 lower control arm
L_REF_AERO       2580 ; mm ! Aerodynamic reference length for vehicle [I]
L_SPG_ADJ(1,1)      0 ; mm ! Upper spring seat height adj. for L1 spring [I]
L_SPG_ADJ(1,2)      0 ; mm ! Upper spring seat height adj. for R1 spring [I]
L_SPG_ADJ(2,1)      0 ; mm ! Upper spring seat height adj. for L2 spring [I]
L_SPG_ADJ(2,2)      0 ; mm ! Upper spring seat height adj. for R2 spring [I]
L_TRACK(1)       1675 ; mm ! Track width for axle 1 [I]
L_TRACK(2)       1675 ; mm ! Track width for axle 2 [I]
M_SU             1270 ; kg ! Mass of vehicle unladen sprung mass [I]
M_US(1)            71 ; kg ! Unsprung mass of axle 1 [I]
M_US(2)            71 ; kg ! Unsprung mass of axle 2 [I]
ROLL_MAX_STOP      80 ; deg ! [D] Maximum roll angle: stop the run if reached
R_EFF_F_DIFF(2)  0.99 ; - ! Forward efficiency of rear differential [I]
R_EFF_R_DIFF(2)  0.99 ; - ! Reverse efficiency of rear differential [I]
R_EFF_TR_F(1)    0.92 ; - ! 1st-gear forward efficiency of transmission [I]
R_EFF_TR_F(2)    0.92 ; - ! 2nd-gear forward efficiency of transmission
R_EFF_TR_F(3)    0.95 ; - ! 3rd-gear forward efficiency of transmission
R_EFF_TR_F(4)    0.95 ; - ! 4th-gear forward efficiency of transmission
R_EFF_TR_F(5)    0.98 ; - ! 5th-gear forward efficiency of transmission
R_EFF_TR_F(6)    0.99 ; - ! 6th-gear forward efficiency of transmission
R_EFF_TR_F_REVERSE 0.9 ; - ! Reverse-gear forward efficiency of transmission [I]
R_EFF_TR_R(1)    0.92 ; - ! 1st-gear reverse efficiency of transmission [I]
R_EFF_TR_R(2)    0.92 ; - ! 2nd-gear reverse efficiency of transmission
R_EFF_TR_R(3)    0.95 ; - ! 3rd-gear reverse efficiency of transmission
R_EFF_TR_R(4)    0.95 ; - ! 4th-gear reverse efficiency of transmission
R_EFF_TR_R(5)    0.98 ; - ! 5th-gear reverse efficiency of transmission
R_EFF_TR_R(6)    0.99 ; - ! 6th-gear reverse efficiency of transmission
R_EFF_TR_R_REVERSE 0.9 ; - ! Reverse-gear reverse efficiency of transmission [I]
R_GEAR_DIFF(2)    4.1 ; - ! Gear ratio of rear differential [I]
R_GEAR_TR(1)    3.538 ; - ! 1st-gear ratio of transmission [I]
R_GEAR_TR(2)     2.06 ; - ! 2nd-gear ratio of transmission
R_GEAR_TR(3)    1.404 ; - ! 3rd-gear ratio of transmission
R_GEAR_TR(4)        1 ; - ! 4th-gear ratio of transmission
R_GEAR_TR(5)    0.713 ; - ! 5th-gear ratio of transmission
R_GEAR_TR(6)    0.582 ; - ! 6th-gear ratio of transmission
R_GEAR_TR_REVERSE -3.168 ; - ! Reverse-gear ratio of transmission (should be
                         ! negative) [I]
R_US_STR(1)       0.8 ; - ! Steered fraction of unsprung mass of axle 1 [I]
R_US_STR(2)       0.1 ; - ! Steered fraction of unsprung mass of axle 2 [I]
SPEEDO_SF           1 ; - ! [D] Scale factor for speedometer needle
SPRING_COMP_BETA(1,1) 2 ; mm ! Ref. hysteretic L1 spring compression
SPRING_COMP_BETA(1,2) 2 ; mm ! Ref. hysteretic R1 spring compression
SPRING_COMP_BETA(2,1) 2 ; mm ! Ref. hysteretic L2 spring compression
SPRING_COMP_BETA(2,2) 2 ; mm ! Ref. hysteretic R2 spring compression
SPRING_EXT_BETA(1,1) 2 ; mm ! Ref. hysteretic L1 spring extension
SPRING_EXT_BETA(1,2) 2 ; mm ! Ref. hysteretic R1 spring extension
SPRING_EXT_BETA(2,1) 2 ; mm ! Ref. hysteretic L2 spring extension
SPRING_EXT_BETA(2,2) 2 ; mm ! Ref. hysteretic R2 spring extension
TACH_SF             1 ; - ! [D] Scale factor for tachometer needle
TC_BK(1,1)       0.06 ; s ! Time constant for L1 brake actuator
TC_BK(1,2)       0.06 ; s ! Time constant for R1 brake actuator
TC_BK(2,1)       0.06 ; s ! Time constant for L2 brake actuator
TC_BK(2,2)       0.06 ; s ! Time constant for R2 brake actuator
TC_BOOST(1)      0.08 ; s ! Time constant for axle 1 power steering boost
TC_BOOST(2)       0.3 ; s ! [D] Time constant for axle 2 power steering boost
TLAG_BK(1,1)        0 ; s ! Transport time delay for fluid to reach L1 brake
TLAG_BK(1,2)        0 ; s ! Transport time delay for fluid to reach R1 brake
TLAG_BK(2,1)        0 ; s ! Transport time delay for fluid to reach L2 brake
TLAG_BK(2,2)        0 ; s ! Transport time delay for fluid to reach R2 brake
T_SHIFT          0.25 ; s ! Shift duration in closed-loop transmission control [I]
VLOW_DIFF_CL_LOCK(2) 0.48 ; rpm ! [D] Lock the differential clutch when the speed
                          ! differential is below this speed, or the clutch
                          ! capacity is bigger than the theoretical locked torque.
                          ! (2nd drive axle) [I]
VLOW_STOP          -1 ; km/h ! Stop the run if the absolute vehicle speed drops to
                      ! this value; specify a negative value to disable this
                      ! feature
X_KPO(1,1)          0 ; mm ! X coord. of kingpin at center of wheel L1 [I]
X_KPO(1,2)          0 ; mm ! X coord. of kingpin at center of wheel R1 [I]
X_KPO(2,1)          0 ; mm ! X coord. of kingpin at center of wheel L2 [I]
X_KPO(2,2)          0 ; mm ! X coord. of kingpin at center of wheel R2 [I]
X_REF_AERO      -1290 ; mm ! X coord. of aerodynamic ref. pt. [I]
Y_CG_SU             0 ; mm ! Y coordinate of vehicle unladen sprung mass CG [I]
Y_CL_SUSP(1)        0 ; mm ! Y coord. of centerline of axle 1 [I]
Y_CL_SUSP(2)        0 ; mm ! Y coord. of centerline of axle 2 [I]
Y_REF_AERO          0 ; mm ! Y coord. of aerodynamic ref. pt. [I]

!------------------------------------------------------------------------------------
! TIRE MODEL PARAMETERS
!------------------------------------------------------------------------------------
RR_SURF             1 ; - ! Rolling resistance surface-effect coefficient
VLOW_DRIFT_X      0.1 ; km/h ! [D] Low speed limit: allow near-static Fx to avoid
                      ! drift when stopped on a grade [I]
VLOW_DRIFT_Y      0.1 ; km/h ! [D] Low speed limit: allow near-static Fy to avoid
                      ! drift when stopped on a grade [I]

OPT_TIRE_MODEL(1,1) 1 ! Internal tire shear-model option, axle 1, left side: 1 ->
                      ! original tabular model; 0 -> fully external model; 2 ->
                      ! built-in lags; 3 -> built-in for Fx, My, and lags; 6 ->
                      ! tabular with camber extensions; 7 -> built-in Pacejka 5.2;
                      ! 8 -> TNO Delft-Tyre; 9 -> COSIN FTire; 10 -> third-party
                      ! STI tire model [I]
OPT_TIRE_COMB(1,1)  0 ! Option for combined slip calculation: 0 -> use only
                      ! theoretical combined slip; 1 -> use transition between the
                      ! normalized and theoretical combined slip
OPT_TIRE_LAG_ALPHA(1,1) 1 ! Options for handling lag in tire alpha: 1 -> transition
                          ! to using instant slip when the time constant is less
                          ! than 12*TSTEP, 0 -> use fixed time constant 12*TSTEP at
                          ! high speeds
OPT_TIRE_LAG_KAPPA(1,1) 2 ! Options for handling lag in tire kappa: 2 -> use instant
                          ! slip when absolute kappa is decreasing and transition
                          ! to instant slip when the time constant is less than
                          ! 12*TSTEP; 1 -> transition to instant slip when the time
                          ! constant is less than 12*TSTEP; 0 -> use fixed time
                          ! constant 12*TSTEP at high speeds
FZ_MAX(1,1)    100000 ; N ! Maximum allowed vertical tire force [I]
FZ_REF(1,1)      6500 ; N ! Reference vertical force: Not used directly in the VS
                      ! Math Model; provided as a standard reference for advanced
                      ! users to scale other parameters and Configurable Functions
                      ! for this tire
MU_REF_X(1,1)       1 ; - ! Ground friction during meas. of Fx tire data
MU_REF_Y(1,1)       1 ; - ! Ground friction during meas. of Fy tire data
R0(1,1)           334 ; mm ! Free (unloaded) radius (if 0, R0 is set to match RRE)
                      ! [I]
RRE(1,1)          325 ; mm ! Effective rolling radius (Vx/AVy) [I]
RR_C(1,1)      0.0038 ; - ! Rolling-resistance coefficient Fx_rr = Fz*RR_surf*(RR_c
                      ! + RR_v*Vx)
RR_FX(1,1)          1 ; - ! Rolling-resistance fx coefficient: My_rr_fx = -Fx * (rre
                      ! - (r_free - Fz * kt))
RR_V(1,1)    2.6e-005 ; h/km ! Rolling-res. speed coefficient Fx_rr =
                      ! Fz*RR_surf*(RR_c + RR_v*Vx)
VLOW_ALPHA(1,1)     2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,1)  0.5 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,1)     2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(1,2) 1 ! Internal tire shear-model option, axle 1, right side [I]
OPT_TIRE_COMB(1,2)  0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(1,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(1,2) 2 ! Options for handling lag in kappa
FZ_MAX(1,2)    100000 ; N ! Maximum allowed vertical tire force [I]
FZ_REF(1,2)      6500 ; N ! Reference vertical force
MU_REF_X(1,2)       1 ; - ! Ground friction during meas. of Fx tire data
MU_REF_Y(1,2)       1 ; - ! Ground friction during meas. of Fy tire data
R0(1,2)           334 ; mm ! Free (unloaded) radius (if 0, R0 is set to match RRE)
                      ! [I]
RRE(1,2)          325 ; mm ! Effective rolling radius (Vx/AVy) [I]
RR_C(1,2)      0.0038 ; - ! Rolling-resistance coefficient
RR_FX(1,2)          1 ; - ! Rolling-resistance coefficient,
RR_V(1,2)    2.6e-005 ; h/km ! Rolling-res. speed coefficient
VLOW_ALPHA(1,2)     2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(1,2)  0.5 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(1,2)     2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,1) 1 ! Internal tire shear-model option, axle 2, left side [I]
OPT_TIRE_COMB(2,1)  0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,1) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,1) 2 ! Options for handling lag in kappa
FZ_MAX(2,1)    100000 ; N ! Maximum allowed vertical tire force [I]
FZ_REF(2,1)      6500 ; N ! Reference vertical force
MU_REF_X(2,1)       1 ; - ! Ground friction during meas. of Fx tire data
MU_REF_Y(2,1)       1 ; - ! Ground friction during meas. of Fy tire data
R0(2,1)           334 ; mm ! Free (unloaded) radius (if 0, R0 is set to match RRE)
                      ! [I]
RRE(2,1)          325 ; mm ! Effective rolling radius (Vx/AVy) [I]
RR_C(2,1)      0.0038 ; - ! Rolling-resistance coefficient
RR_FX(2,1)          1 ; - ! Rolling-resistance coefficient,
RR_V(2,1)    2.6e-005 ; h/km ! Rolling-res. speed coefficient
VLOW_ALPHA(2,1)     2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,1)  0.5 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,1)     2 ; km/h ! Minimum Vx used in ODE for lagged kappa

OPT_TIRE_MODEL(2,2) 1 ! Internal tire shear-model option, axle 2, right side [I]
OPT_TIRE_COMB(2,2)  0 ! Option for combined slip calculation
OPT_TIRE_LAG_ALPHA(2,2) 1 ! Options for handling lag in alpha
OPT_TIRE_LAG_KAPPA(2,2) 2 ! Options for handling lag in kappa
FZ_MAX(2,2)    100000 ; N ! Maximum allowed vertical tire force [I]
FZ_REF(2,2)      6500 ; N ! Reference vertical force
MU_REF_X(2,2)       1 ; - ! Ground friction during meas. of Fx tire data
MU_REF_Y(2,2)       1 ; - ! Ground friction during meas. of Fy tire data
R0(2,2)           334 ; mm ! Free (unloaded) radius (if 0, R0 is set to match RRE)
                      ! [I]
RRE(2,2)          325 ; mm ! Effective rolling radius (Vx/AVy) [I]
RR_C(2,2)      0.0038 ; - ! Rolling-resistance coefficient
RR_FX(2,2)          1 ; - ! Rolling-resistance coefficient,
RR_V(2,2)    2.6e-005 ; h/km ! Rolling-res. speed coefficient
VLOW_ALPHA(2,2)     2 ; km/h ! Minimum Vx used in ODE for lagged alpha
VLOW_DAMP_Y(2,2)  0.5 ; km/h ! [D] Low speed when damping is added to Fy
VLOW_KAPPA(2,2)     2 ; km/h ! Minimum Vx used in ODE for lagged kappa


!------------------------------------------------------------------------------------
! DRIVER MODEL: STEERING CONTROLLER
!------------------------------------------------------------------------------------
OPT_DRIVER_MODEL    0 ! Driver model option: 1 -> use path; 2 -> use path with no
                      ! rear steer effect (legacy); 0 -> open-loop steer
N_LTARG             1 ! [D] Number of LTARG datasets available for driver model,
                      ! moving objects, and VS Commands (lanes, etc.): 0 - 100

!------------------------------------------------------------------------------------
! DRIVER MODEL: SPEED CONTROLLER
!------------------------------------------------------------------------------------
INSTALL_DRIVER_SPEED_CONTROLLER  ! Installation command for this controller

OPT_SC              0 ! Speed controller: 0 -> Off (open-loop), 1 - 3, target speed
                      ! as function of time and station, 4 -> speed based on path
                      ! preview
SPEED_KP         0.14 ; s/m ! [D] Speed controller: proportional control gain
SPEED_KP3           0 ; s3/m3 ! [D] Speed controller: cubic (verr^3) control gain
SPEED_KI         0.16 ; 1/m ! [D] Speed controller: integral control gain

!------------------------------------------------------------------------------------
! ROADS AND REFERENCE PATHS
!------------------------------------------------------------------------------------
DEFINE_ROADS        1 ! Total number of roads
CURRENT_ROAD_ID     1 ! ROAD_ID for road under the vehicle tires, or 0 for a grid
                      ! [I]

ROAD_ID(1)          1 ! User-defined ID number for this road
ROAD_PATH_ID(1)     1 ! PATH_ID of reference path used for this road [I]

DEFINE_PATHS        1 ! Total number of reference paths

PATH_ID(1)          1 ! User-defined ID number for this path
SPATH_START(1)      0 ; m ! Station at the start of this path
OPT_PATH_START(1)   0 ! Specify an initial heading and start position for the path?
                      ! 0 -> no, 1 -> yes
OPT_PATH_LOOP(1)    0 ! Is this path looped? 0 -> no, 1 -> yes

NSEGMENTS(1)        1 ! Number of segments in this path
SEGMENT_TYPE(1,1)   0 ! 0 -> straight, 1 -> spline table, 2 -> rho, 3 -> radius
SEGMENT_LENGTH(1,1) 200 ; m ! Segment length
! S_SEGMENT_END(1,1) 200 ; m ! CALC -- Station at end of this segment
! X_SEGMENT_END(1,1) 200 ; m ! CALC -- X coordinate at end of segment
! Y_SEGMENT_END(1,1) 0 ; m ! CALC -- Y coordinate at end of segment
! HEADING_END(1,1)  0 ; deg ! CALC -- Heading at end of segment


!------------------------------------------------------------------------------------
! CONFIGURABLE FUNCTION DATA
!------------------------------------------------------------------------------------

! CAMBER: Suspension camber (measured at zero steer). Camber is a function of jounce
! (CONSTANT, COEFFICIENT, or TABLE). Camber from the calculation can be adjusted with
! CAMBER_GAIN and CAMBER_OFFSET. Jounce used in the calculation can be adjusted with
! JNC_SCALE_CAMBER and JNC_START_CAMBER. The derivative of this function is used
! internally. This configurable function supports 4 datasets; if indices shown below
! are not used, e.g., (1,2), the current values of the indices IAXLE and ISIDE are
! used to identify the dataset when reading data.

! 1D table: col 1 = jounce (mm), col 2 = camber (deg)
CAMBER_TABLE(1,1) SPLINE ! axle 1, left side
 -70, 1.16282
 -60, 0.958695
 -50, 0.76676
 -40, 0.58725
 -30, 0.42045
 -20, 0.266701
 -10, 0.126399
 0, 0
 10, -0.111976
 20, -0.208942
 30, -0.290231
 40, -0.355097
 50, -0.402697
 60, -0.432083
 70, -0.442184
ENDTABLE
CAMBER_GAIN(1,1)    1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(1,1)  0 ; deg ! Offset added (after gain) to get camber
JNC_START_CAMBER(1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_CAMBER(1,1) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)

! 1D table: col 1 = jounce (mm), col 2 = camber (deg)
CAMBER_TABLE(1,2) SPLINE ! axle 1, right side
 -70, 1.16282
 -60, 0.958695
 -50, 0.76676
 -40, 0.58725
 -30, 0.42045
 -20, 0.266701
 -10, 0.126399
 0, 0
 10, -0.111976
 20, -0.208942
 30, -0.290231
 40, -0.355097
 50, -0.402697
 60, -0.432083
 70, -0.442184
ENDTABLE
CAMBER_GAIN(1,2)    1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(1,2)  0 ; deg ! Offset added (after gain) to get camber
JNC_START_CAMBER(1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_CAMBER(1,2) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)

! 1D table: col 1 = jounce (mm), col 2 = camber (deg)
CAMBER_TABLE(2,1) SPLINE ! axle 2, left side
 -70, 1.66479
 -60, 1.43877
 -50, 1.21143
 -40, 0.981031
 -30, 0.746032
 -20, 0.505036
 -10, 0.25676
 0, 0
 10, -0.266403
 20, -0.543604
 30, -0.832791
 40, -1.13524
 50, -1.45237
 60, -1.78583
 70, -2.13754
ENDTABLE
CAMBER_GAIN(2,1)    1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(2,1)  0 ; deg ! Offset added (after gain) to get camber
JNC_START_CAMBER(2,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_CAMBER(2,1) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)

! 1D table: col 1 = jounce (mm), col 2 = camber (deg)
CAMBER_TABLE(2,2) SPLINE ! axle 2, right side
 -70, 1.66479
 -60, 1.43877
 -50, 1.21143
 -40, 0.981031
 -30, 0.746032
 -20, 0.505036
 -10, 0.25676
 0, 0
 10, -0.266403
 20, -0.543604
 30, -0.832791
 40, -1.13524
 50, -1.45237
 60, -1.78583
 70, -2.13754
ENDTABLE
CAMBER_GAIN(2,2)    1 ! Gain multiplied with calculated value to get camber
CAMBER_OFFSET(2,2)  0 ; deg ! Offset added (after gain) to get camber
JNC_START_CAMBER(2,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_CAMBER(2,2) 1 ! Scale factor divided into (jounce - JNC_START_CAMBER)

! CC_FX: Compliance: wheel camber due to in-phase Fx (measured at zero steer). CC_FX
! angular deflection is a function of force (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CC_FX angular
! deflection from the calculation can be adjusted with CC_FX_GAIN and CC_FX_OFFSET.
! Force used in the calculation can be adjusted with F_SCALE_CC_FX and F_START_CC_FX.
! This configurable function supports 4 datasets; if indices shown below are not
! used, e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to
! identify the dataset when reading data.

CC_FX_COEFFICIENT(1,1) 0 ! Coefficient: CC_FX angular deflection per unit force
                         ! (deg/N), axle 1, left side
CC_FX_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get CC_FX angular
                      ! deflection
F_START_CC_FX(1,1)  0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,1)  1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(1,2) 0 ! Coefficient: CC_FX angular deflection per unit force
                         ! (deg/N), axle 1, right side
CC_FX_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get CC_FX angular
                      ! deflection
F_START_CC_FX(1,2)  0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(1,2)  1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,1) 0 ! Coefficient: CC_FX angular deflection per unit force
                         ! (deg/N), axle 2, left side
CC_FX_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get CC_FX angular
                      ! deflection
F_START_CC_FX(2,1)  0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,1)  1 ! Scale factor divided into (force - F_START_CC_FX)

CC_FX_COEFFICIENT(2,2) 0 ! Coefficient: CC_FX angular deflection per unit force
                         ! (deg/N), axle 2, right side
CC_FX_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get CC_FX angular
                      ! deflection
F_START_CC_FX(2,2)  0 ; N ! Offset subtracted from force
F_SCALE_CC_FX(2,2)  1 ! Scale factor divided into (force - F_START_CC_FX)

! CD_MY: Compliance: suspension dive due to brake MY (measured at zero steer). CD_MY
! angular deflection is a function of moment (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CD_MY angular
! deflection from the calculation can be adjusted with CD_MY_GAIN and CD_MY_OFFSET.
! Moment used in the calculation can be adjusted with M_SCALE_CD_MY and
! M_START_CD_MY. This configurable function supports 4 datasets; if indices shown
! below are not used, e.g., (1,2), the current values of the indices IAXLE and ISIDE
! are used to identify the dataset when reading data.

CD_MY_COEFFICIENT(1,1) 0 ! Coefficient: CD_MY angular deflection per unit moment
                         ! (deg/N-m), axle 1, left side
CD_MY_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get CD_MY angular
                      ! deflection
M_START_CD_MY(1,1)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CD_MY(1,1)  1 ! Scale factor divided into (moment - M_START_CD_MY)

CD_MY_COEFFICIENT(1,2) 0 ! Coefficient: CD_MY angular deflection per unit moment
                         ! (deg/N-m), axle 1, right side
CD_MY_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get CD_MY angular
                      ! deflection
M_START_CD_MY(1,2)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CD_MY(1,2)  1 ! Scale factor divided into (moment - M_START_CD_MY)

CD_MY_COEFFICIENT(2,1) 0 ! Coefficient: CD_MY angular deflection per unit moment
                         ! (deg/N-m), axle 2, left side
CD_MY_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get CD_MY angular
                      ! deflection
M_START_CD_MY(2,1)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CD_MY(2,1)  1 ! Scale factor divided into (moment - M_START_CD_MY)

CD_MY_COEFFICIENT(2,2) 0 ! Coefficient: CD_MY angular deflection per unit moment
                         ! (deg/N-m), axle 2, right side
CD_MY_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get CD_MY angular
                      ! deflection
M_START_CD_MY(2,2)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CD_MY(2,2)  1 ! Scale factor divided into (moment - M_START_CD_MY)

! CI_FY: Compliance: inclination of wheel due to out-of-phase Fy (measured at zero
! steer). CI_FY angular deflection is a function of force (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. CI_FY angular
! deflection from the calculation can be adjusted with CI_FY_GAIN and CI_FY_OFFSET.
! Force used in the calculation can be adjusted with F_SCALE_CI_FY and F_START_CI_FY.
! This configurable function supports 4 datasets; if indices shown below are not
! used, e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to
! identify the dataset when reading data.

CI_FY_COEFFICIENT(1,1) 0 ! Coefficient: CI_FY angular deflection per unit force
                         ! (deg/N), axle 1, left side
CI_FY_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get CI_FY angular
                      ! deflection
F_START_CI_FY(1,1)  0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,1)  1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(1,2) 0 ! Coefficient: CI_FY angular deflection per unit force
                         ! (deg/N), axle 1, right side
CI_FY_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get CI_FY angular
                      ! deflection
F_START_CI_FY(1,2)  0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(1,2)  1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,1) 2.9e-005 ! Coefficient: CI_FY angular deflection per unit
                                ! force (deg/N), axle 2, left side
CI_FY_GAIN(2,1)     1 ! Gain multiplied with calculated value to get CI_FY angular
                      ! deflection
CI_FY_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get CI_FY angular
                      ! deflection
F_START_CI_FY(2,1)  0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,1)  1 ! Scale factor divided into (force - F_START_CI_FY)

CI_FY_COEFFICIENT(2,2) 2.9e-005 ! Coefficient: CI_FY angular deflection per unit
                                ! force (deg/N), axle 2, right side
CI_FY_GAIN(2,2)     1 ! Gain multiplied with calculated value to get CI_FY angular
                      ! deflection
CI_FY_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get CI_FY angular
                      ! deflection
F_START_CI_FY(2,2)  0 ; N ! Offset subtracted from force
F_SCALE_CI_FY(2,2)  1 ! Scale factor divided into (force - F_START_CI_FY)

! CI_MZ: Compliance: inclinaton of wheel due to out-of-phase Mz (measured at zero
! steer). CI_MZ angular deflection is a function of moment (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. CI_MZ angular
! deflection from the calculation can be adjusted with CI_MZ_GAIN and CI_MZ_OFFSET.
! Moment used in the calculation can be adjusted with M_SCALE_CI_MZ and
! M_START_CI_MZ. This configurable function supports 4 datasets; if indices shown
! below are not used, e.g., (1,2), the current values of the indices IAXLE and ISIDE
! are used to identify the dataset when reading data.

CI_MZ_COEFFICIENT(1,1) 0 ! Coefficient: CI_MZ angular deflection per unit moment
                         ! (deg/N-m), axle 1, left side
CI_MZ_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get CI_MZ angular
                      ! deflection
M_START_CI_MZ(1,1)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,1)  1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(1,2) 0 ! Coefficient: CI_MZ angular deflection per unit moment
                         ! (deg/N-m), axle 1, right side
CI_MZ_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get CI_MZ angular
                      ! deflection
M_START_CI_MZ(1,2)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(1,2)  1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,1) 0 ! Coefficient: CI_MZ angular deflection per unit moment
                         ! (deg/N-m), axle 2, left side
CI_MZ_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get CI_MZ angular
                      ! deflection
M_START_CI_MZ(2,1)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,1)  1 ! Scale factor divided into (moment - M_START_CI_MZ)

CI_MZ_COEFFICIENT(2,2) 0 ! Coefficient: CI_MZ angular deflection per unit moment
                         ! (deg/N-m), axle 2, right side
CI_MZ_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get CI_MZ angular
                      ! deflection
M_START_CI_MZ(2,2)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CI_MZ(2,2)  1 ! Scale factor divided into (moment - M_START_CI_MZ)

! CLUTCH_CONTROL_DIFF: Differential clutch control input based on total torque
! applied to both output shafts. Normalized clutch input is a function of torque
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Normalized clutch input from the calculation can be adjusted with
! CLUTCH_CONTROL_DIFF_GAIN and CLUTCH_CONTROL_DIFF_OFFSET. Torque used in the
! calculation can be adjusted with M_SCALE_CL_CON_DIFF and M_START_CL_CON_DIFF. This
! configurable function supports 3 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index IDIFF is used to identify the dataset
! when reading data.

CLUTCH_CONTROL_DIFF_CONSTANT(2) 1 ; - ! [D] Constant normalized clutch input, rear
                                  ! differential
CLUTCH_CONTROL_DIFF_GAIN(2) 1 ! Gain multiplied with calculated value to get
                              ! normalized clutch input
CLUTCH_CONTROL_DIFF_OFFSET(2) 0 ; - ! Offset added (after gain) to get normalized
                                ! clutch input

! CLUTCH_TORQUE_DIFF: Available torque for differential clutch. Available torque is
! a function of normalized clutch input (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Available torque from
! the calculation can be adjusted with CLUTCH_TORQUE_DIFF_GAIN and
! CLUTCH_TORQUE_DIFF_OFFSET. Normalized clutch input used in the calculation can be
! adjusted with CON_SCALE_CL_TORQ_DIFF and CON_START_CL_TORQ_DIFF. This configurable
! function supports 3 datasets; if indices shown below are not used, e.g., (2), the
! current value of the index IDIFF is used to identify the dataset when reading data.

CLUTCH_TORQUE_DIFF_CONSTANT(2) 0 ; N-m ! [D] Constant available torque, rear
                                 ! differential
CLUTCH_TORQUE_DIFF_OFFSET(2) 0 ; N-m ! Offset added (after gain) to get available
                               ! torque

! CMP_DAMP: Damper compression. Damper compression is a function of jounce at wheel
! (CONSTANT, COEFFICIENT, or TABLE). Damper compression from the calculation can be
! adjusted with CMP_DAMP_GAIN and CMP_DAMP_OFFSET. Jounce at wheel used in the
! calculation can be adjusted with JNC_SCALE_CMP_DAMP and JNC_START_CMP_DAMP. The
! derivative of this function is used internally. This configurable function supports
! 4 datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

CMP_DAMP_COEFFICIENT(1,1) 0.965 ! Coefficient: damper compression per unit jounce at
                                ! wheel (mm/mm), axle 1, left side
CMP_DAMP_GAIN(1,1)  1 ! Gain multiplied with calculated value to get damper
                      ! compression
CMP_DAMP_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,1) 1 ! Scale factor divided into (jounce at wheel -
                          ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(1,2) 0.965 ! Coefficient: damper compression per unit jounce at
                                ! wheel (mm/mm), axle 1, right side
CMP_DAMP_GAIN(1,2)  1 ! Gain multiplied with calculated value to get damper
                      ! compression
CMP_DAMP_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(1,2) 1 ! Scale factor divided into (jounce at wheel -
                          ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,1) 0.797 ! Coefficient: damper compression per unit jounce at
                                ! wheel (mm/mm), axle 2, left side
CMP_DAMP_GAIN(2,1)  1 ! Gain multiplied with calculated value to get damper
                      ! compression
CMP_DAMP_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,1) 1 ! Scale factor divided into (jounce at wheel -
                          ! JNC_START_CMP_DAMP)

CMP_DAMP_COEFFICIENT(2,2) 0.797 ! Coefficient: damper compression per unit jounce at
                                ! wheel (mm/mm), axle 2, right side
CMP_DAMP_GAIN(2,2)  1 ! Gain multiplied with calculated value to get damper
                      ! compression
CMP_DAMP_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get damper compression
JNC_START_CMP_DAMP(2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_DAMP(2,2) 1 ! Scale factor divided into (jounce at wheel -
                          ! JNC_START_CMP_DAMP)

! CMP_JSTOP: Jounce bumper deflection. Jounce stop deflection is a function of
! jounce at wheel (CONSTANT, COEFFICIENT, or TABLE). Jounce stop deflection from the
! calculation can be adjusted with CMP_JSTOP_GAIN and CMP_JSTOP_OFFSET. Jounce at
! wheel used in the calculation can be adjusted with JNC_SCALE_CMP_JSTOP and
! JNC_START_CMP_JSTOP. The derivative of this function is used internally. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

CMP_JSTOP_COEFFICIENT(1,1) 0.965 ! Coefficient: jounce stop deflection per unit
                                 ! jounce at wheel (mm/mm), axle 1, left side
CMP_JSTOP_GAIN(1,1) 1 ! Gain multiplied with calculated value to get jounce stop
                      ! deflection
CMP_JSTOP_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                        ! deflection
JNC_START_CMP_JSTOP(1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,1) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(1,2) 0.965 ! Coefficient: jounce stop deflection per unit
                                 ! jounce at wheel (mm/mm), axle 1, right side
CMP_JSTOP_GAIN(1,2) 1 ! Gain multiplied with calculated value to get jounce stop
                      ! deflection
CMP_JSTOP_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                        ! deflection
JNC_START_CMP_JSTOP(1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(1,2) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,1) 0.797 ! Coefficient: jounce stop deflection per unit
                                 ! jounce at wheel (mm/mm), axle 2, left side
CMP_JSTOP_GAIN(2,1) 1 ! Gain multiplied with calculated value to get jounce stop
                      ! deflection
CMP_JSTOP_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get jounce stop
                        ! deflection
JNC_START_CMP_JSTOP(2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,1) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_JSTOP)

CMP_JSTOP_COEFFICIENT(2,2) 0.797 ! Coefficient: jounce stop deflection per unit
                                 ! jounce at wheel (mm/mm), axle 2, right side
CMP_JSTOP_GAIN(2,2) 1 ! Gain multiplied with calculated value to get jounce stop
                      ! deflection
CMP_JSTOP_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get jounce stop
                        ! deflection
JNC_START_CMP_JSTOP(2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_JSTOP(2,2) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_JSTOP)

! CMP_RSTOP: Rebound stop deflection. Rebound stop deflection is a function of
! jounce at wheel (CONSTANT, COEFFICIENT, or TABLE). Rebound stop deflection from the
! calculation can be adjusted with CMP_RSTOP_GAIN and CMP_RSTOP_OFFSET. Jounce at
! wheel used in the calculation can be adjusted with JNC_SCALE_CMP_RSTOP and
! JNC_START_CMP_RSTOP. The derivative of this function is used internally. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

CMP_RSTOP_COEFFICIENT(1,1) 0.965 ! Coefficient: rebound stop deflection per unit
                                 ! jounce at wheel (mm/mm), axle 1, left side
CMP_RSTOP_GAIN(1,1) 1 ! Gain multiplied with calculated value to get rebound stop
                      ! deflection
CMP_RSTOP_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                        ! deflection
JNC_START_CMP_RSTOP(1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,1) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(1,2) 0.965 ! Coefficient: rebound stop deflection per unit
                                 ! jounce at wheel (mm/mm), axle 1, right side
CMP_RSTOP_GAIN(1,2) 1 ! Gain multiplied with calculated value to get rebound stop
                      ! deflection
CMP_RSTOP_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                        ! deflection
JNC_START_CMP_RSTOP(1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(1,2) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,1) 0.797 ! Coefficient: rebound stop deflection per unit
                                 ! jounce at wheel (mm/mm), axle 2, left side
CMP_RSTOP_GAIN(2,1) 1 ! Gain multiplied with calculated value to get rebound stop
                      ! deflection
CMP_RSTOP_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get rebound stop
                        ! deflection
JNC_START_CMP_RSTOP(2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,1) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_RSTOP)

CMP_RSTOP_COEFFICIENT(2,2) 0.797 ! Coefficient: rebound stop deflection per unit
                                 ! jounce at wheel (mm/mm), axle 2, right side
CMP_RSTOP_GAIN(2,2) 1 ! Gain multiplied with calculated value to get rebound stop
                      ! deflection
CMP_RSTOP_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get rebound stop
                        ! deflection
JNC_START_CMP_RSTOP(2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_RSTOP(2,2) 1 ! Scale factor divided into (jounce at wheel -
                           ! JNC_START_CMP_RSTOP)

! CMP_SPR_SEAT: Lower spring seat movement. Lower spring seat movement is a function
! of jounce at wheel (COEFFICIENT or TABLE). Lower spring seat movement from the
! calculation can be adjusted with CMP_SPR_SEAT_GAIN and CMP_SPR_SEAT_OFFSET. Jounce
! at wheel used in the calculation can be adjusted with JNC_SCALE_CMP_SPR_SEAT and
! JNC_START_CMP_SPR_SEAT. An inverse version of this function is used internally. The
! derivative of this function is used internally. This configurable function supports
! 4 datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

CMP_SPR_SEAT_COEFFICIENT(1,1) 0.959 ! Coefficient: lower spring seat movement per
                                    ! unit jounce at wheel (mm/mm), axle 1, left
                                    ! side
CMP_SPR_SEAT_GAIN(1,1) 1 ! Gain multiplied with calculated value to get lower spring
                         ! seat movement
CMP_SPR_SEAT_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get lower spring seat
                           ! movement
JNC_START_CMP_SPR_SEAT(1,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,1) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(1,2) 0.959 ! Coefficient: lower spring seat movement per
                                    ! unit jounce at wheel (mm/mm), axle 1, right
                                    ! side
CMP_SPR_SEAT_GAIN(1,2) 1 ! Gain multiplied with calculated value to get lower spring
                         ! seat movement
CMP_SPR_SEAT_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get lower spring seat
                           ! movement
JNC_START_CMP_SPR_SEAT(1,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(1,2) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,1) 0.797 ! Coefficient: lower spring seat movement per
                                    ! unit jounce at wheel (mm/mm), axle 2, left
                                    ! side
CMP_SPR_SEAT_GAIN(2,1) 1 ! Gain multiplied with calculated value to get lower spring
                         ! seat movement
CMP_SPR_SEAT_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get lower spring seat
                           ! movement
JNC_START_CMP_SPR_SEAT(2,1) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,1) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_SPR_SEAT)

CMP_SPR_SEAT_COEFFICIENT(2,2) 0.797 ! Coefficient: lower spring seat movement per
                                    ! unit jounce at wheel (mm/mm), axle 2, right
                                    ! side
CMP_SPR_SEAT_GAIN(2,2) 1 ! Gain multiplied with calculated value to get lower spring
                         ! seat movement
CMP_SPR_SEAT_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get lower spring seat
                           ! movement
JNC_START_CMP_SPR_SEAT(2,2) 0 ; mm ! Offset subtracted from jounce at wheel
JNC_SCALE_CMP_SPR_SEAT(2,2) 1 ! Scale factor divided into (jounce at wheel -
                              ! JNC_START_CMP_SPR_SEAT)

! CS_FY: Compliance: steer due to out-of-phase Fy (measured at zero steer). CS_FY
! angular deflection is a function of force (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CS_FY angular
! deflection from the calculation can be adjusted with CS_FY_GAIN and CS_FY_OFFSET.
! Force used in the calculation can be adjusted with F_SCALE_CS_FY and F_START_CS_FY.
! This configurable function supports 4 datasets; if indices shown below are not
! used, e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to
! identify the dataset when reading data.

CS_FY_COEFFICIENT(1,1) -2.7e-007 ! Coefficient: CS_FY angular deflection per unit
                                 ! force (deg/N), axle 1, left side
CS_FY_GAIN(1,1)     1 ! Gain multiplied with calculated value to get CS_FY angular
                      ! deflection
CS_FY_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get CS_FY angular
                      ! deflection
F_START_CS_FY(1,1)  0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,1)  1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(1,2) -2.7e-007 ! Coefficient: CS_FY angular deflection per unit
                                 ! force (deg/N), axle 1, right side
CS_FY_GAIN(1,2)     1 ! Gain multiplied with calculated value to get CS_FY angular
                      ! deflection
CS_FY_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get CS_FY angular
                      ! deflection
F_START_CS_FY(1,2)  0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(1,2)  1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,1) -1e-007 ! Coefficient: CS_FY angular deflection per unit
                               ! force (deg/N), axle 2, left side
CS_FY_GAIN(2,1)     1 ! Gain multiplied with calculated value to get CS_FY angular
                      ! deflection
CS_FY_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get CS_FY angular
                      ! deflection
F_START_CS_FY(2,1)  0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,1)  1 ! Scale factor divided into (force - F_START_CS_FY)

CS_FY_COEFFICIENT(2,2) -1e-007 ! Coefficient: CS_FY angular deflection per unit
                               ! force (deg/N), axle 2, right side
CS_FY_GAIN(2,2)     1 ! Gain multiplied with calculated value to get CS_FY angular
                      ! deflection
CS_FY_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get CS_FY angular
                      ! deflection
F_START_CS_FY(2,2)  0 ; N ! Offset subtracted from force
F_SCALE_CS_FY(2,2)  1 ! Scale factor divided into (force - F_START_CS_FY)

! CS_MZ: Compliance: steer due to out-of-phase Mz (measured at zero steer). CS_MZ
! angular deflection is a function of moment (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CS_MZ angular
! deflection from the calculation can be adjusted with CS_MZ_GAIN and CS_MZ_OFFSET.
! Moment used in the calculation can be adjusted with M_SCALE_CS_MZ and
! M_START_CS_MZ. This configurable function supports 4 datasets; if indices shown
! below are not used, e.g., (1,2), the current values of the indices IAXLE and ISIDE
! are used to identify the dataset when reading data.

CS_MZ_COEFFICIENT(1,1) 3.8e-005 ! Coefficient: CS_MZ angular deflection per unit
                                ! moment (deg/N-m), axle 1, left side
CS_MZ_GAIN(1,1)     1 ! Gain multiplied with calculated value to get CS_MZ angular
                      ! deflection
CS_MZ_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get CS_MZ angular
                      ! deflection
M_START_CS_MZ(1,1)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,1)  1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(1,2) 3.8e-005 ! Coefficient: CS_MZ angular deflection per unit
                                ! moment (deg/N-m), axle 1, right side
CS_MZ_GAIN(1,2)     1 ! Gain multiplied with calculated value to get CS_MZ angular
                      ! deflection
CS_MZ_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get CS_MZ angular
                      ! deflection
M_START_CS_MZ(1,2)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(1,2)  1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,1) 1.9e-005 ! Coefficient: CS_MZ angular deflection per unit
                                ! moment (deg/N-m), axle 2, left side
CS_MZ_GAIN(2,1)     1 ! Gain multiplied with calculated value to get CS_MZ angular
                      ! deflection
CS_MZ_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get CS_MZ angular
                      ! deflection
M_START_CS_MZ(2,1)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,1)  1 ! Scale factor divided into (moment - M_START_CS_MZ)

CS_MZ_COEFFICIENT(2,2) 1.9e-005 ! Coefficient: CS_MZ angular deflection per unit
                                ! moment (deg/N-m), axle 2, right side
CS_MZ_GAIN(2,2)     1 ! Gain multiplied with calculated value to get CS_MZ angular
                      ! deflection
CS_MZ_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get CS_MZ angular
                      ! deflection
M_START_CS_MZ(2,2)  0 ; N-m ! Offset subtracted from moment
M_SCALE_CS_MZ(2,2)  1 ! Scale factor divided into (moment - M_START_CS_MZ)

! CT_FX: Compliance: toe due to in-phase Fx (measured at zero steer). CT_FX angular
! deflection is a function of force (CONSTANT, COEFFICIENT, or TABLE). Alternatively,
! a custom equation can be defined at runtime. CT_FX angular deflection from the
! calculation can be adjusted with CT_FX_GAIN and CT_FX_OFFSET. Force used in the
! calculation can be adjusted with F_SCALE_CT_FX and F_START_CT_FX. This configurable
! function supports 4 datasets; if indices shown below are not used, e.g., (1,2), the
! current values of the indices IAXLE and ISIDE are used to identify the dataset when
! reading data.

CT_FX_COEFFICIENT(1,1) 4.3e-007 ! Coefficient: CT_FX angular deflection per unit
                                ! force (deg/N), axle 1, left side
CT_FX_GAIN(1,1)     1 ! Gain multiplied with calculated value to get CT_FX angular
                      ! deflection
CT_FX_OFFSET(1,1)   0 ; deg ! Offset added (after gain) to get CT_FX angular
                      ! deflection
F_START_CT_FX(1,1)  0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,1)  1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(1,2) 4.3e-007 ! Coefficient: CT_FX angular deflection per unit
                                ! force (deg/N), axle 1, right side
CT_FX_GAIN(1,2)     1 ! Gain multiplied with calculated value to get CT_FX angular
                      ! deflection
CT_FX_OFFSET(1,2)   0 ; deg ! Offset added (after gain) to get CT_FX angular
                      ! deflection
F_START_CT_FX(1,2)  0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(1,2)  1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,1) 0 ! Coefficient: CT_FX angular deflection per unit force
                         ! (deg/N), axle 2, left side
CT_FX_OFFSET(2,1)   0 ; deg ! Offset added (after gain) to get CT_FX angular
                      ! deflection
F_START_CT_FX(2,1)  0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,1)  1 ! Scale factor divided into (force - F_START_CT_FX)

CT_FX_COEFFICIENT(2,2) 0 ! Coefficient: CT_FX angular deflection per unit force
                         ! (deg/N), axle 2, right side
CT_FX_OFFSET(2,2)   0 ; deg ! Offset added (after gain) to get CT_FX angular
                      ! deflection
F_START_CT_FX(2,2)  0 ; N ! Offset subtracted from force
F_SCALE_CT_FX(2,2)  1 ! Scale factor divided into (force - F_START_CT_FX)

! C_LAT: Compliance: lateral inward deflection of wheel due to out-of-phase Fy
! (measured at zero steer). C_LAT angular deflection is a function of force
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. C_LAT angular deflection from the calculation can be adjusted with
! C_LAT_GAIN and C_LAT_OFFSET. Force used in the calculation can be adjusted with
! F_SCALE_C_LAT and F_START_C_LAT. This configurable function supports 4 datasets; if
! indices shown below are not used, e.g., (1,2), the current values of the indices
! IAXLE and ISIDE are used to identify the dataset when reading data.

C_LAT_COEFFICIENT(1,1) 4.1e-005 ! Coefficient: C_LAT angular deflection per unit
                                ! force (mm/N), axle 1, left side
C_LAT_GAIN(1,1)     1 ! Gain multiplied with calculated value to get C_LAT angular
                      ! deflection
C_LAT_OFFSET(1,1)   0 ; mm ! Offset added (after gain) to get C_LAT angular
                      ! deflection
F_START_C_LAT(1,1)  0 ; N ! Offset subtracted from force
F_SCALE_C_LAT(1,1)  1 ! Scale factor divided into (force - F_START_C_LAT)

C_LAT_COEFFICIENT(1,2) 4.1e-005 ! Coefficient: C_LAT angular deflection per unit
                                ! force (mm/N), axle 1, right side
C_LAT_GAIN(1,2)     1 ! Gain multiplied with calculated value to get C_LAT angular
                      ! deflection
C_LAT_OFFSET(1,2)   0 ; mm ! Offset added (after gain) to get C_LAT angular
                      ! deflection
F_START_C_LAT(1,2)  0 ; N ! Offset subtracted from force
F_SCALE_C_LAT(1,2)  1 ! Scale factor divided into (force - F_START_C_LAT)

C_LAT_COEFFICIENT(2,1) 3.8e-005 ! Coefficient: C_LAT angular deflection per unit
                                ! force (mm/N), axle 2, left side
C_LAT_GAIN(2,1)     1 ! Gain multiplied with calculated value to get C_LAT angular
                      ! deflection
C_LAT_OFFSET(2,1)   0 ; mm ! Offset added (after gain) to get C_LAT angular
                      ! deflection
F_START_C_LAT(2,1)  0 ; N ! Offset subtracted from force
F_SCALE_C_LAT(2,1)  1 ! Scale factor divided into (force - F_START_C_LAT)

C_LAT_COEFFICIENT(2,2) 3.8e-005 ! Coefficient: C_LAT angular deflection per unit
                                ! force (mm/N), axle 2, right side
C_LAT_GAIN(2,2)     1 ! Gain multiplied with calculated value to get C_LAT angular
                      ! deflection
C_LAT_OFFSET(2,2)   0 ; mm ! Offset added (after gain) to get C_LAT angular
                      ! deflection
F_START_C_LAT(2,2)  0 ; N ! Offset subtracted from force
F_SCALE_C_LAT(2,2)  1 ! Scale factor divided into (force - F_START_C_LAT)

! C_LONG: Compliance: longitudinal deflection of wheel due to in-phase Fx (measured
! at zero steer). C_LONG angular deflection is a function of force (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! C_LONG angular deflection from the calculation can be adjusted with C_LONG_GAIN and
! C_LONG_OFFSET. Force used in the calculation can be adjusted with F_SCALE_C_LONG
! and F_START_C_LONG. This configurable function supports 4 datasets; if indices
! shown below are not used, e.g., (1,2), the current values of the indices IAXLE and
! ISIDE are used to identify the dataset when reading data.

C_LONG_COEFFICIENT(1,1) 5e-005 ! Coefficient: C_LONG angular deflection per unit
                               ! force (mm/N), axle 1, left side
C_LONG_GAIN(1,1)    1 ! Gain multiplied with calculated value to get C_LONG angular
                      ! deflection
C_LONG_OFFSET(1,1)  0 ; mm ! Offset added (after gain) to get C_LONG angular
                      ! deflection
F_START_C_LONG(1,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG(1,1) 1 ! Scale factor divided into (force - F_START_C_LONG)

C_LONG_COEFFICIENT(1,2) 5e-005 ! Coefficient: C_LONG angular deflection per unit
                               ! force (mm/N), axle 1, right side
C_LONG_GAIN(1,2)    1 ! Gain multiplied with calculated value to get C_LONG angular
                      ! deflection
C_LONG_OFFSET(1,2)  0 ; mm ! Offset added (after gain) to get C_LONG angular
                      ! deflection
F_START_C_LONG(1,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG(1,2) 1 ! Scale factor divided into (force - F_START_C_LONG)

C_LONG_COEFFICIENT(2,1) 7e-005 ! Coefficient: C_LONG angular deflection per unit
                               ! force (mm/N), axle 2, left side
C_LONG_GAIN(2,1)    1 ! Gain multiplied with calculated value to get C_LONG angular
                      ! deflection
C_LONG_OFFSET(2,1)  0 ; mm ! Offset added (after gain) to get C_LONG angular
                      ! deflection
F_START_C_LONG(2,1) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG(2,1) 1 ! Scale factor divided into (force - F_START_C_LONG)

C_LONG_COEFFICIENT(2,2) 7e-005 ! Coefficient: C_LONG angular deflection per unit
                               ! force (mm/N), axle 2, right side
C_LONG_GAIN(2,2)    1 ! Gain multiplied with calculated value to get C_LONG angular
                      ! deflection
C_LONG_OFFSET(2,2)  0 ; mm ! Offset added (after gain) to get C_LONG angular
                      ! deflection
F_START_C_LONG(2,2) 0 ; N ! Offset subtracted from force
F_SCALE_C_LONG(2,2) 1 ! Scale factor divided into (force - F_START_C_LONG)

! DOWNSHIFT_TRANS: Transmission speed when downshift occurs. IGEAR specifies the
! lower gear for each table (e.g., IGEAR 2 means downshift from 3 to 2). Transmission
! speed is a function of throttle position (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Transmission speed from
! the calculation can be adjusted with DOWNSHIFT_TRANS_GAIN and
! DOWNSHIFT_TRANS_OFFSET. Throttle position used in the calculation can be adjusted
! with THROTTLE_SCALE_DOWNSHIFT and THROTTLE_START_DOWNSHIFT. This configurable
! function supports 17 datasets; if indices shown below are not used, e.g., (2), the
! current value of the index IGEAR is used to identify the dataset when reading data.

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(1) LINEAR_FLAT ! shifting between gears 1 and 2
 0, 699
 0.4, 699
 0.8, 1240
 1, 1240
ENDTABLE
DOWNSHIFT_TRANS_GAIN(1) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(1) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(1) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(1) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(2) LINEAR_FLAT ! shifting between gears 2 and 3
 0, 1026
 0.4, 1026
 0.8, 2130
 1, 2130
ENDTABLE
DOWNSHIFT_TRANS_GAIN(2) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(2) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(2) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(2) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(3) LINEAR_FLAT ! shifting between gears 3 and 4
 0, 1440
 0.4, 1440
 0.8, 3125
 1, 3125
ENDTABLE
DOWNSHIFT_TRANS_GAIN(3) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(3) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(3) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(3) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(4) LINEAR_FLAT ! shifting between gears 4 and 5
 0, 2020
 0.4, 2020
 0.8, 4388
 1, 4388
ENDTABLE
DOWNSHIFT_TRANS_GAIN(4) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(4) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(4) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(4) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
DOWNSHIFT_TRANS_TABLE(5) LINEAR_FLAT ! shifting between gears 5 and 6
 0, 2474
 0.4, 2474
 0.8, 6154
 1, 6154
ENDTABLE
DOWNSHIFT_TRANS_GAIN(5) 1 ! Gain multiplied with calculated value to get
                          ! transmission speed
DOWNSHIFT_TRANS_OFFSET(5) 0 ; rpm ! Offset added (after gain) to get transmission
                            ! speed
THROTTLE_START_DOWNSHIFT(5) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_DOWNSHIFT(5) 1 ! Scale factor divided into (throttle position -
                              ! THROTTLE_START_DOWNSHIFT)

! FD: Suspension damper force (1 side). Damper force is a function of compression
! speed (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Damper force from the calculation can be adjusted with FD_GAIN
! and FD_OFFSET. Compression speed used in the calculation can be adjusted with
! CMP_R_SCALE_FD and CMP_R_START_FD. This configurable function supports 4 datasets;
! if indices shown below are not used, e.g., (1,2), the current values of the indices
! IAXLE and ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(1,1) SPLINE ! axle 1, left side
 -1410, -5008
 -720, -3436
 -390, -2324
 -210, -1792
 -90, -1008
 -20, -228
 20, 228
 90, 596
 200, 784
 390, 1100
 760, 1796
 1160, 2560
ENDTABLE
FD_GAIN(1,1)        1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,1)      0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,1) 1 ! Scale factor divided into (compression speed -
                      ! CMP_R_START_FD)

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(1,2) SPLINE ! axle 1, right side
 -1410, -5008
 -720, -3436
 -390, -2324
 -210, -1792
 -90, -1008
 -20, -228
 20, 228
 90, 596
 200, 784
 390, 1100
 760, 1796
 1160, 2560
ENDTABLE
FD_GAIN(1,2)        1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(1,2)      0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(1,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(1,2) 1 ! Scale factor divided into (compression speed -
                      ! CMP_R_START_FD)

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(2,1) SPLINE ! axle 2, left side
 -1410, -5008
 -720, -3436
 -390, -2324
 -210, -1792
 -90, -1008
 -20, -228
 20, 228
 90, 596
 200, 784
 390, 1100
 760, 1796
 1160, 2560
ENDTABLE
FD_GAIN(2,1)        1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,1)      0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,1) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,1) 1 ! Scale factor divided into (compression speed -
                      ! CMP_R_START_FD)

! 1D table: col 1 = compression speed (mm/s), col 2 = damper force (N)
FD_TABLE(2,2) SPLINE ! axle 2, right side
 -1410, -5008
 -720, -3436
 -390, -2324
 -210, -1792
 -90, -1008
 -20, -228
 20, 228
 90, 596
 200, 784
 390, 1100
 760, 1796
 1160, 2560
ENDTABLE
FD_GAIN(2,2)        1 ! Gain multiplied with calculated value to get damper force
FD_OFFSET(2,2)      0 ; N ! Offset added (after gain) to get damper force
CMP_R_START_FD(2,2) 0 ; mm/s ! Offset subtracted from compression speed
CMP_R_SCALE_FD(2,2) 1 ! Scale factor divided into (compression speed -
                      ! CMP_R_START_FD)

! FS_COMP: Compression (upper) envelope of suspension spring force (1 side). Spring
! force can be a nonlinear CARPET function of static spring force and spring
! compression or a function of spring compression (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function FS_COMP_FSTATIC of static spring force (CONSTANT,
! COEFFICIENT, or TABLE). Spring force from the calculation can be adjusted with
! FS_COMP_GAIN and FS_COMP_OFFSET. Spring compression used in the calculation can be
! adjusted with CMP_SCALE_FS_COMP and CMP_START_FS_COMP. Static spring force used in
! the calculation can be adjusted with FSTATIC_SCALE_FS_COMP and
! FSTATIC_START_FS_COMP. An inverse version of this function is used internally. This
! configurable function supports 4 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to identify
! the dataset when reading data.

FS_COMP_COEFFICIENT(1,1) 27 ! Coefficient: spring force per unit spring compression
                            ! (N/mm), axle 1, left side
FS_COMP_GAIN(1,1)   1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,1) 20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,1) 1 ! Scale factor divided into (spring compression -
                         ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,1) 1 ; - ! [D] Constant spring force component due to
                                ! static spring force, axle 1, left side

FS_COMP_COEFFICIENT(1,2) 27 ! Coefficient: spring force per unit spring compression
                            ! (N/mm), axle 1, right side
FS_COMP_GAIN(1,2)   1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(1,2) 20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(1,2) 1 ! Scale factor divided into (spring compression -
                         ! CMP_START_FS_COMP)
FS_COMP_COMBINE(1,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(1,2) 1 ; - ! [D] Constant spring force component due to
                                ! static spring force, axle 1, right side

! 1D table: col 1 = spring compression (mm), col 2 = spring force (N)
FS_COMP_TABLE(2,1) SPLINE ! axle 2, left side
 -50, 1560.7
 -45, 1713.58
 -40, 1866.45
 -35, 2019.33
 -30, 2172.21
 -25, 2325.09
 -20, 2477.96
 -15, 2630.84
 -10, 2783.72
 -5, 2936.6
 0, 3089.47
 5, 3242.35
 10, 3395.23
 15, 3548.1
 20, 3700.98
 25, 3853.86
 30, 4006.74
 35, 4159.61
 40, 4312.49
 45, 4465.37
 50, 4618.25
ENDTABLE
FS_COMP_GAIN(2,1)   1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,1) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,1) 1 ! Scale factor divided into (spring compression -
                         ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,1) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,1) 1 ; - ! [D] Constant spring force component due to
                                ! static spring force, axle 2, left side

! 1D table: col 1 = spring compression (mm), col 2 = spring force (N)
FS_COMP_TABLE(2,2) SPLINE ! axle 2, right side
 -50, 1560.7
 -45, 1713.58
 -40, 1866.45
 -35, 2019.33
 -30, 2172.21
 -25, 2325.09
 -20, 2477.96
 -15, 2630.84
 -10, 2783.72
 -5, 2936.6
 0, 3089.47
 5, 3242.35
 10, 3395.23
 15, 3548.1
 20, 3700.98
 25, 3853.86
 30, 4006.74
 35, 4159.61
 40, 4312.49
 45, 4465.37
 50, 4618.25
ENDTABLE
FS_COMP_GAIN(2,2)   1 ! Gain multiplied with calculated value to get spring force
FS_COMP_OFFSET(2,2) 0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_COMP(2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_COMP(2,2) 1 ! Scale factor divided into (spring compression -
                         ! CMP_START_FS_COMP)
FS_COMP_COMBINE(2,2) MULTIPLY ! How to combine the two components
FS_COMP_FSTATIC_CONSTANT(2,2) 1 ; - ! [D] Constant spring force component due to
                                ! static spring force, axle 2, right side

! FS_EXT: Extension (lower) envelope of suspension spring force (1 side). Spring
! force can be a nonlinear CARPET function of static spring force and spring
! compression or a function of spring compression (CONSTANT, COEFFICIENT, or TABLE)
! combined with a function FS_EXT_FSTATIC of static spring force (CONSTANT,
! COEFFICIENT, or TABLE). Spring force from the calculation can be adjusted with
! FS_EXT_GAIN and FS_EXT_OFFSET. Spring compression used in the calculation can be
! adjusted with CMP_SCALE_FS_EXT and CMP_START_FS_EXT. Static spring force used in
! the calculation can be adjusted with FSTATIC_SCALE_FS_EXT and FSTATIC_START_FS_EXT.
! An inverse version of this function is used internally. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.

FS_EXT_COEFFICIENT(1,1) 27 ! Coefficient: spring force per unit spring compression
                           ! (N/mm), axle 1, left side
FS_EXT_GAIN(1,1)    1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,1) -20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,1) 1 ! Scale factor divided into (spring compression -
                        ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,1) 1 ; - ! [D] Constant spring force component due to
                               ! static spring force, axle 1, left side

FS_EXT_COEFFICIENT(1,2) 27 ! Coefficient: spring force per unit spring compression
                           ! (N/mm), axle 1, right side
FS_EXT_GAIN(1,2)    1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(1,2) -20 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(1,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(1,2) 1 ! Scale factor divided into (spring compression -
                        ! CMP_START_FS_EXT)
FS_EXT_COMBINE(1,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(1,2) 1 ; - ! [D] Constant spring force component due to
                               ! static spring force, axle 1, right side

! 1D table: col 1 = spring compression (mm), col 2 = spring force (N)
FS_EXT_TABLE(2,1) SPLINE ! axle 2, left side
 -50, 1520.7
 -45, 1673.58
 -40, 1826.45
 -35, 1979.33
 -30, 2132.21
 -25, 2285.09
 -20, 2437.96
 -15, 2590.84
 -10, 2743.72
 -5, 2896.6
 0, 3049.47
 5, 3202.35
 10, 3355.23
 15, 3508.1
 20, 3660.98
 25, 3813.86
 30, 3966.74
 35, 4119.61
 40, 4272.49
 45, 4425.37
 50, 4578.25
ENDTABLE
FS_EXT_GAIN(2,1)    1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,1)  0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,1) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,1) 1 ! Scale factor divided into (spring compression -
                        ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,1) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,1) 1 ; - ! [D] Constant spring force component due to
                               ! static spring force, axle 2, left side

! 1D table: col 1 = spring compression (mm), col 2 = spring force (N)
FS_EXT_TABLE(2,2) SPLINE ! axle 2, right side
 -50, 1520.7
 -45, 1673.58
 -40, 1826.45
 -35, 1979.33
 -30, 2132.21
 -25, 2285.09
 -20, 2437.96
 -15, 2590.84
 -10, 2743.72
 -5, 2896.6
 0, 3049.47
 5, 3202.35
 10, 3355.23
 15, 3508.1
 20, 3660.98
 25, 3813.86
 30, 3966.74
 35, 4119.61
 40, 4272.49
 45, 4425.37
 50, 4578.25
ENDTABLE
FS_EXT_GAIN(2,2)    1 ! Gain multiplied with calculated value to get spring force
FS_EXT_OFFSET(2,2)  0 ; N ! Offset added (after gain) to get spring force
CMP_START_FS_EXT(2,2) 0 ; mm ! Offset subtracted from spring compression
CMP_SCALE_FS_EXT(2,2) 1 ! Scale factor divided into (spring compression -
                        ! CMP_START_FS_EXT)
FS_EXT_COMBINE(2,2) MULTIPLY ! How to combine the two components
FS_EXT_FSTATIC_CONSTANT(2,2) 1 ; - ! [D] Constant spring force component due to
                               ! static spring force, axle 2, right side

! FUEL_RATE: Fuel consumption rate. Fuel rate can be a nonlinear CARPET function of
! throttle position and engine speed or a function of engine speed (CONSTANT or
! TABLE) multiplied by a function FUEL_RATE_THROTTLE of throttle position (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Fuel rate from the calculation can be adjusted with FUEL_RATE_GAIN and
! FUEL_RATE_OFFSET. Engine speed used in the calculation can be adjusted with
! SPIN_SCALE_FUEL_RATE and SPIN_START_FUEL_RATE. Throttle position used in the
! calculation can be adjusted with THROTTLE_SCALE_FUEL_RATE and
! THROTTLE_START_FUEL_RATE.

! 2D table: row 1 has "0" (place holder) followed by 26 values of throttle position
! (-). Other rows have engine speed (rpm) followed by 26 values of fuel rate (kg/s).
FUEL_RATE_CARPET 2D_LINEAR
 0, 0, 0.04, 0.08, 0.12, 0.16, 0.2, 0.24, 0.28, 0.32, 0.36, 0.4, 0.44, 0.48, 0.52, 0.56, 0.6, 0.64, 0.68, 0.72, 0.76, 0.8, 0.84, 0.88, 0.92, 0.96, 1
 600, 0.00016, 0.0004, 0.0006, 0.00064, 0.00068, 0.00074, 0.00078, 0.00082, 0.00086, 0.00092, 0.00096, 0.001, 0.00104, 0.0011, 0.00114, 0.00118, 0.00122, 0.00128, 0.00132, 0.00136, 0.0014, 0.00146, 0.0015, 0.00154, 0.00158, 0.00164
 800, 0.00026, 0.0004, 0.0008, 0.00118, 0.00142, 0.0016, 0.00166, 0.0017, 0.00172, 0.00174, 0.00176, 0.00178, 0.0018, 0.00182, 0.00184, 0.00186, 0.00188, 0.00192, 0.00194, 0.00196, 0.00198, 0.002, 0.00202, 0.00204, 0.00206, 0.00208
 1000, 0.00032, 0.0004, 0.00078, 0.00124, 0.00158, 0.00182, 0.00198, 0.00208, 0.00214, 0.00216, 0.00218, 0.00222, 0.00224, 0.00226, 0.00228, 0.0023, 0.00234, 0.00236, 0.00238, 0.0024, 0.00242, 0.00246, 0.00248, 0.0025, 0.00252, 0.00254
 1200, 0.00032, 0.00042, 0.00078, 0.00128, 0.00176, 0.00208, 0.00228, 0.00246, 0.00256, 0.00262, 0.00266, 0.00268, 0.0027, 0.00274, 0.00276, 0.0028, 0.00282, 0.00284, 0.00288, 0.0029, 0.00294, 0.00296, 0.00298, 0.00302, 0.00304, 0.00308
 1400, 0.00034, 0.00046, 0.00078, 0.00132, 0.00182, 0.00226, 0.0026, 0.0028, 0.00296, 0.00306, 0.00312, 0.00316, 0.0032, 0.00322, 0.00326, 0.0033, 0.00334, 0.00336, 0.0034, 0.00344, 0.00348, 0.0035, 0.00354, 0.00358, 0.00362, 0.00364
 1600, 0.0004, 0.00052, 0.0008, 0.00132, 0.0019, 0.00238, 0.00278, 0.00308, 0.00328, 0.00346, 0.00356, 0.00362, 0.00366, 0.00368, 0.00372, 0.00376, 0.0038, 0.00384, 0.00388, 0.0039, 0.00394, 0.00398, 0.00402, 0.00406, 0.0041, 0.00414
 1800, 0.00042, 0.00056, 0.00078, 0.00134, 0.0019, 0.00248, 0.00294, 0.00332, 0.00356, 0.00378, 0.0039, 0.004, 0.00406, 0.00412, 0.00418, 0.00424, 0.0043, 0.00436, 0.00444, 0.0045, 0.00456, 0.00462, 0.00468, 0.00474, 0.0048, 0.00486
 2000, 0.00046, 0.0006, 0.00076, 0.0013, 0.00192, 0.00258, 0.00312, 0.00356, 0.0039, 0.00414, 0.0043, 0.00442, 0.00454, 0.00462, 0.00468, 0.00476, 0.00482, 0.0049, 0.00498, 0.00504, 0.00512, 0.00518, 0.00526, 0.00534, 0.0054, 0.00548
 2200, 0.0005, 0.00066, 0.00082, 0.0013, 0.00196, 0.0026, 0.00324, 0.00378, 0.00424, 0.00452, 0.00478, 0.00492, 0.00504, 0.00514, 0.00522, 0.00528, 0.00536, 0.00544, 0.0055, 0.00558, 0.00564, 0.00572, 0.0058, 0.00586, 0.00594, 0.006
 2400, 0.00054, 0.00072, 0.00088, 0.0013, 0.0019, 0.00266, 0.00336, 0.00398, 0.00446, 0.0048, 0.0051, 0.0053, 0.00544, 0.00556, 0.00568, 0.0058, 0.00592, 0.00604, 0.00616, 0.00628, 0.00638, 0.0065, 0.00662, 0.00674, 0.00686, 0.00698
 2800, 0.00066, 0.00078, 0.00092, 0.0013, 0.00194, 0.00268, 0.00348, 0.00414, 0.00478, 0.0053, 0.0056, 0.00592, 0.00614, 0.00626, 0.0064, 0.00652, 0.00662, 0.00672, 0.00684, 0.00694, 0.00704, 0.00714, 0.00726, 0.00736, 0.00746, 0.00758
 3200, 0.00076, 0.0009, 0.00106, 0.00128, 0.00194, 0.00272, 0.0035, 0.00432, 0.00512, 0.00574, 0.0062, 0.00652, 0.00686, 0.0073, 0.00776, 0.0082, 0.00848, 0.0085, 0.00854, 0.00858, 0.0086, 0.00864, 0.00868, 0.0087, 0.00874, 0.00878
 3600, 0.00086, 0.00104, 0.00122, 0.0014, 0.0019, 0.00274, 0.00358, 0.00442, 0.00544, 0.0063, 0.00694, 0.00768, 0.00846, 0.00926, 0.00974, 0.0099, 0.01004, 0.01018, 0.01026, 0.01028, 0.01032, 0.01034, 0.01038, 0.0104, 0.01042, 0.01046
 4000, 0.00094, 0.00118, 0.00166, 0.00236, 0.00324, 0.0042, 0.00518, 0.00634, 0.00734, 0.00806, 0.00872, 0.00974, 0.01074, 0.01174, 0.01206, 0.01216, 0.01228, 0.0124, 0.01248, 0.0125, 0.01252, 0.01254, 0.01258, 0.0126, 0.01262, 0.01266
 4400, 0.00102, 0.00128, 0.0017, 0.00244, 0.0033, 0.00436, 0.0054, 0.00666, 0.00784, 0.00886, 0.00954, 0.01028, 0.01136, 0.01242, 0.0135, 0.01406, 0.01418, 0.0143, 0.01442, 0.01452, 0.01462, 0.01464, 0.01466, 0.0147, 0.01472, 0.01476
 4800, 0.00104, 0.00148, 0.0019, 0.00242, 0.00334, 0.00436, 0.00544, 0.00672, 0.00808, 0.00918, 0.01076, 0.0128, 0.01402, 0.0145, 0.015, 0.01548, 0.01586, 0.01598, 0.0161, 0.01622, 0.01634, 0.01644, 0.01656, 0.01658, 0.0166, 0.01662
 5200, 0.00118, 0.00156, 0.00196, 0.00234, 0.00328, 0.00432, 0.00544, 0.0068, 0.0082, 0.0101, 0.01266, 0.0138, 0.01494, 0.01558, 0.01614, 0.0167, 0.01726, 0.0176, 0.01772, 0.01782, 0.01794, 0.01806, 0.01818, 0.01828, 0.0184, 0.01852
 5600, 0.0013, 0.00166, 0.002, 0.00238, 0.0032, 0.00424, 0.00546, 0.00712, 0.00924, 0.01102, 0.01276, 0.01408, 0.01524, 0.01606, 0.0166, 0.01714, 0.0177, 0.01824, 0.0185, 0.01862, 0.01874, 0.01886, 0.01898, 0.0191, 0.01922, 0.01934
 5800, 0.00152, 0.0018, 0.00206, 0.00238, 0.00324, 0.00422, 0.00542, 0.00714, 0.0092, 0.01096, 0.01284, 0.01424, 0.01544, 0.01632, 0.01682, 0.01734, 0.01784, 0.01836, 0.0186, 0.0187, 0.0188, 0.0189, 0.01902, 0.01912, 0.01922, 0.01932
ENDTABLE
FUEL_RATE_GAIN      1 ! Gain multiplied with calculated value to get fuel rate
FUEL_RATE_OFFSET    0 ; kg/s ! Offset added (after gain) to get fuel rate
SPIN_START_FUEL_RATE 0 ; rpm ! Offset subtracted from engine speed
SPIN_SCALE_FUEL_RATE 1 ! Scale factor divided into (engine speed -
                       ! SPIN_START_FUEL_RATE)
THROTTLE_START_FUEL_RATE 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_FUEL_RATE 1 ! Scale factor divided into (throttle position -
                           ! THROTTLE_START_FUEL_RATE)

! FX_AERO_SHAPING: Coefficient CFX for for X component of aerodynamic force. CFX is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFX from the
! calculation can be adjusted with FX_AERO_SHAPING_GAIN and FX_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FX_AERO and SLIP_START_FX_AERO.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFX (-)
FX_AERO_SHAPING_TABLE SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, -0.45
 -160, -0.45
 -90, 0
 -20, 0.325
 0, 0.3
 20, 0.325
 90, 0
 160, -0.45
 180, -0.45
ENDTABLE
FX_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CFX
FX_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CFX
SLIP_START_FX_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FX_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      ! SLIP_START_FX_AERO)

! FX_AERO_SHAPING_2: Coefficient CFX2 for X component of aerodynamic force. CFX2 can
! be a nonlinear CARPET function of ride height and pitch or a function of pitch
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function FX_AERO_SHAPING_Z of
! ride height (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. CFX2 from the calculation can be adjusted with
! FX_AERO_SHAPING_2_GAIN and FX_AERO_SHAPING_2_OFFSET. Pitch used in the calculation
! can be adjusted with PITCH_SCALE_FX_AERO and PITCH_START_FX_AERO. Ride height used
! in the calculation can be adjusted with Z_SCALE_FX_AERO and Z_START_FX_AERO.

FX_AERO_SHAPING_2_CONSTANT 1 ; - ! [D] Constant CFX2 component due to pitch
FX_AERO_SHAPING_2_GAIN 1 ! Gain multiplied with calculated value to get CFX2
FX_AERO_SHAPING_2_OFFSET 0 ; - ! Offset added (after gain) to get CFX2
FX_AERO_SHAPING_2_COMBINE MULTIPLY ! How to combine the two components
FX_AERO_SHAPING_Z_CONSTANT 1 ; - ! [D] Constant CFX2 component due to ride height

! FX_TIRE: Tire longitudinal force (Fx) as a function of vertical load (Fz) and
! longitudinal slip (Kappa). Fx can be a nonlinear CARPET function of Fz and Kappa or
! a function of Kappa multiplied by a function FX_TIRE_FZ of Fz (CONSTANT,
! COEFFICIENT, or TABLE). Fx from the calculation can be adjusted with FX_TIRE_GAIN
! and FX_TIRE_OFFSET. Kappa used in the calculation can be adjusted with
! KAPPA_SCALE_FX_TIRE and KAPPA_START_FX_TIRE. Fz used in the calculation can be
! adjusted with FZ_SCALE_FX_TIRE and FZ_START_FX_TIRE. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Kappa (-) followed by 8 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,1) 2D_FROM_ZERO ! axle 1, left side
 0, 1593.58, 3187.16, 4780.74, 6374.32, 7967.9, 9561.48, 11155.06, 12748.65
 0.02, 866.05, 1702.47, 2504.68, 3270.08, 3996.91, 4683.85, 5329.94, 5934.48
 0.04, 1297.02, 2555.8, 3770.2, 4936.54, 6052.18, 7115.02, 8123.39, 9075.89
 0.06, 1471.85, 2904.23, 4290.68, 5627.28, 6911.13, 8139.89, 9311.59, 10424.58
 0.08, 1545.6, 3051.97, 4512.64, 5923.67, 7282.08, 8585.47, 9831.8, 11019.3
 0.1, 1577.33, 3115.96, 4609.52, 6054.07, 7446.63, 8784.79, 10066.48, 11289.9
 0.12, 1589.5, 3140.9, 4647.9, 6106.6, 7514.05, 8867.84, 10165.9, 11406.43
 0.14, 1591.76, 3145.99, 4656.47, 6119.35, 7531.7, 8891.14, 10195.61, 11443.29
 0.16, 1588.74, 3140.47, 4649.06, 6110.7, 7522.49, 8882.06, 10187.38, 11436.63
 0.18, 1582.86, 3129.18, 4632.91, 6090.28, 7498.42, 8854.99, 10157.96, 11405.55
 0.2, 1575.45, 3114.8, 4612.04, 6063.46, 7466.22, 8817.98, 10116.76, 11360.75
 0.22, 1567.3, 3098.87, 4588.79, 6033.36, 7429.78, 8775.74, 10069.25, 11308.54
 0.24, 1558.85, 3082.33, 4564.54, 6001.84, 7391.45, 8731.07, 10018.74, 11252.71
 0.26, 1550.39, 3065.72, 4540.14, 5970.03, 7352.65, 8685.71, 9967.27, 11195.59
 0.28, 1542.08, 3049.37, 4516.08, 5938.61, 7314.24, 8640.71, 9916.07, 11138.62
 0.3, 1534.02, 3033.49, 4492.67, 5907.99, 7276.75, 8596.7, 9865.92, 11082.7
 0.32, 1526.25, 3018.18, 4470.08, 5878.41, 7240.48, 8554.07, 9817.27, 11028.37
 0.34, 1518.81, 3003.5, 4448.4, 5849.99, 7205.61, 8513.03, 9770.37, 10975.93
 0.36, 1511.7, 2989.47, 4427.66, 5822.79, 7172.2, 8473.68, 9725.35, 10925.54
 0.38, 1504.92, 2976.09, 4407.88, 5796.82, 7140.27, 8436.04, 9682.26, 10877.27
 0.4, 1498.48, 2963.35, 4389.03, 5772.06, 7109.82, 8400.12, 9641.1, 10831.12
 0.42, 1492.34, 2951.22, 4371.08, 5748.48, 7080.79, 8365.85, 9601.82, 10787.04
 0.44, 1486.51, 2939.69, 4354, 5726.02, 7053.13, 8333.19, 9564.36, 10744.99
 0.46, 1480.96, 2928.72, 4337.75, 5704.64, 7026.79, 8302.07, 9528.64, 10704.87
 0.48, 1475.69, 2918.28, 4322.27, 5684.28, 7001.7, 8272.41, 9494.58, 10666.59
 0.5, 1470.66, 2908.34, 4307.54, 5664.88, 6977.78, 8244.13, 9462.1, 10630.08
 0.52, 1465.88, 2898.87, 4293.5, 5646.4, 6954.99, 8217.16, 9431.11, 10595.23
 0.54, 1461.33, 2889.85, 4280.12, 5628.77, 6933.24, 8191.43, 9401.54, 10561.95
 0.56, 1456.98, 2881.24, 4267.35, 5611.95, 6912.49, 8166.87, 9373.29, 10530.16
 0.58, 1452.84, 2873.03, 4255.17, 5595.89, 6892.67, 8143.41, 9346.3, 10499.78
 0.6, 1448.88, 2865.19, 4243.53, 5580.55, 6873.73, 8120.98, 9320.5, 10470.72
 0.62, 1445.1, 2857.69, 4232.4, 5565.89, 6855.62, 8099.52, 9295.81, 10442.91
 0.64, 1441.48, 2850.53, 4221.76, 5551.85, 6838.28, 8078.98, 9272.17, 10416.28
 0.66, 1438.02, 2843.66, 4211.57, 5538.41, 6821.68, 8059.31, 9249.53, 10390.76
 0.68, 1434.7, 2837.09, 4201.81, 5525.54, 6805.78, 8040.46, 9227.82, 10366.28
 0.7, 1431.53, 2830.79, 4192.45, 5513.19, 6790.52, 8022.37, 9206.99, 10342.8
 0.72, 1428.48, 2824.75, 4183.47, 5501.35, 6775.88, 8005.01, 9186.99, 10320.25
 0.74, 1425.55, 2818.95, 4174.85, 5489.97, 6761.82, 7988.34, 9167.78, 10298.59
 0.76, 1422.74, 2813.37, 4166.57, 5479.04, 6748.31, 7972.31, 9149.32, 10277.76
 0.78, 1420.04, 2808.02, 4158.61, 5468.53, 6735.31, 7956.9, 9131.55, 10257.72
 0.8, 1417.44, 2802.86, 4150.95, 5458.42, 6722.81, 7942.07, 9114.46, 10238.43
 0.82, 1414.94, 2797.9, 4143.57, 5448.69, 6710.77, 7927.78, 9097.99, 10219.85
 0.84, 1412.54, 2793.12, 4136.47, 5439.31, 6699.17, 7914.02, 9082.12, 10201.94
 0.86, 1410.22, 2788.52, 4129.63, 5430.27, 6687.99, 7900.75, 9066.82, 10184.67
 0.88, 1407.98, 2784.08, 4123.02, 5421.55, 6677.2, 7887.95, 9052.06, 10168.01
 0.9, 1405.82, 2779.8, 4116.65, 5413.14, 6666.79, 7875.59, 9037.81, 10151.92
 0.92, 1403.74, 2775.66, 4110.5, 5405.02, 6656.74, 7863.66, 9024.04, 10136.37
 0.94, 1401.72, 2771.66, 4104.56, 5397.17, 6647.02, 7852.12, 9010.74, 10121.35
 0.96, 1399.78, 2767.8, 4098.81, 5389.58, 6637.63, 7840.97, 8997.88, 10106.82
 0.98, 1397.9, 2764.07, 4093.26, 5382.24, 6628.55, 7830.19, 8985.43, 10092.77
 1, 1396.08, 2760.45, 4087.88, 5375.14, 6619.76, 7819.75, 8973.38, 10079.16
 1.02, 1396.08, 2760.45, 4087.88, 5375.14, 6619.76, 7819.75, 8973.38, 10079.16
ENDTABLE
FX_TIRE_GAIN(1,1)   1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,1) 1 ! Scale factor divided into (Kappa - KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Kappa (-) followed by 8 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(1,2) 2D_FROM_ZERO ! axle 1, right side
 0, 1593.58, 3187.16, 4780.74, 6374.32, 7967.9, 9561.48, 11155.06, 12748.65
 0.02, 866.05, 1702.47, 2504.68, 3270.08, 3996.91, 4683.85, 5329.94, 5934.48
 0.04, 1297.02, 2555.8, 3770.2, 4936.54, 6052.18, 7115.02, 8123.39, 9075.89
 0.06, 1471.85, 2904.23, 4290.68, 5627.28, 6911.13, 8139.89, 9311.59, 10424.58
 0.08, 1545.6, 3051.97, 4512.64, 5923.67, 7282.08, 8585.47, 9831.8, 11019.3
 0.1, 1577.33, 3115.96, 4609.52, 6054.07, 7446.63, 8784.79, 10066.48, 11289.9
 0.12, 1589.5, 3140.9, 4647.9, 6106.6, 7514.05, 8867.84, 10165.9, 11406.43
 0.14, 1591.76, 3145.99, 4656.47, 6119.35, 7531.7, 8891.14, 10195.61, 11443.29
 0.16, 1588.74, 3140.47, 4649.06, 6110.7, 7522.49, 8882.06, 10187.38, 11436.63
 0.18, 1582.86, 3129.18, 4632.91, 6090.28, 7498.42, 8854.99, 10157.96, 11405.55
 0.2, 1575.45, 3114.8, 4612.04, 6063.46, 7466.22, 8817.98, 10116.76, 11360.75
 0.22, 1567.3, 3098.87, 4588.79, 6033.36, 7429.78, 8775.74, 10069.25, 11308.54
 0.24, 1558.85, 3082.33, 4564.54, 6001.84, 7391.45, 8731.07, 10018.74, 11252.71
 0.26, 1550.39, 3065.72, 4540.14, 5970.03, 7352.65, 8685.71, 9967.27, 11195.59
 0.28, 1542.08, 3049.37, 4516.08, 5938.61, 7314.24, 8640.71, 9916.07, 11138.62
 0.3, 1534.02, 3033.49, 4492.67, 5907.99, 7276.75, 8596.7, 9865.92, 11082.7
 0.32, 1526.25, 3018.18, 4470.08, 5878.41, 7240.48, 8554.07, 9817.27, 11028.37
 0.34, 1518.81, 3003.5, 4448.4, 5849.99, 7205.61, 8513.03, 9770.37, 10975.93
 0.36, 1511.7, 2989.47, 4427.66, 5822.79, 7172.2, 8473.68, 9725.35, 10925.54
 0.38, 1504.92, 2976.09, 4407.88, 5796.82, 7140.27, 8436.04, 9682.26, 10877.27
 0.4, 1498.48, 2963.35, 4389.03, 5772.06, 7109.82, 8400.12, 9641.1, 10831.12
 0.42, 1492.34, 2951.22, 4371.08, 5748.48, 7080.79, 8365.85, 9601.82, 10787.04
 0.44, 1486.51, 2939.69, 4354, 5726.02, 7053.13, 8333.19, 9564.36, 10744.99
 0.46, 1480.96, 2928.72, 4337.75, 5704.64, 7026.79, 8302.07, 9528.64, 10704.87
 0.48, 1475.69, 2918.28, 4322.27, 5684.28, 7001.7, 8272.41, 9494.58, 10666.59
 0.5, 1470.66, 2908.34, 4307.54, 5664.88, 6977.78, 8244.13, 9462.1, 10630.08
 0.52, 1465.88, 2898.87, 4293.5, 5646.4, 6954.99, 8217.16, 9431.11, 10595.23
 0.54, 1461.33, 2889.85, 4280.12, 5628.77, 6933.24, 8191.43, 9401.54, 10561.95
 0.56, 1456.98, 2881.24, 4267.35, 5611.95, 6912.49, 8166.87, 9373.29, 10530.16
 0.58, 1452.84, 2873.03, 4255.17, 5595.89, 6892.67, 8143.41, 9346.3, 10499.78
 0.6, 1448.88, 2865.19, 4243.53, 5580.55, 6873.73, 8120.98, 9320.5, 10470.72
 0.62, 1445.1, 2857.69, 4232.4, 5565.89, 6855.62, 8099.52, 9295.81, 10442.91
 0.64, 1441.48, 2850.53, 4221.76, 5551.85, 6838.28, 8078.98, 9272.17, 10416.28
 0.66, 1438.02, 2843.66, 4211.57, 5538.41, 6821.68, 8059.31, 9249.53, 10390.76
 0.68, 1434.7, 2837.09, 4201.81, 5525.54, 6805.78, 8040.46, 9227.82, 10366.28
 0.7, 1431.53, 2830.79, 4192.45, 5513.19, 6790.52, 8022.37, 9206.99, 10342.8
 0.72, 1428.48, 2824.75, 4183.47, 5501.35, 6775.88, 8005.01, 9186.99, 10320.25
 0.74, 1425.55, 2818.95, 4174.85, 5489.97, 6761.82, 7988.34, 9167.78, 10298.59
 0.76, 1422.74, 2813.37, 4166.57, 5479.04, 6748.31, 7972.31, 9149.32, 10277.76
 0.78, 1420.04, 2808.02, 4158.61, 5468.53, 6735.31, 7956.9, 9131.55, 10257.72
 0.8, 1417.44, 2802.86, 4150.95, 5458.42, 6722.81, 7942.07, 9114.46, 10238.43
 0.82, 1414.94, 2797.9, 4143.57, 5448.69, 6710.77, 7927.78, 9097.99, 10219.85
 0.84, 1412.54, 2793.12, 4136.47, 5439.31, 6699.17, 7914.02, 9082.12, 10201.94
 0.86, 1410.22, 2788.52, 4129.63, 5430.27, 6687.99, 7900.75, 9066.82, 10184.67
 0.88, 1407.98, 2784.08, 4123.02, 5421.55, 6677.2, 7887.95, 9052.06, 10168.01
 0.9, 1405.82, 2779.8, 4116.65, 5413.14, 6666.79, 7875.59, 9037.81, 10151.92
 0.92, 1403.74, 2775.66, 4110.5, 5405.02, 6656.74, 7863.66, 9024.04, 10136.37
 0.94, 1401.72, 2771.66, 4104.56, 5397.17, 6647.02, 7852.12, 9010.74, 10121.35
 0.96, 1399.78, 2767.8, 4098.81, 5389.58, 6637.63, 7840.97, 8997.88, 10106.82
 0.98, 1397.9, 2764.07, 4093.26, 5382.24, 6628.55, 7830.19, 8985.43, 10092.77
 1, 1396.08, 2760.45, 4087.88, 5375.14, 6619.76, 7819.75, 8973.38, 10079.16
 1.02, 1396.08, 2760.45, 4087.88, 5375.14, 6619.76, 7819.75, 8973.38, 10079.16
ENDTABLE
FX_TIRE_GAIN(1,2)   1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(1,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(1,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(1,2) 1 ! Scale factor divided into (Kappa - KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(1,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Kappa (-) followed by 8 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,1) 2D_FROM_ZERO ! axle 2, left side
 0, 1593.58, 3187.16, 4780.74, 6374.32, 7967.9, 9561.48, 11155.06, 12748.65
 0.02, 866.05, 1702.47, 2504.68, 3270.08, 3996.91, 4683.85, 5329.94, 5934.48
 0.04, 1297.02, 2555.8, 3770.2, 4936.54, 6052.18, 7115.02, 8123.39, 9075.89
 0.06, 1471.85, 2904.23, 4290.68, 5627.28, 6911.13, 8139.89, 9311.59, 10424.58
 0.08, 1545.6, 3051.97, 4512.64, 5923.67, 7282.08, 8585.47, 9831.8, 11019.3
 0.1, 1577.33, 3115.96, 4609.52, 6054.07, 7446.63, 8784.79, 10066.48, 11289.9
 0.12, 1589.5, 3140.9, 4647.9, 6106.6, 7514.05, 8867.84, 10165.9, 11406.43
 0.14, 1591.76, 3145.99, 4656.47, 6119.35, 7531.7, 8891.14, 10195.61, 11443.29
 0.16, 1588.74, 3140.47, 4649.06, 6110.7, 7522.49, 8882.06, 10187.38, 11436.63
 0.18, 1582.86, 3129.18, 4632.91, 6090.28, 7498.42, 8854.99, 10157.96, 11405.55
 0.2, 1575.45, 3114.8, 4612.04, 6063.46, 7466.22, 8817.98, 10116.76, 11360.75
 0.22, 1567.3, 3098.87, 4588.79, 6033.36, 7429.78, 8775.74, 10069.25, 11308.54
 0.24, 1558.85, 3082.33, 4564.54, 6001.84, 7391.45, 8731.07, 10018.74, 11252.71
 0.26, 1550.39, 3065.72, 4540.14, 5970.03, 7352.65, 8685.71, 9967.27, 11195.59
 0.28, 1542.08, 3049.37, 4516.08, 5938.61, 7314.24, 8640.71, 9916.07, 11138.62
 0.3, 1534.02, 3033.49, 4492.67, 5907.99, 7276.75, 8596.7, 9865.92, 11082.7
 0.32, 1526.25, 3018.18, 4470.08, 5878.41, 7240.48, 8554.07, 9817.27, 11028.37
 0.34, 1518.81, 3003.5, 4448.4, 5849.99, 7205.61, 8513.03, 9770.37, 10975.93
 0.36, 1511.7, 2989.47, 4427.66, 5822.79, 7172.2, 8473.68, 9725.35, 10925.54
 0.38, 1504.92, 2976.09, 4407.88, 5796.82, 7140.27, 8436.04, 9682.26, 10877.27
 0.4, 1498.48, 2963.35, 4389.03, 5772.06, 7109.82, 8400.12, 9641.1, 10831.12
 0.42, 1492.34, 2951.22, 4371.08, 5748.48, 7080.79, 8365.85, 9601.82, 10787.04
 0.44, 1486.51, 2939.69, 4354, 5726.02, 7053.13, 8333.19, 9564.36, 10744.99
 0.46, 1480.96, 2928.72, 4337.75, 5704.64, 7026.79, 8302.07, 9528.64, 10704.87
 0.48, 1475.69, 2918.28, 4322.27, 5684.28, 7001.7, 8272.41, 9494.58, 10666.59
 0.5, 1470.66, 2908.34, 4307.54, 5664.88, 6977.78, 8244.13, 9462.1, 10630.08
 0.52, 1465.88, 2898.87, 4293.5, 5646.4, 6954.99, 8217.16, 9431.11, 10595.23
 0.54, 1461.33, 2889.85, 4280.12, 5628.77, 6933.24, 8191.43, 9401.54, 10561.95
 0.56, 1456.98, 2881.24, 4267.35, 5611.95, 6912.49, 8166.87, 9373.29, 10530.16
 0.58, 1452.84, 2873.03, 4255.17, 5595.89, 6892.67, 8143.41, 9346.3, 10499.78
 0.6, 1448.88, 2865.19, 4243.53, 5580.55, 6873.73, 8120.98, 9320.5, 10470.72
 0.62, 1445.1, 2857.69, 4232.4, 5565.89, 6855.62, 8099.52, 9295.81, 10442.91
 0.64, 1441.48, 2850.53, 4221.76, 5551.85, 6838.28, 8078.98, 9272.17, 10416.28
 0.66, 1438.02, 2843.66, 4211.57, 5538.41, 6821.68, 8059.31, 9249.53, 10390.76
 0.68, 1434.7, 2837.09, 4201.81, 5525.54, 6805.78, 8040.46, 9227.82, 10366.28
 0.7, 1431.53, 2830.79, 4192.45, 5513.19, 6790.52, 8022.37, 9206.99, 10342.8
 0.72, 1428.48, 2824.75, 4183.47, 5501.35, 6775.88, 8005.01, 9186.99, 10320.25
 0.74, 1425.55, 2818.95, 4174.85, 5489.97, 6761.82, 7988.34, 9167.78, 10298.59
 0.76, 1422.74, 2813.37, 4166.57, 5479.04, 6748.31, 7972.31, 9149.32, 10277.76
 0.78, 1420.04, 2808.02, 4158.61, 5468.53, 6735.31, 7956.9, 9131.55, 10257.72
 0.8, 1417.44, 2802.86, 4150.95, 5458.42, 6722.81, 7942.07, 9114.46, 10238.43
 0.82, 1414.94, 2797.9, 4143.57, 5448.69, 6710.77, 7927.78, 9097.99, 10219.85
 0.84, 1412.54, 2793.12, 4136.47, 5439.31, 6699.17, 7914.02, 9082.12, 10201.94
 0.86, 1410.22, 2788.52, 4129.63, 5430.27, 6687.99, 7900.75, 9066.82, 10184.67
 0.88, 1407.98, 2784.08, 4123.02, 5421.55, 6677.2, 7887.95, 9052.06, 10168.01
 0.9, 1405.82, 2779.8, 4116.65, 5413.14, 6666.79, 7875.59, 9037.81, 10151.92
 0.92, 1403.74, 2775.66, 4110.5, 5405.02, 6656.74, 7863.66, 9024.04, 10136.37
 0.94, 1401.72, 2771.66, 4104.56, 5397.17, 6647.02, 7852.12, 9010.74, 10121.35
 0.96, 1399.78, 2767.8, 4098.81, 5389.58, 6637.63, 7840.97, 8997.88, 10106.82
 0.98, 1397.9, 2764.07, 4093.26, 5382.24, 6628.55, 7830.19, 8985.43, 10092.77
 1, 1396.08, 2760.45, 4087.88, 5375.14, 6619.76, 7819.75, 8973.38, 10079.16
 1.02, 1396.08, 2760.45, 4087.88, 5375.14, 6619.76, 7819.75, 8973.38, 10079.16
ENDTABLE
FX_TIRE_GAIN(2,1)   1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,1) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,1) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,1) 1 ! Scale factor divided into (Kappa - KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,1) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Kappa (-) followed by 8 values of Fx (N). With type = 2D_FROM _ZERO, the table
! includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FX_TIRE_CARPET(2,2) 2D_FROM_ZERO ! axle 2, right side
 0, 1593.58, 3187.16, 4780.74, 6374.32, 7967.9, 9561.48, 11155.06, 12748.65
 0.02, 866.05, 1702.47, 2504.68, 3270.08, 3996.91, 4683.85, 5329.94, 5934.48
 0.04, 1297.02, 2555.8, 3770.2, 4936.54, 6052.18, 7115.02, 8123.39, 9075.89
 0.06, 1471.85, 2904.23, 4290.68, 5627.28, 6911.13, 8139.89, 9311.59, 10424.58
 0.08, 1545.6, 3051.97, 4512.64, 5923.67, 7282.08, 8585.47, 9831.8, 11019.3
 0.1, 1577.33, 3115.96, 4609.52, 6054.07, 7446.63, 8784.79, 10066.48, 11289.9
 0.12, 1589.5, 3140.9, 4647.9, 6106.6, 7514.05, 8867.84, 10165.9, 11406.43
 0.14, 1591.76, 3145.99, 4656.47, 6119.35, 7531.7, 8891.14, 10195.61, 11443.29
 0.16, 1588.74, 3140.47, 4649.06, 6110.7, 7522.49, 8882.06, 10187.38, 11436.63
 0.18, 1582.86, 3129.18, 4632.91, 6090.28, 7498.42, 8854.99, 10157.96, 11405.55
 0.2, 1575.45, 3114.8, 4612.04, 6063.46, 7466.22, 8817.98, 10116.76, 11360.75
 0.22, 1567.3, 3098.87, 4588.79, 6033.36, 7429.78, 8775.74, 10069.25, 11308.54
 0.24, 1558.85, 3082.33, 4564.54, 6001.84, 7391.45, 8731.07, 10018.74, 11252.71
 0.26, 1550.39, 3065.72, 4540.14, 5970.03, 7352.65, 8685.71, 9967.27, 11195.59
 0.28, 1542.08, 3049.37, 4516.08, 5938.61, 7314.24, 8640.71, 9916.07, 11138.62
 0.3, 1534.02, 3033.49, 4492.67, 5907.99, 7276.75, 8596.7, 9865.92, 11082.7
 0.32, 1526.25, 3018.18, 4470.08, 5878.41, 7240.48, 8554.07, 9817.27, 11028.37
 0.34, 1518.81, 3003.5, 4448.4, 5849.99, 7205.61, 8513.03, 9770.37, 10975.93
 0.36, 1511.7, 2989.47, 4427.66, 5822.79, 7172.2, 8473.68, 9725.35, 10925.54
 0.38, 1504.92, 2976.09, 4407.88, 5796.82, 7140.27, 8436.04, 9682.26, 10877.27
 0.4, 1498.48, 2963.35, 4389.03, 5772.06, 7109.82, 8400.12, 9641.1, 10831.12
 0.42, 1492.34, 2951.22, 4371.08, 5748.48, 7080.79, 8365.85, 9601.82, 10787.04
 0.44, 1486.51, 2939.69, 4354, 5726.02, 7053.13, 8333.19, 9564.36, 10744.99
 0.46, 1480.96, 2928.72, 4337.75, 5704.64, 7026.79, 8302.07, 9528.64, 10704.87
 0.48, 1475.69, 2918.28, 4322.27, 5684.28, 7001.7, 8272.41, 9494.58, 10666.59
 0.5, 1470.66, 2908.34, 4307.54, 5664.88, 6977.78, 8244.13, 9462.1, 10630.08
 0.52, 1465.88, 2898.87, 4293.5, 5646.4, 6954.99, 8217.16, 9431.11, 10595.23
 0.54, 1461.33, 2889.85, 4280.12, 5628.77, 6933.24, 8191.43, 9401.54, 10561.95
 0.56, 1456.98, 2881.24, 4267.35, 5611.95, 6912.49, 8166.87, 9373.29, 10530.16
 0.58, 1452.84, 2873.03, 4255.17, 5595.89, 6892.67, 8143.41, 9346.3, 10499.78
 0.6, 1448.88, 2865.19, 4243.53, 5580.55, 6873.73, 8120.98, 9320.5, 10470.72
 0.62, 1445.1, 2857.69, 4232.4, 5565.89, 6855.62, 8099.52, 9295.81, 10442.91
 0.64, 1441.48, 2850.53, 4221.76, 5551.85, 6838.28, 8078.98, 9272.17, 10416.28
 0.66, 1438.02, 2843.66, 4211.57, 5538.41, 6821.68, 8059.31, 9249.53, 10390.76
 0.68, 1434.7, 2837.09, 4201.81, 5525.54, 6805.78, 8040.46, 9227.82, 10366.28
 0.7, 1431.53, 2830.79, 4192.45, 5513.19, 6790.52, 8022.37, 9206.99, 10342.8
 0.72, 1428.48, 2824.75, 4183.47, 5501.35, 6775.88, 8005.01, 9186.99, 10320.25
 0.74, 1425.55, 2818.95, 4174.85, 5489.97, 6761.82, 7988.34, 9167.78, 10298.59
 0.76, 1422.74, 2813.37, 4166.57, 5479.04, 6748.31, 7972.31, 9149.32, 10277.76
 0.78, 1420.04, 2808.02, 4158.61, 5468.53, 6735.31, 7956.9, 9131.55, 10257.72
 0.8, 1417.44, 2802.86, 4150.95, 5458.42, 6722.81, 7942.07, 9114.46, 10238.43
 0.82, 1414.94, 2797.9, 4143.57, 5448.69, 6710.77, 7927.78, 9097.99, 10219.85
 0.84, 1412.54, 2793.12, 4136.47, 5439.31, 6699.17, 7914.02, 9082.12, 10201.94
 0.86, 1410.22, 2788.52, 4129.63, 5430.27, 6687.99, 7900.75, 9066.82, 10184.67
 0.88, 1407.98, 2784.08, 4123.02, 5421.55, 6677.2, 7887.95, 9052.06, 10168.01
 0.9, 1405.82, 2779.8, 4116.65, 5413.14, 6666.79, 7875.59, 9037.81, 10151.92
 0.92, 1403.74, 2775.66, 4110.5, 5405.02, 6656.74, 7863.66, 9024.04, 10136.37
 0.94, 1401.72, 2771.66, 4104.56, 5397.17, 6647.02, 7852.12, 9010.74, 10121.35
 0.96, 1399.78, 2767.8, 4098.81, 5389.58, 6637.63, 7840.97, 8997.88, 10106.82
 0.98, 1397.9, 2764.07, 4093.26, 5382.24, 6628.55, 7830.19, 8985.43, 10092.77
 1, 1396.08, 2760.45, 4087.88, 5375.14, 6619.76, 7819.75, 8973.38, 10079.16
 1.02, 1396.08, 2760.45, 4087.88, 5375.14, 6619.76, 7819.75, 8973.38, 10079.16
ENDTABLE
FX_TIRE_GAIN(2,2)   1 ! Gain multiplied with calculated value to get Fx
FX_TIRE_OFFSET(2,2) 0 ; N ! Offset added (after gain) to get Fx
KAPPA_START_FX_TIRE(2,2) 0 ; - ! Offset subtracted from Kappa
KAPPA_SCALE_FX_TIRE(2,2) 1 ! Scale factor divided into (Kappa - KAPPA_START_FX_TIRE)
FZ_START_FX_TIRE(2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FX_TIRE(2,2) 1 ! Scale factor divided into (Fz - FZ_START_FX_TIRE)

! FY_AERO_SHAPING: Coefficient CFY for for Y component of aerodynamic force. CFY is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFY from the
! calculation can be adjusted with FY_AERO_SHAPING_GAIN and FY_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FY_AERO and SLIP_START_FY_AERO.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFY (-)
FY_AERO_SHAPING_TABLE SPLINE ! spline interpolation and extrapolation
 -180, 0
 -90, -0.5
 0, 0
 90, 0.5
 180, 0
ENDTABLE
FY_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CFY
FY_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CFY
SLIP_START_FY_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FY_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      ! SLIP_START_FY_AERO)

! FY_AERO_SHAPING_2: Coefficient CFY2 for Y component of aerodynamic force. CFY2 can
! be a nonlinear CARPET function of ride height and pitch or a function of pitch
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function FY_AERO_SHAPING_Z of
! ride height (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. CFY2 from the calculation can be adjusted with
! FY_AERO_SHAPING_2_GAIN and FY_AERO_SHAPING_2_OFFSET. Pitch used in the calculation
! can be adjusted with PITCH_SCALE_FY_AERO and PITCH_START_FY_AERO. Ride height used
! in the calculation can be adjusted with Z_SCALE_FY_AERO and Z_START_FY_AERO.

FY_AERO_SHAPING_2_CONSTANT 1 ; - ! [D] Constant CFY2 component due to pitch
FY_AERO_SHAPING_2_GAIN 1 ! Gain multiplied with calculated value to get CFY2
FY_AERO_SHAPING_2_OFFSET 0 ; - ! Offset added (after gain) to get CFY2
FY_AERO_SHAPING_2_COMBINE MULTIPLY ! How to combine the two components
FY_AERO_SHAPING_Z_CONSTANT 1 ; - ! [D] Constant CFY2 component due to ride height

! FY_TIRE: Tire lateral force (Fy) as a function of vertical load (Fz) and lateral
! slip (Alpha). Fy can be a nonlinear CARPET function of Fz and Alpha or a function
! of Alpha multiplied by a function FY_TIRE_FZ of Fz (CONSTANT, COEFFICIENT, or
! TABLE). Fy from the calculation can be adjusted with FY_TIRE_GAIN and
! FY_TIRE_OFFSET. Alpha used in the calculation can be adjusted with
! ALPHA_SCALE_FY_TIRE and ALPHA_START_FY_TIRE. Fz used in the calculation can be
! adjusted with FZ_SCALE_FY_TIRE and FZ_START_FY_TIRE. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,1) 2D_FROM_ZERO ! axle 1, left side
 0, 1593.58, 3187.16, 4780.74, 6374.32, 7967.9, 9561.48, 11155.06, 12748.65
 0.5, 248.08, 483.5, 704.46, 910.03, 1099.7, 1273.15, 1430.26, 1571
 1, 486, 947.74, 1381.71, 1786.09, 2159.81, 2502.21, 2812.97, 3091.98
 1.5, 704.93, 1375.9, 2007.9, 2598.26, 3145.3, 3647.98, 4105.65, 4518.01
 2, 898.46, 1755.66, 2565.35, 3324.08, 4029.58, 4680.29, 5275.2, 5813.66
 2.5, 1063.18, 2080.29, 3044.12, 3950.55, 4796.73, 5580.62, 6300.7, 6955.9
 3, 1198.64, 2348.57, 3441.97, 4474.17, 5441.86, 6342.46, 7173.99, 7934.9
 3.5, 1306.65, 2563.69, 3762.95, 4899.4, 5969.31, 6969.71, 7898.17, 8752.65
 4, 1390.46, 2731.63, 4015.21, 5235.95, 6389.87, 7473.66, 8484.53, 9420.05
 4.5, 1453.91, 2859.62, 4208.83, 5496.25, 6717.72, 7869.74, 8949.25, 9953.51
 5, 1500.82, 2954.92, 4354.16, 5693.25, 6967.99, 8174.77, 9310.36, 10371.82
 5.5, 1534.64, 3024.19, 4460.73, 5839.08, 7155.04, 8404.98, 9585.61, 10693.86
 6, 1558.28, 3073.11, 4536.82, 5944.36, 7291.62, 8574.99, 9791.17, 10937.07
 6.5, 1574.12, 3106.35, 4589.27, 6017.99, 7388.5, 8697.27, 9941.07, 11116.8
 7, 1584.05, 3127.63, 4623.58, 6067.16, 7454.5, 8782.18, 10047.02, 11246
 7.5, 1589.54, 3139.87, 4644.08, 6097.61, 7496.7, 8838.05, 10118.59, 11335.38
 8, 1591.7, 3145.32, 4654.17, 6113.82, 7520.67, 8871.54, 10163.46, 11393.59
 8.5, 1591.4, 3145.71, 4656.43, 6119.28, 7530.79, 8887.88, 10187.72, 11427.56
 9, 1589.29, 3142.36, 4652.87, 6116.68, 7530.43, 8891.17, 10196.16, 11442.78
 9.5, 1585.88, 3136.27, 4645.01, 6108.08, 7522.22, 8884.59, 10192.55, 11443.6
 10, 1581.52, 3128.2, 4634.02, 6095.06, 7508.17, 8870.59, 10179.81, 11433.4
 10.5, 1576.5, 3118.73, 4620.79, 6078.84, 7489.83, 8851.11, 10160.22, 11414.86
 11, 1571.04, 3108.3, 4605.98, 6060.34, 7468.41, 8827.6, 10135.56, 11390.06
 11.5, 1565.3, 3097.24, 4590.13, 6040.29, 7444.82, 8801.22, 10107.2, 11360.64
 12, 1559.4, 3085.8, 4573.6, 6019.2, 7419.76, 8772.84, 10076.22, 11327.85
 12.5, 1553.42, 3074.17, 4556.71, 5997.51, 7393.78, 8743.14, 10043.45, 11292.71
 13, 1547.43, 3062.48, 4539.67, 5975.51, 7367.28, 8712.65, 10009.53, 11255.98
 13.5, 1541.49, 3050.85, 4522.65, 5953.45, 7340.58, 8681.76, 9974.95, 11218.26
 14, 1535.63, 3039.34, 4505.77, 5931.51, 7313.93, 8650.78, 9940.1, 11180.02
 14.5, 1529.87, 3028.02, 4489.12, 5909.81, 7287.49, 8619.95, 9905.26, 11141.62
 15, 1524.24, 3016.93, 4472.78, 5888.46, 7261.4, 8589.44, 9870.67, 11103.34
 15.5, 1518.75, 3006.09, 4456.78, 5867.52, 7235.76, 8559.37, 9836.49, 11065.39
 16, 1513.4, 2995.53, 4441.16, 5847.04, 7210.63, 8529.85, 9802.84, 11027.93
 16.5, 1508.2, 2985.25, 4425.95, 5827.05, 7186.08, 8500.94, 9769.82, 10991.07
 17, 1503.15, 2975.26, 4411.14, 5807.59, 7162.12, 8472.69, 9737.49, 10954.92
 17.5, 1498.25, 2965.56, 4396.76, 5788.65, 7138.78, 8445.12, 9705.9, 10919.52
 18, 1493.51, 2956.15, 4382.78, 5770.24, 7116.07, 8418.26, 9675.07, 10884.92
 18.5, 1488.91, 2947.02, 4369.23, 5752.35, 7093.98, 8392.12, 9645.02, 10851.14
 19, 1484.45, 2938.18, 4356.07, 5734.99, 7072.52, 8366.68, 9615.76, 10818.21
 19.5, 1480.14, 2929.6, 4343.32, 5718.14, 7051.68, 8341.96, 9587.28, 10786.11
 20, 1475.96, 2921.3, 4330.95, 5701.79, 7031.44, 8317.92, 9559.57, 10754.86
 20.5, 1471.91, 2913.25, 4318.96, 5685.93, 7011.79, 8294.58, 9532.63, 10724.44
 21, 1467.98, 2905.45, 4307.34, 5670.55, 6992.71, 8271.89, 9506.43, 10694.84
 21.5, 1464.18, 2897.89, 4296.06, 5655.62, 6974.19, 8249.86, 9480.97, 10666.04
 22, 1460.5, 2890.56, 4285.13, 5641.13, 6956.21, 8228.45, 9456.21, 10638.03
 22.5, 1456.93, 2883.45, 4274.52, 5627.07, 6938.75, 8207.66, 9432.15, 10610.78
 23, 1453.47, 2876.55, 4264.23, 5613.43, 6921.8, 8187.45, 9408.76, 10584.27
 23.5, 1450.11, 2869.87, 4254.25, 5600.18, 6905.33, 8167.82, 9386.01, 10558.48
 24, 1446.86, 2863.37, 4244.55, 5587.31, 6889.33, 8148.73, 9363.89, 10533.38
 24.5, 1443.69, 2857.07, 4235.13, 5574.81, 6873.79, 8130.18, 9342.38, 10508.96
 25, 1440.63, 2850.95, 4225.98, 5562.66, 6858.67, 8112.14, 9321.44, 10485.19
 26, 1440.63, 2850.95, 4225.98, 5562.66, 6858.67, 8112.14, 9321.44, 10485.19
ENDTABLE
FY_TIRE_GAIN(1,1)   1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,1) 1 ! Scale factor divided into (Alpha - ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(1,2) 2D_FROM_ZERO ! axle 1, right side
 0, 1593.58, 3187.16, 4780.74, 6374.32, 7967.9, 9561.48, 11155.06, 12748.65
 0.5, 248.08, 483.5, 704.46, 910.03, 1099.7, 1273.15, 1430.26, 1571
 1, 486, 947.74, 1381.71, 1786.09, 2159.81, 2502.21, 2812.97, 3091.98
 1.5, 704.93, 1375.9, 2007.9, 2598.26, 3145.3, 3647.98, 4105.65, 4518.01
 2, 898.46, 1755.66, 2565.35, 3324.08, 4029.58, 4680.29, 5275.2, 5813.66
 2.5, 1063.18, 2080.29, 3044.12, 3950.55, 4796.73, 5580.62, 6300.7, 6955.9
 3, 1198.64, 2348.57, 3441.97, 4474.17, 5441.86, 6342.46, 7173.99, 7934.9
 3.5, 1306.65, 2563.69, 3762.95, 4899.4, 5969.31, 6969.71, 7898.17, 8752.65
 4, 1390.46, 2731.63, 4015.21, 5235.95, 6389.87, 7473.66, 8484.53, 9420.05
 4.5, 1453.91, 2859.62, 4208.83, 5496.25, 6717.72, 7869.74, 8949.25, 9953.51
 5, 1500.82, 2954.92, 4354.16, 5693.25, 6967.99, 8174.77, 9310.36, 10371.82
 5.5, 1534.64, 3024.19, 4460.73, 5839.08, 7155.04, 8404.98, 9585.61, 10693.86
 6, 1558.28, 3073.11, 4536.82, 5944.36, 7291.62, 8574.99, 9791.17, 10937.07
 6.5, 1574.12, 3106.35, 4589.27, 6017.99, 7388.5, 8697.27, 9941.07, 11116.8
 7, 1584.05, 3127.63, 4623.58, 6067.16, 7454.5, 8782.18, 10047.02, 11246
 7.5, 1589.54, 3139.87, 4644.08, 6097.61, 7496.7, 8838.05, 10118.59, 11335.38
 8, 1591.7, 3145.32, 4654.17, 6113.82, 7520.67, 8871.54, 10163.46, 11393.59
 8.5, 1591.4, 3145.71, 4656.43, 6119.28, 7530.79, 8887.88, 10187.72, 11427.56
 9, 1589.29, 3142.36, 4652.87, 6116.68, 7530.43, 8891.17, 10196.16, 11442.78
 9.5, 1585.88, 3136.27, 4645.01, 6108.08, 7522.22, 8884.59, 10192.55, 11443.6
 10, 1581.52, 3128.2, 4634.02, 6095.06, 7508.17, 8870.59, 10179.81, 11433.4
 10.5, 1576.5, 3118.73, 4620.79, 6078.84, 7489.83, 8851.11, 10160.22, 11414.86
 11, 1571.04, 3108.3, 4605.98, 6060.34, 7468.41, 8827.6, 10135.56, 11390.06
 11.5, 1565.3, 3097.24, 4590.13, 6040.29, 7444.82, 8801.22, 10107.2, 11360.64
 12, 1559.4, 3085.8, 4573.6, 6019.2, 7419.76, 8772.84, 10076.22, 11327.85
 12.5, 1553.42, 3074.17, 4556.71, 5997.51, 7393.78, 8743.14, 10043.45, 11292.71
 13, 1547.43, 3062.48, 4539.67, 5975.51, 7367.28, 8712.65, 10009.53, 11255.98
 13.5, 1541.49, 3050.85, 4522.65, 5953.45, 7340.58, 8681.76, 9974.95, 11218.26
 14, 1535.63, 3039.34, 4505.77, 5931.51, 7313.93, 8650.78, 9940.1, 11180.02
 14.5, 1529.87, 3028.02, 4489.12, 5909.81, 7287.49, 8619.95, 9905.26, 11141.62
 15, 1524.24, 3016.93, 4472.78, 5888.46, 7261.4, 8589.44, 9870.67, 11103.34
 15.5, 1518.75, 3006.09, 4456.78, 5867.52, 7235.76, 8559.37, 9836.49, 11065.39
 16, 1513.4, 2995.53, 4441.16, 5847.04, 7210.63, 8529.85, 9802.84, 11027.93
 16.5, 1508.2, 2985.25, 4425.95, 5827.05, 7186.08, 8500.94, 9769.82, 10991.07
 17, 1503.15, 2975.26, 4411.14, 5807.59, 7162.12, 8472.69, 9737.49, 10954.92
 17.5, 1498.25, 2965.56, 4396.76, 5788.65, 7138.78, 8445.12, 9705.9, 10919.52
 18, 1493.51, 2956.15, 4382.78, 5770.24, 7116.07, 8418.26, 9675.07, 10884.92
 18.5, 1488.91, 2947.02, 4369.23, 5752.35, 7093.98, 8392.12, 9645.02, 10851.14
 19, 1484.45, 2938.18, 4356.07, 5734.99, 7072.52, 8366.68, 9615.76, 10818.21
 19.5, 1480.14, 2929.6, 4343.32, 5718.14, 7051.68, 8341.96, 9587.28, 10786.11
 20, 1475.96, 2921.3, 4330.95, 5701.79, 7031.44, 8317.92, 9559.57, 10754.86
 20.5, 1471.91, 2913.25, 4318.96, 5685.93, 7011.79, 8294.58, 9532.63, 10724.44
 21, 1467.98, 2905.45, 4307.34, 5670.55, 6992.71, 8271.89, 9506.43, 10694.84
 21.5, 1464.18, 2897.89, 4296.06, 5655.62, 6974.19, 8249.86, 9480.97, 10666.04
 22, 1460.5, 2890.56, 4285.13, 5641.13, 6956.21, 8228.45, 9456.21, 10638.03
 22.5, 1456.93, 2883.45, 4274.52, 5627.07, 6938.75, 8207.66, 9432.15, 10610.78
 23, 1453.47, 2876.55, 4264.23, 5613.43, 6921.8, 8187.45, 9408.76, 10584.27
 23.5, 1450.11, 2869.87, 4254.25, 5600.18, 6905.33, 8167.82, 9386.01, 10558.48
 24, 1446.86, 2863.37, 4244.55, 5587.31, 6889.33, 8148.73, 9363.89, 10533.38
 24.5, 1443.69, 2857.07, 4235.13, 5574.81, 6873.79, 8130.18, 9342.38, 10508.96
 25, 1440.63, 2850.95, 4225.98, 5562.66, 6858.67, 8112.14, 9321.44, 10485.19
 26, 1440.63, 2850.95, 4225.98, 5562.66, 6858.67, 8112.14, 9321.44, 10485.19
ENDTABLE
FY_TIRE_GAIN(1,2)   1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(1,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(1,2) 1 ! Scale factor divided into (Alpha - ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(1,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,1) 2D_FROM_ZERO ! axle 2, left side
 0, 1593.58, 3187.16, 4780.74, 6374.32, 7967.9, 9561.48, 11155.06, 12748.65
 0.5, 248.08, 483.5, 704.46, 910.03, 1099.7, 1273.15, 1430.26, 1571
 1, 486, 947.74, 1381.71, 1786.09, 2159.81, 2502.21, 2812.97, 3091.98
 1.5, 704.93, 1375.9, 2007.9, 2598.26, 3145.3, 3647.98, 4105.65, 4518.01
 2, 898.46, 1755.66, 2565.35, 3324.08, 4029.58, 4680.29, 5275.2, 5813.66
 2.5, 1063.18, 2080.29, 3044.12, 3950.55, 4796.73, 5580.62, 6300.7, 6955.9
 3, 1198.64, 2348.57, 3441.97, 4474.17, 5441.86, 6342.46, 7173.99, 7934.9
 3.5, 1306.65, 2563.69, 3762.95, 4899.4, 5969.31, 6969.71, 7898.17, 8752.65
 4, 1390.46, 2731.63, 4015.21, 5235.95, 6389.87, 7473.66, 8484.53, 9420.05
 4.5, 1453.91, 2859.62, 4208.83, 5496.25, 6717.72, 7869.74, 8949.25, 9953.51
 5, 1500.82, 2954.92, 4354.16, 5693.25, 6967.99, 8174.77, 9310.36, 10371.82
 5.5, 1534.64, 3024.19, 4460.73, 5839.08, 7155.04, 8404.98, 9585.61, 10693.86
 6, 1558.28, 3073.11, 4536.82, 5944.36, 7291.62, 8574.99, 9791.17, 10937.07
 6.5, 1574.12, 3106.35, 4589.27, 6017.99, 7388.5, 8697.27, 9941.07, 11116.8
 7, 1584.05, 3127.63, 4623.58, 6067.16, 7454.5, 8782.18, 10047.02, 11246
 7.5, 1589.54, 3139.87, 4644.08, 6097.61, 7496.7, 8838.05, 10118.59, 11335.38
 8, 1591.7, 3145.32, 4654.17, 6113.82, 7520.67, 8871.54, 10163.46, 11393.59
 8.5, 1591.4, 3145.71, 4656.43, 6119.28, 7530.79, 8887.88, 10187.72, 11427.56
 9, 1589.29, 3142.36, 4652.87, 6116.68, 7530.43, 8891.17, 10196.16, 11442.78
 9.5, 1585.88, 3136.27, 4645.01, 6108.08, 7522.22, 8884.59, 10192.55, 11443.6
 10, 1581.52, 3128.2, 4634.02, 6095.06, 7508.17, 8870.59, 10179.81, 11433.4
 10.5, 1576.5, 3118.73, 4620.79, 6078.84, 7489.83, 8851.11, 10160.22, 11414.86
 11, 1571.04, 3108.3, 4605.98, 6060.34, 7468.41, 8827.6, 10135.56, 11390.06
 11.5, 1565.3, 3097.24, 4590.13, 6040.29, 7444.82, 8801.22, 10107.2, 11360.64
 12, 1559.4, 3085.8, 4573.6, 6019.2, 7419.76, 8772.84, 10076.22, 11327.85
 12.5, 1553.42, 3074.17, 4556.71, 5997.51, 7393.78, 8743.14, 10043.45, 11292.71
 13, 1547.43, 3062.48, 4539.67, 5975.51, 7367.28, 8712.65, 10009.53, 11255.98
 13.5, 1541.49, 3050.85, 4522.65, 5953.45, 7340.58, 8681.76, 9974.95, 11218.26
 14, 1535.63, 3039.34, 4505.77, 5931.51, 7313.93, 8650.78, 9940.1, 11180.02
 14.5, 1529.87, 3028.02, 4489.12, 5909.81, 7287.49, 8619.95, 9905.26, 11141.62
 15, 1524.24, 3016.93, 4472.78, 5888.46, 7261.4, 8589.44, 9870.67, 11103.34
 15.5, 1518.75, 3006.09, 4456.78, 5867.52, 7235.76, 8559.37, 9836.49, 11065.39
 16, 1513.4, 2995.53, 4441.16, 5847.04, 7210.63, 8529.85, 9802.84, 11027.93
 16.5, 1508.2, 2985.25, 4425.95, 5827.05, 7186.08, 8500.94, 9769.82, 10991.07
 17, 1503.15, 2975.26, 4411.14, 5807.59, 7162.12, 8472.69, 9737.49, 10954.92
 17.5, 1498.25, 2965.56, 4396.76, 5788.65, 7138.78, 8445.12, 9705.9, 10919.52
 18, 1493.51, 2956.15, 4382.78, 5770.24, 7116.07, 8418.26, 9675.07, 10884.92
 18.5, 1488.91, 2947.02, 4369.23, 5752.35, 7093.98, 8392.12, 9645.02, 10851.14
 19, 1484.45, 2938.18, 4356.07, 5734.99, 7072.52, 8366.68, 9615.76, 10818.21
 19.5, 1480.14, 2929.6, 4343.32, 5718.14, 7051.68, 8341.96, 9587.28, 10786.11
 20, 1475.96, 2921.3, 4330.95, 5701.79, 7031.44, 8317.92, 9559.57, 10754.86
 20.5, 1471.91, 2913.25, 4318.96, 5685.93, 7011.79, 8294.58, 9532.63, 10724.44
 21, 1467.98, 2905.45, 4307.34, 5670.55, 6992.71, 8271.89, 9506.43, 10694.84
 21.5, 1464.18, 2897.89, 4296.06, 5655.62, 6974.19, 8249.86, 9480.97, 10666.04
 22, 1460.5, 2890.56, 4285.13, 5641.13, 6956.21, 8228.45, 9456.21, 10638.03
 22.5, 1456.93, 2883.45, 4274.52, 5627.07, 6938.75, 8207.66, 9432.15, 10610.78
 23, 1453.47, 2876.55, 4264.23, 5613.43, 6921.8, 8187.45, 9408.76, 10584.27
 23.5, 1450.11, 2869.87, 4254.25, 5600.18, 6905.33, 8167.82, 9386.01, 10558.48
 24, 1446.86, 2863.37, 4244.55, 5587.31, 6889.33, 8148.73, 9363.89, 10533.38
 24.5, 1443.69, 2857.07, 4235.13, 5574.81, 6873.79, 8130.18, 9342.38, 10508.96
 25, 1440.63, 2850.95, 4225.98, 5562.66, 6858.67, 8112.14, 9321.44, 10485.19
 26, 1440.63, 2850.95, 4225.98, 5562.66, 6858.67, 8112.14, 9321.44, 10485.19
ENDTABLE
FY_TIRE_GAIN(2,1)   1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,1) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,1) 1 ! Scale factor divided into (Alpha - ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,1) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Fy (N). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
FY_TIRE_CARPET(2,2) 2D_FROM_ZERO ! axle 2, right side
 0, 1593.58, 3187.16, 4780.74, 6374.32, 7967.9, 9561.48, 11155.06, 12748.65
 0.5, 248.08, 483.5, 704.46, 910.03, 1099.7, 1273.15, 1430.26, 1571
 1, 486, 947.74, 1381.71, 1786.09, 2159.81, 2502.21, 2812.97, 3091.98
 1.5, 704.93, 1375.9, 2007.9, 2598.26, 3145.3, 3647.98, 4105.65, 4518.01
 2, 898.46, 1755.66, 2565.35, 3324.08, 4029.58, 4680.29, 5275.2, 5813.66
 2.5, 1063.18, 2080.29, 3044.12, 3950.55, 4796.73, 5580.62, 6300.7, 6955.9
 3, 1198.64, 2348.57, 3441.97, 4474.17, 5441.86, 6342.46, 7173.99, 7934.9
 3.5, 1306.65, 2563.69, 3762.95, 4899.4, 5969.31, 6969.71, 7898.17, 8752.65
 4, 1390.46, 2731.63, 4015.21, 5235.95, 6389.87, 7473.66, 8484.53, 9420.05
 4.5, 1453.91, 2859.62, 4208.83, 5496.25, 6717.72, 7869.74, 8949.25, 9953.51
 5, 1500.82, 2954.92, 4354.16, 5693.25, 6967.99, 8174.77, 9310.36, 10371.82
 5.5, 1534.64, 3024.19, 4460.73, 5839.08, 7155.04, 8404.98, 9585.61, 10693.86
 6, 1558.28, 3073.11, 4536.82, 5944.36, 7291.62, 8574.99, 9791.17, 10937.07
 6.5, 1574.12, 3106.35, 4589.27, 6017.99, 7388.5, 8697.27, 9941.07, 11116.8
 7, 1584.05, 3127.63, 4623.58, 6067.16, 7454.5, 8782.18, 10047.02, 11246
 7.5, 1589.54, 3139.87, 4644.08, 6097.61, 7496.7, 8838.05, 10118.59, 11335.38
 8, 1591.7, 3145.32, 4654.17, 6113.82, 7520.67, 8871.54, 10163.46, 11393.59
 8.5, 1591.4, 3145.71, 4656.43, 6119.28, 7530.79, 8887.88, 10187.72, 11427.56
 9, 1589.29, 3142.36, 4652.87, 6116.68, 7530.43, 8891.17, 10196.16, 11442.78
 9.5, 1585.88, 3136.27, 4645.01, 6108.08, 7522.22, 8884.59, 10192.55, 11443.6
 10, 1581.52, 3128.2, 4634.02, 6095.06, 7508.17, 8870.59, 10179.81, 11433.4
 10.5, 1576.5, 3118.73, 4620.79, 6078.84, 7489.83, 8851.11, 10160.22, 11414.86
 11, 1571.04, 3108.3, 4605.98, 6060.34, 7468.41, 8827.6, 10135.56, 11390.06
 11.5, 1565.3, 3097.24, 4590.13, 6040.29, 7444.82, 8801.22, 10107.2, 11360.64
 12, 1559.4, 3085.8, 4573.6, 6019.2, 7419.76, 8772.84, 10076.22, 11327.85
 12.5, 1553.42, 3074.17, 4556.71, 5997.51, 7393.78, 8743.14, 10043.45, 11292.71
 13, 1547.43, 3062.48, 4539.67, 5975.51, 7367.28, 8712.65, 10009.53, 11255.98
 13.5, 1541.49, 3050.85, 4522.65, 5953.45, 7340.58, 8681.76, 9974.95, 11218.26
 14, 1535.63, 3039.34, 4505.77, 5931.51, 7313.93, 8650.78, 9940.1, 11180.02
 14.5, 1529.87, 3028.02, 4489.12, 5909.81, 7287.49, 8619.95, 9905.26, 11141.62
 15, 1524.24, 3016.93, 4472.78, 5888.46, 7261.4, 8589.44, 9870.67, 11103.34
 15.5, 1518.75, 3006.09, 4456.78, 5867.52, 7235.76, 8559.37, 9836.49, 11065.39
 16, 1513.4, 2995.53, 4441.16, 5847.04, 7210.63, 8529.85, 9802.84, 11027.93
 16.5, 1508.2, 2985.25, 4425.95, 5827.05, 7186.08, 8500.94, 9769.82, 10991.07
 17, 1503.15, 2975.26, 4411.14, 5807.59, 7162.12, 8472.69, 9737.49, 10954.92
 17.5, 1498.25, 2965.56, 4396.76, 5788.65, 7138.78, 8445.12, 9705.9, 10919.52
 18, 1493.51, 2956.15, 4382.78, 5770.24, 7116.07, 8418.26, 9675.07, 10884.92
 18.5, 1488.91, 2947.02, 4369.23, 5752.35, 7093.98, 8392.12, 9645.02, 10851.14
 19, 1484.45, 2938.18, 4356.07, 5734.99, 7072.52, 8366.68, 9615.76, 10818.21
 19.5, 1480.14, 2929.6, 4343.32, 5718.14, 7051.68, 8341.96, 9587.28, 10786.11
 20, 1475.96, 2921.3, 4330.95, 5701.79, 7031.44, 8317.92, 9559.57, 10754.86
 20.5, 1471.91, 2913.25, 4318.96, 5685.93, 7011.79, 8294.58, 9532.63, 10724.44
 21, 1467.98, 2905.45, 4307.34, 5670.55, 6992.71, 8271.89, 9506.43, 10694.84
 21.5, 1464.18, 2897.89, 4296.06, 5655.62, 6974.19, 8249.86, 9480.97, 10666.04
 22, 1460.5, 2890.56, 4285.13, 5641.13, 6956.21, 8228.45, 9456.21, 10638.03
 22.5, 1456.93, 2883.45, 4274.52, 5627.07, 6938.75, 8207.66, 9432.15, 10610.78
 23, 1453.47, 2876.55, 4264.23, 5613.43, 6921.8, 8187.45, 9408.76, 10584.27
 23.5, 1450.11, 2869.87, 4254.25, 5600.18, 6905.33, 8167.82, 9386.01, 10558.48
 24, 1446.86, 2863.37, 4244.55, 5587.31, 6889.33, 8148.73, 9363.89, 10533.38
 24.5, 1443.69, 2857.07, 4235.13, 5574.81, 6873.79, 8130.18, 9342.38, 10508.96
 25, 1440.63, 2850.95, 4225.98, 5562.66, 6858.67, 8112.14, 9321.44, 10485.19
 26, 1440.63, 2850.95, 4225.98, 5562.66, 6858.67, 8112.14, 9321.44, 10485.19
ENDTABLE
FY_TIRE_GAIN(2,2)   1 ! Gain multiplied with calculated value to get Fy
FY_TIRE_OFFSET(2,2) 0 ; N ! Offset added (after gain) to get Fy
ALPHA_START_FY_TIRE(2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_FY_TIRE(2,2) 1 ! Scale factor divided into (Alpha - ALPHA_START_FY_TIRE)
FZ_START_FY_TIRE(2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_FY_TIRE(2,2) 1 ! Scale factor divided into (Fz - FZ_START_FY_TIRE)

! FZ_AERO_SHAPING: Coefficient CFZ for for Z component of aerodynamic force. CFZ is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CFZ from the
! calculation can be adjusted with FZ_AERO_SHAPING_GAIN and FZ_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_FZ_AERO and SLIP_START_FZ_AERO.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CFZ (-)
FZ_AERO_SHAPING_TABLE SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 -180, 0.4
 -135, 0.45
 -90, 0.35
 -20, 0.185
 0, 0.18
 20, 0.185
 90, 0.35
 135, 0.45
 180, 0.4
ENDTABLE
FZ_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CFZ
FZ_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CFZ
SLIP_START_FZ_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_FZ_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      ! SLIP_START_FZ_AERO)

! FZ_AERO_SHAPING_2: Coefficient CFZ2 for Z component of aerodynamic force. CFZ2 can
! be a nonlinear CARPET function of ride height and pitch or a function of pitch
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function FZ_AERO_SHAPING_Z of
! ride height (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. CFZ2 from the calculation can be adjusted with
! FZ_AERO_SHAPING_2_GAIN and FZ_AERO_SHAPING_2_OFFSET. Pitch used in the calculation
! can be adjusted with PITCH_SCALE_FZ_AERO and PITCH_START_FZ_AERO. Ride height used
! in the calculation can be adjusted with Z_SCALE_FZ_AERO and Z_START_FZ_AERO.

FZ_AERO_SHAPING_2_CONSTANT 1 ; - ! [D] Constant CFZ2 component due to pitch
FZ_AERO_SHAPING_2_GAIN 1 ! Gain multiplied with calculated value to get CFZ2
FZ_AERO_SHAPING_2_OFFSET 0 ; - ! Offset added (after gain) to get CFZ2
FZ_AERO_SHAPING_2_COMBINE MULTIPLY ! How to combine the two components
FZ_AERO_SHAPING_Z_CONSTANT 1 ; - ! [D] Constant CFZ2 component due to ride height

! FZ_TIRE: Tire vertical load. Vertical load is a function of tire deflection
! (COEFFICIENT or TABLE). Vertical load from the calculation can be adjusted with
! FZ_TIRE_GAIN and FZ_TIRE_OFFSET. Tire deflection used in the calculation can be
! adjusted with CMP_SCALE_FZ_TIRE and CMP_START_FZ_TIRE. An inverse version of this
! function is used internally. This configurable function supports 4 datasets; if
! indices shown below are not used, e.g., (1,2), the current values of the indices
! IAXLE and ISIDE are used to identify the dataset when reading data.

FZ_TIRE_COEFFICIENT(1,1) 268 ! Coefficient: vertical load per unit tire deflection
                             ! (N/mm), axle 1, left side
FZ_TIRE_GAIN(1,1)   1 ! Gain multiplied with calculated value to get vertical load
FZ_TIRE_OFFSET(1,1) 0 ; N ! Offset added (after gain) to get vertical load
CMP_START_FZ_TIRE(1,1) 0 ; mm ! Offset subtracted from tire deflection
CMP_SCALE_FZ_TIRE(1,1) 1 ! Scale factor divided into (tire deflection -
                         ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(1,2) 268 ! Coefficient: vertical load per unit tire deflection
                             ! (N/mm), axle 1, right side
FZ_TIRE_GAIN(1,2)   1 ! Gain multiplied with calculated value to get vertical load
FZ_TIRE_OFFSET(1,2) 0 ; N ! Offset added (after gain) to get vertical load
CMP_START_FZ_TIRE(1,2) 0 ; mm ! Offset subtracted from tire deflection
CMP_SCALE_FZ_TIRE(1,2) 1 ! Scale factor divided into (tire deflection -
                         ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,1) 268 ! Coefficient: vertical load per unit tire deflection
                             ! (N/mm), axle 2, left side
FZ_TIRE_GAIN(2,1)   1 ! Gain multiplied with calculated value to get vertical load
FZ_TIRE_OFFSET(2,1) 0 ; N ! Offset added (after gain) to get vertical load
CMP_START_FZ_TIRE(2,1) 0 ; mm ! Offset subtracted from tire deflection
CMP_SCALE_FZ_TIRE(2,1) 1 ! Scale factor divided into (tire deflection -
                         ! CMP_START_FZ_TIRE)

FZ_TIRE_COEFFICIENT(2,2) 268 ! Coefficient: vertical load per unit tire deflection
                             ! (N/mm), axle 2, right side
FZ_TIRE_GAIN(2,2)   1 ! Gain multiplied with calculated value to get vertical load
FZ_TIRE_OFFSET(2,2) 0 ; N ! Offset added (after gain) to get vertical load
CMP_START_FZ_TIRE(2,2) 0 ; mm ! Offset subtracted from tire deflection
CMP_SCALE_FZ_TIRE(2,2) 1 ! Scale factor divided into (tire deflection -
                         ! CMP_START_FZ_TIRE)

! F_BOOST_R: Boost force applied to steering rack. Boost force can be a nonlinear
! CARPET function of speed and torsion bar torque or a function of torsion bar torque
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function F_BOOST_R_V of speed
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Boost force from the calculation can be adjusted with F_BOOST_R_GAIN
! and F_BOOST_R_OFFSET. Torsion bar torque used in the calculation can be adjusted
! with M_TB_SCALE_F_BOOST and M_TB_START_F_BOOST. Speed used in the calculation can
! be adjusted with VX_TB_SCALE_F_BOOST and VX_TB_START_F_BOOST. This configurable
! function supports 2 datasets; if indices shown below are not used, e.g., (2), the
! current value of the index IAXLE is used to identify the dataset when reading data.

! 2D table: row 1 has "0" (place holder) followed by 6 values of speed (km/h). Other
! rows have torsion bar torque (N-m) followed by 6 values of boost force (N).
F_BOOST_R_CARPET(1) 2D_LINEAR ! axle 1
 0, 0, 20, 50, 80, 120, 200
 -16, -1250, -1250, -1250, -1250, -1250, -1250
 -15, -1250, -1250, -1250, -1250, -1250, -1250
 -14.5, -1250, -1250, -1250, -1250, -1250, -1250
 -14, -1250, -1250, -1250, -1250, -1250, -1250
 -13.5, -1250, -1250, -1250, -1250, -1250, -1250
 -13, -1250, -1250, -1250, -1250, -1250, -1250
 -12.5, -1250, -1250, -1250, -1250, -1250, -1250
 -12, -1250, -1250, -1250, -1250, -1250, -1250
 -11.5, -1250, -1250, -1250, -1250, -1133.4, -1070.66
 -11, -1250, -1210, -1213.97, -1140.425, -868.065, -750.255
 -10.5, -1250, -1102.5, -1031.56, -907.965, -656.645, -517.11
 -10, -1250, -1000, -869.625, -714.895, -490, -350
 -9.5, -1250, -902.5, -726.715, -556.015, -360.195, -232.195
 -9, -1250, -810, -601.425, -426.61, -260.405, -150.665
 -8.5, -1250, -722.5, -492.38, -322.4, -184.805, -95.37
 -8, -1250, -640, -398.245, -239.545, -128.45, -58.72
 -7.5, -1250, -562.5, -317.72, -174.6, -87.21, -35.04
 -7, -1250, -490, -249.56, -124.515, -57.65, -20.175
 -6.5, -1250, -422.5, -192.545, -86.6, -36.955, -11.155
 -6, -1250, -360, -145.5, -58.505, -22.86, -5.88
 -5.5, -1250, -302.5, -107.3, -38.195, -13.565, -2.93
 -5, -1250, -250, -76.865, -23.945, -7.655, -1.365
 -4.5, -1139.065, -202.5, -53.16, -14.29, -4.07, -0.59
 -4, -800, -160, -35.2, -8.025, -2.005, -0.23
 -3.5, -535.94, -122.5, -22.06, -4.17, -0.9, -0.08
 -3, -337.5, -90, -12.86, -1.96, -0.355, -0.025
 -2.5, -195.315, -62.5, -6.795, -0.8, -0.12, -0.005
 -2, -100, -40, -3.11, -0.27, -0.03, 0
 -1.5, -42.19, -22.5, -1.135, -0.065, -0.005, 0
 -1, -12.5, -10, -0.275, -0.01, 0, 0
 -0.5, -1.565, -2.5, -0.025, 0, 0, 0
 0, 0, 0, 0, 0, 0, 0
 0.5, 1.565, 2.5, 0.025, 0, 0, 0
 1, 12.5, 10, 0.275, 0.01, 0, 0
 1.5, 42.19, 22.5, 1.135, 0.065, 0.005, 0
 2, 100, 40, 3.11, 0.27, 0.03, 0
 2.5, 195.315, 62.5, 6.795, 0.8, 0.12, 0.005
 3, 337.5, 90, 12.86, 1.96, 0.355, 0.025
 3.5, 535.94, 122.5, 22.06, 4.17, 0.9, 0.08
 4, 800, 160, 35.2, 8.025, 2.005, 0.23
 4.5, 1139.065, 202.5, 53.16, 14.29, 4.07, 0.59
 5, 1250, 250, 76.865, 23.945, 7.655, 1.365
 5.5, 1250, 302.5, 107.3, 38.195, 13.565, 2.93
 6, 1250, 360, 145.5, 58.505, 22.86, 5.88
 6.5, 1250, 422.5, 192.545, 86.6, 36.955, 11.155
 7, 1250, 490, 249.56, 124.515, 57.65, 20.175
 7.5, 1250, 562.5, 317.72, 174.6, 87.21, 35.04
 8, 1250, 640, 398.245, 239.545, 128.45, 58.72
 8.5, 1250, 722.5, 492.38, 322.4, 184.805, 95.37
 9, 1250, 810, 601.425, 426.61, 260.405, 150.665
 9.5, 1250, 902.5, 726.715, 556.015, 360.195, 232.195
 10, 1250, 1000, 869.625, 714.895, 490, 350
 10.5, 1250, 1102.5, 1031.56, 907.965, 656.645, 517.11
 11, 1250, 1210, 1213.97, 1140.425, 868.065, 750.255
 11.5, 1250, 1250, 1250, 1250, 1133.4, 1070.66
 12, 1250, 1250, 1250, 1250, 1250, 1250
 12.5, 1250, 1250, 1250, 1250, 1250, 1250
 13, 1250, 1250, 1250, 1250, 1250, 1250
 13.5, 1250, 1250, 1250, 1250, 1250, 1250
 14, 1250, 1250, 1250, 1250, 1250, 1250
 14.5, 1250, 1250, 1250, 1250, 1250, 1250
 15, 1250, 1250, 1250, 1250, 1250, 1250
 16, 1250, 1250, 1250, 1250, 1250, 1250
ENDTABLE
F_BOOST_R_GAIN(1)   1 ! Gain multiplied with calculated value to get boost force
F_BOOST_R_OFFSET(1) 0 ; N ! Offset added (after gain) to get boost force
M_TB_START_F_BOOST(1) 0 ; N-m ! Offset subtracted from torsion bar torque
M_TB_SCALE_F_BOOST(1) 1 ! Scale factor divided into (torsion bar torque -
                        ! M_TB_START_F_BOOST)
VX_TB_START_F_BOOST(1) 0 ; km/h ! Offset subtracted from speed
VX_TB_SCALE_F_BOOST(1) 1 ! Scale factor divided into (speed - VX_TB_START_F_BOOST)

F_BOOST_R_CONSTANT(2) 0 ; N ! [D] Constant boost force component due to torsion bar
                        ! torque, axle 2
F_BOOST_R_GAIN(2)   1 ! Gain multiplied with calculated value to get boost force
F_BOOST_R_OFFSET(2) 0 ; N ! Offset added (after gain) to get boost force
F_BOOST_R_COMBINE(2) MULTIPLY ! How to combine the two components
F_BOOST_R_V_CONSTANT(2) 1 ; - ! [D] Constant boost force component due to speed,
                          ! axle 2

! F_JNC_STOP: Jounce stop force. Force is a function of suspension travel at jounce
! stop (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Force from the calculation can be adjusted with F_JNC_STOP_GAIN
! and F_JNC_STOP_OFFSET. Suspension travel at jounce stop used in the calculation can
! be adjusted with CMP_SCALE_F_JNC_STOP and CMP_START_F_JNC_STOP. This configurable
! function supports 4 datasets; if indices shown below are not used, e.g., (1,2), the
! current values of the indices IAXLE and ISIDE are used to identify the dataset when
! reading data.

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,1) LINEAR ! axle 1, left side
 58, 0
 59, 0
 60, 10000
ENDTABLE
F_JNC_STOP_GAIN(1,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,1) 0 ; mm ! Offset subtracted from suspension travel at
                            ! jounce stop
CMP_SCALE_F_JNC_STOP(1,1) 1 ! Scale factor divided into (suspension travel at jounce
                            ! stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(1,2) LINEAR ! axle 1, right side
 58, 0
 59, 0
 60, 10000
ENDTABLE
F_JNC_STOP_GAIN(1,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(1,2) 0 ; mm ! Offset subtracted from suspension travel at
                            ! jounce stop
CMP_SCALE_F_JNC_STOP(1,2) 1 ! Scale factor divided into (suspension travel at jounce
                            ! stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(2,1) LINEAR ! axle 2, left side
 58, 0
 59, 0
 60, 10000
ENDTABLE
F_JNC_STOP_GAIN(2,1) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(2,1) 0 ; mm ! Offset subtracted from suspension travel at
                            ! jounce stop
CMP_SCALE_F_JNC_STOP(2,1) 1 ! Scale factor divided into (suspension travel at jounce
                            ! stop - CMP_START_F_JNC_STOP)

! 1D table: col 1 = suspension travel at jounce stop (mm), col 2 = force (N)
F_JNC_STOP_TABLE(2,2) LINEAR ! axle 2, right side
 58, 0
 59, 0
 60, 10000
ENDTABLE
F_JNC_STOP_GAIN(2,2) 1 ! Gain multiplied with calculated value to get force
F_JNC_STOP_OFFSET(2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_JNC_STOP(2,2) 0 ; mm ! Offset subtracted from suspension travel at
                            ! jounce stop
CMP_SCALE_F_JNC_STOP(2,2) 1 ! Scale factor divided into (suspension travel at jounce
                            ! stop - CMP_START_F_JNC_STOP)

! F_REB_STOP: Rebound stop force. Force is a function of suspension travel at
! rebound stop (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation
! can be defined at runtime. Force from the calculation can be adjusted with
! F_REB_STOP_GAIN and F_REB_STOP_OFFSET. Suspension travel at rebound stop used in
! the calculation can be adjusted with CMP_SCALE_F_REB_STOP and CMP_START_F_REB_STOP.
! This configurable function supports 4 datasets; if indices shown below are not
! used, e.g., (1,2), the current values of the indices IAXLE and ISIDE are used to
! identify the dataset when reading data.

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,1) LINEAR ! axle 1, left side
 -40, -10000
 -39, 0
 -38, 0
ENDTABLE
F_REB_STOP_GAIN(1,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,1) 0 ; mm ! Offset subtracted from suspension travel at
                            ! rebound stop
CMP_SCALE_F_REB_STOP(1,1) 1 ! Scale factor divided into (suspension travel at
                            ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(1,2) LINEAR ! axle 1, right side
 -40, -10000
 -39, 0
 -38, 0
ENDTABLE
F_REB_STOP_GAIN(1,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(1,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(1,2) 0 ; mm ! Offset subtracted from suspension travel at
                            ! rebound stop
CMP_SCALE_F_REB_STOP(1,2) 1 ! Scale factor divided into (suspension travel at
                            ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(2,1) LINEAR ! axle 2, left side
 -40, -10000
 -39, 0
 -38, 0
ENDTABLE
F_REB_STOP_GAIN(2,1) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(2,1) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(2,1) 0 ; mm ! Offset subtracted from suspension travel at
                            ! rebound stop
CMP_SCALE_F_REB_STOP(2,1) 1 ! Scale factor divided into (suspension travel at
                            ! rebound stop - CMP_START_F_REB_STOP)

! 1D table: col 1 = suspension travel at rebound stop (mm), col 2 = force (N)
F_REB_STOP_TABLE(2,2) LINEAR ! axle 2, right side
 -40, -10000
 -39, 0
 -38, 0
ENDTABLE
F_REB_STOP_GAIN(2,2) 1 ! Gain multiplied with calculated value to get force
F_REB_STOP_OFFSET(2,2) 0 ; N ! Offset added (after gain) to get force
CMP_START_F_REB_STOP(2,2) 0 ; mm ! Offset subtracted from suspension travel at
                            ! rebound stop
CMP_SCALE_F_REB_STOP(2,2) 1 ! Scale factor divided into (suspension travel at
                            ! rebound stop - CMP_START_F_REB_STOP)

! GEAR_TRANS: Transmission gear in open-loop control (when MODE_TRANS = 1). 1
! through 18 are choices for forward gears, -1 -> reverse, 0 -> neutral. Gear is a
! function of time (CONSTANT or TABLE). Alternatively, a custom equation can be
! defined at runtime. Gear from the calculation can be adjusted with GEAR_TRANS_GAIN
! and GEAR_TRANS_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_GEAR and TSTART_GEAR.

GEAR_TRANS_CONSTANT 1 ; - ! [D] Constant gear
GEAR_TRANS_GAIN     1 ! Gain multiplied with calculated value to get gear
GEAR_TRANS_OFFSET   0 ; - ! Offset added (after gain) to get gear

! INV_CAP_TC: Inverse of torque converter capacity vs. speed ratio of torque
! converter output shaft to engine. 1/K (K = torque converter capacity) is a function
! of speed ratio (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation
! can be defined at runtime. 1/K (K = torque converter capacity) from the calculation
! can be adjusted with INV_CAP_TC_GAIN and INV_CAP_TC_OFFSET. Speed ratio used in the
! calculation can be adjusted with RSPIN_SCALE_INV_CAP_TC and RSPIN_START_INV_CAP_TC.

! 1D table: col 1 = speed ratio (-), col 2 = 1/K (K = torque converter capacity) (Kinv)
INV_CAP_TC_TABLE SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 0, 0.00995992
 0.1, 0.00995992
 0.2, 0.00995992
 0.3, 0.00995986
 0.4, 0.00995888
 0.5, 0.00995019
 0.6, 0.0098997
 0.7, 0.00967858
 0.8, 0.00889048
 0.9, 0.00648711
 0.95, 0.00399655
 0.99, 0.000952347
 1.01, -0.000952347
 1.05, -0.00399655
 1.1, -0.00648711
 1.2, -0.00889048
 1.3, -0.00967858
 1.4, -0.0098997
 1.5, -0.00995019
 1.6, -0.00995888
 1.7, -0.00995986
 1.8, -0.00995992
 1.9, -0.00995992
 2, -0.00995992
ENDTABLE
INV_CAP_TC_GAIN     1 ! Gain multiplied with calculated value to get 1/K (K = torque
                      ! converter capacity)
INV_CAP_TC_OFFSET   0 ; Kinv ! Offset added (after gain) to get 1/K (K = torque
                      ! converter capacity)
RSPIN_START_INV_CAP_TC 0 ; - ! Offset subtracted from speed ratio
RSPIN_SCALE_INV_CAP_TC 1 ! Scale factor divided into (speed ratio -
                         ! RSPIN_START_INV_CAP_TC)

! KGAMMA: Tire inclination stiffness. DFy/dGamma is a function of dynamic tire load
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. DFy/dGamma from the calculation can be adjusted with KGAMMA_GAIN and
! KGAMMA_OFFSET. Dynamic tire load used in the calculation can be adjusted with
! FZ_SCALE_KGAMMA. This configurable function supports 4 datasets; if indices shown
! below are not used, e.g., (1,2), the current values of the indices IAXLE and ISIDE
! are used to identify the dataset when reading data.

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(1,1) SPLINE ! axle 1, left side
 0, 0
 637.43225, -6.0332
 1274.8645, -12.0864
 1912.29675, -18.1682
 2549.729, -24.2854
 3187.16125, -30.4433
 3824.5935, -36.6469
 4462.02575, -42.9005
 5099.458, -49.2081
 5736.89025, -55.5734
 6374.3225, -62
 7011.75475, -68.4912
 7649.187, -75.05
 8286.61925, -81.6797
 8924.0515, -88.3829
 9561.48375, -95.1626
 10198.916, -102.0213
 10836.34825, -108.9617
 11473.7805, -115.9864
 12111.21275, -123.0976
 12748.645, -130.2979
ENDTABLE
KGAMMA_GAIN(1,1)    1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,1)  0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,1) 1 ! Scale factor divided into dynamic tire load

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(1,2) SPLINE ! axle 1, right side
 0, 0
 637.43225, -6.0332
 1274.8645, -12.0864
 1912.29675, -18.1682
 2549.729, -24.2854
 3187.16125, -30.4433
 3824.5935, -36.6469
 4462.02575, -42.9005
 5099.458, -49.2081
 5736.89025, -55.5734
 6374.3225, -62
 7011.75475, -68.4912
 7649.187, -75.05
 8286.61925, -81.6797
 8924.0515, -88.3829
 9561.48375, -95.1626
 10198.916, -102.0213
 10836.34825, -108.9617
 11473.7805, -115.9864
 12111.21275, -123.0976
 12748.645, -130.2979
ENDTABLE
KGAMMA_GAIN(1,2)    1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(1,2)  0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(1,2) 1 ! Scale factor divided into dynamic tire load

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(2,1) SPLINE ! axle 2, left side
 0, 0
 637.43225, -6.0332
 1274.8645, -12.0864
 1912.29675, -18.1682
 2549.729, -24.2854
 3187.16125, -30.4433
 3824.5935, -36.6469
 4462.02575, -42.9005
 5099.458, -49.2081
 5736.89025, -55.5734
 6374.3225, -62
 7011.75475, -68.4912
 7649.187, -75.05
 8286.61925, -81.6797
 8924.0515, -88.3829
 9561.48375, -95.1626
 10198.916, -102.0213
 10836.34825, -108.9617
 11473.7805, -115.9864
 12111.21275, -123.0976
 12748.645, -130.2979
ENDTABLE
KGAMMA_GAIN(2,1)    1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,1)  0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,1) 1 ! Scale factor divided into dynamic tire load

! 1D table: col 1 = dynamic tire load (N), col 2 = dFy/dGamma (N/deg)
KGAMMA_TABLE(2,2) SPLINE ! axle 2, right side
 0, 0
 637.43225, -6.0332
 1274.8645, -12.0864
 1912.29675, -18.1682
 2549.729, -24.2854
 3187.16125, -30.4433
 3824.5935, -36.6469
 4462.02575, -42.9005
 5099.458, -49.2081
 5736.89025, -55.5734
 6374.3225, -62
 7011.75475, -68.4912
 7649.187, -75.05
 8286.61925, -81.6797
 8924.0515, -88.3829
 9561.48375, -95.1626
 10198.916, -102.0213
 10836.34825, -108.9617
 11473.7805, -115.9864
 12111.21275, -123.0976
 12748.645, -130.2979
ENDTABLE
KGAMMA_GAIN(2,2)    1 ! Gain multiplied with calculated value to get dFy/dGamma
KGAMMA_OFFSET(2,2)  0 ; N/deg ! Offset added (after gain) to get dFy/dGamma
FZ_SCALE_KGAMMA(2,2) 1 ! Scale factor divided into dynamic tire load

! LTARG: Target lateral offset (+ -> left, - -> right). This offset is combined with
! a reference path to produce a modified path for steering control, moving objects,
! lane definition, etc.. Lateral offset is a function of station (CONSTANT,
! COEFFICIENT, or TABLE). Lateral offset from the calculation can be adjusted with
! LTARG_GAIN and LTARG_OFFSET. Station used in the calculation can be adjusted with
! SSCALE_LTARG and SSTART_LTARG. The derivative of this function is used internally.
! This configurable function supports 100 datasets; if indices shown below are not
! used, e.g., (2), the current value of the index ILTARG is used to identify the
! dataset when reading data.

LTARG_CONSTANT(1)   0 ; m ! [D] Constant lateral offset
LTARG_OFFSET(1)     0 ; m ! Offset added (after gain) to get lateral offset

! L_CONTACT_X: Tire/ground contact length. Tire contact length is a function of tire
! compression (CONSTANT or TABLE). Alternatively, a custom equation can be defined at
! runtime. Tire contact length from the calculation can be adjusted with
! L_CONTACT_X_GAIN and L_CONTACT_X_OFFSET. Tire compression used in the calculation
! can be adjusted with CMP_SCALE_L_CONTACT_X. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

L_CONTACT_X_CONSTANT(1,1) 90 ; mm ! Constant tire contact length, axle 1, left side
L_CONTACT_X_GAIN(1,1) 1 ! Gain multiplied with calculated value to get tire contact
                        ! length
L_CONTACT_X_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get tire contact
                          ! length

L_CONTACT_X_CONSTANT(1,2) 90 ; mm ! Constant tire contact length, axle 1, right side
L_CONTACT_X_GAIN(1,2) 1 ! Gain multiplied with calculated value to get tire contact
                        ! length
L_CONTACT_X_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get tire contact
                          ! length

L_CONTACT_X_CONSTANT(2,1) 90 ; mm ! Constant tire contact length, axle 2, left side
L_CONTACT_X_GAIN(2,1) 1 ! Gain multiplied with calculated value to get tire contact
                        ! length
L_CONTACT_X_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get tire contact
                          ! length

L_CONTACT_X_CONSTANT(2,2) 90 ; mm ! Constant tire contact length, axle 2, right side
L_CONTACT_X_GAIN(2,2) 1 ! Gain multiplied with calculated value to get tire contact
                        ! length
L_CONTACT_X_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get tire contact
                          ! length

! L_CONTACT_Y: Tire/ground contact width. Tire contact width is a function of tire
! compression (CONSTANT or TABLE). Alternatively, a custom equation can be defined at
! runtime. Tire contact width from the calculation can be adjusted with
! L_CONTACT_Y_GAIN and L_CONTACT_Y_OFFSET. Tire compression used in the calculation
! can be adjusted with CMP_SCALE_L_CONTACT_Y. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

L_CONTACT_Y_CONSTANT(1,1) 215 ; mm ! Constant tire contact width, axle 1, left side
L_CONTACT_Y_GAIN(1,1) 1 ! Gain multiplied with calculated value to get tire contact
                        ! width
L_CONTACT_Y_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get tire contact width

L_CONTACT_Y_CONSTANT(1,2) 215 ; mm ! Constant tire contact width, axle 1, right side
L_CONTACT_Y_GAIN(1,2) 1 ! Gain multiplied with calculated value to get tire contact
                        ! width
L_CONTACT_Y_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get tire contact width

L_CONTACT_Y_CONSTANT(2,1) 215 ; mm ! Constant tire contact width, axle 2, left side
L_CONTACT_Y_GAIN(2,1) 1 ! Gain multiplied with calculated value to get tire contact
                        ! width
L_CONTACT_Y_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get tire contact width

L_CONTACT_Y_CONSTANT(2,2) 215 ; mm ! Constant tire contact width, axle 2, right side
L_CONTACT_Y_GAIN(2,2) 1 ! Gain multiplied with calculated value to get tire contact
                        ! width
L_CONTACT_Y_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get tire contact width

! L_RELAX_X: Tire longitudinal relaxation length as a function of vertical load (Fz)
! and lagged slip ratio (Kappa). L_Relax_X can be a nonlinear CARPET function of Fz
! and Lagged Kappa or a function of Lagged Kappa (CONSTANT or TABLE) combined with a
! function L_RELAX_X_FZ of Fz (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a
! custom equation can be defined at runtime. L_Relax_X from the calculation can be
! adjusted with L_RELAX_X_GAIN and L_RELAX_X_OFFSET. Lagged Kappa used in the
! calculation can be adjusted with LAGGED_KAPPA_SCALE_L_RELAX_X. Fz used in the
! calculation can be adjusted with FZ_SCALE_L_RELAX_X. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.
SET_UNITS L_RELAX_X_CARPET(1,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,1) SPLINE_FLAT ! axle 1, left side
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,1) 0.065 ! Gain multiplied with calculated value to get L_Relax_X
L_RELAX_X_OFFSET(1,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,1) LINEAR ! axle 1, left side
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,1) 6500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(1,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(1,2) SPLINE_FLAT ! axle 1, right side
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(1,2) 0.065 ! Gain multiplied with calculated value to get L_Relax_X
L_RELAX_X_OFFSET(1,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(1,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(1,2) LINEAR ! axle 1, right side
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(1,2) 6500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,1) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,1) SPLINE_FLAT ! axle 2, left side
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,1) 0.065 ! Gain multiplied with calculated value to get L_Relax_X
L_RELAX_X_OFFSET(2,1) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,1) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,1) LINEAR ! axle 2, left side
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,1) 6500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_X_CARPET(2,2) m ;

! 1D table: col 1 = Lagged Kappa (-), col 2 = L_Relax_X (m)
L_RELAX_X_TABLE(2,2) SPLINE_FLAT ! axle 2, right side
 -0.1, 0.13526
 -0.095, 0.13793
 -0.09, 0.1431
 -0.085, 0.14862
 -0.08, 0.1552
 -0.075, 0.16251
 -0.07, 0.17087
 -0.065, 0.18085
 -0.06, 0.1926
 -0.055, 0.20631
 -0.05, 0.22324
 -0.045, 0.24389
 -0.04, 0.26989
 -0.035, 0.30301
 -0.03, 0.34575
 -0.025, 0.40397
 -0.02, 0.48251
 -0.015, 0.59275
 -0.01, 0.7393
 -0.005, 0.90707
 0, 1
 0.005, 0.90707
 0.01, 0.7393
 0.015, 0.59275
 0.02, 0.48251
 0.025, 0.40397
 0.03, 0.34575
 0.035, 0.30301
 0.04, 0.26989
 0.045, 0.24389
 0.05, 0.22324
 0.055, 0.20631
 0.06, 0.1926
 0.065, 0.18085
 0.07, 0.17087
 0.075, 0.16251
 0.08, 0.1552
 0.085, 0.14862
 0.09, 0.1431
 0.095, 0.13793
 0.1, 0.13526
ENDTABLE
L_RELAX_X_GAIN(2,2) 0.065 ! Gain multiplied with calculated value to get L_Relax_X
L_RELAX_X_OFFSET(2,2) 0 ; m ! Offset added (after gain) to get L_Relax_X
LAGGED_KAPPA_SCALE_L_RELAX_X(2,2) 1 ! Scale factor divided into Lagged Kappa
L_RELAX_X_COMBINE(2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_X component due to Fz (-)
L_RELAX_X_FZ_TABLE(2,2) LINEAR ! axle 2, right side
 0, 0.2
 1, 1
ENDTABLE
FZ_SCALE_L_RELAX_X(2,2) 6500 ! Scale factor divided into Fz

! L_RELAX_Y: Tire lateral relaxation length as a function of vertical load (Fz) and
! lagged slip angle (Alpha). L_Relax_Y can be a nonlinear CARPET function of Fz and
! Lagged Alpha or a function of Lagged Alpha (CONSTANT or TABLE) combined with a
! function L_RELAX_Y_FZ of Fz (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a
! custom equation can be defined at runtime. L_Relax_Y from the calculation can be
! adjusted with L_RELAX_Y_GAIN and L_RELAX_Y_OFFSET. Lagged Alpha used in the
! calculation can be adjusted with LAGGED_ALPHA_SCALE_L_RELAX_Y. Fz used in the
! calculation can be adjusted with FZ_SCALE_L_RELAX_Y. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.
SET_UNITS L_RELAX_Y_CARPET(1,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,1) SPLINE_FLAT ! axle 1, left side
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,1) 0.65 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(1,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,1) SPLINE ! axle 1, left side
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,1) 6500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(1,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(1,2) SPLINE_FLAT ! axle 1, right side
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(1,2) 0.65 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(1,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(1,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(1,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(1,2) SPLINE ! axle 1, right side
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(1,2) 6500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,1) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,1) SPLINE_FLAT ! axle 2, left side
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,1) 0.65 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(2,1) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,1) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,1) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,1) SPLINE ! axle 2, left side
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,1) 6500 ! Scale factor divided into Fz
SET_UNITS L_RELAX_Y_CARPET(2,2) m ;

! 1D table: col 1 = Lagged Alpha (deg), col 2 = L_Relax_Y (m)
L_RELAX_Y_TABLE(2,2) SPLINE_FLAT ! axle 2, right side
 -10, 0.039175
 -9.5, 0.042142
 -9, 0.047886
 -8.5, 0.054018
 -8, 0.061335
 -7.5, 0.069451
 -7, 0.078749
 -6.5, 0.089829
 -6, 0.10289
 -5.5, 0.11812
 -5, 0.13693
 -4.5, 0.15988
 -4, 0.18877
 -3.5, 0.22557
 -3, 0.27305
 -2.5, 0.33775
 -2, 0.42501
 -1.5, 0.5475
 -1, 0.71033
 -0.5, 0.89674
 0, 1
 0.5, 0.89674
 1, 0.71033
 1.5, 0.5475
 2, 0.42501
 2.5, 0.33775
 3, 0.27305
 3.5, 0.22557
 4, 0.18877
 4.5, 0.15988
 5, 0.13693
 5.5, 0.11812
 6, 0.10289
 6.5, 0.089829
 7, 0.078749
 7.5, 0.069451
 8, 0.061335
 8.5, 0.054018
 9, 0.047886
 9.5, 0.042142
 10, 0.039175
ENDTABLE
L_RELAX_Y_GAIN(2,2) 0.65 ! Gain multiplied with calculated value to get L_Relax_Y
L_RELAX_Y_OFFSET(2,2) 0 ; m ! Offset added (after gain) to get L_Relax_Y
LAGGED_ALPHA_SCALE_L_RELAX_Y(2,2) 1 ! Scale factor divided into Lagged Alpha
L_RELAX_Y_COMBINE(2,2) MULTIPLY ! How to combine the two components

! 1D table: col 1 = Fz (N), col 2 = L_Relax_Y component due to Fz (-)
L_RELAX_Y_FZ_TABLE(2,2) SPLINE ! axle 2, right side
 0, 0.1
 1, 1
 2, 1.5805
ENDTABLE
FZ_SCALE_L_RELAX_Y(2,2) 6500 ! Scale factor divided into Fz

! MENGINE: Engine torque applied to crankshaft. Engine torque can be a nonlinear
! CARPET function of normalized throttle and engine speed or a function of engine
! speed multiplied by a function MENGINE_THROTTLE of normalized throttle (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Engine torque from the calculation can be adjusted with MENGINE_GAIN and
! MENGINE_OFFSET. Engine speed used in the calculation can be adjusted with
! SPIN_SCALE_MENGINE and SPIN_START_MENGINE. Normalized throttle used in the
! calculation can be adjusted with THROTTLE_SCALE_MENGINE and THROTTLE_START_MENGINE.

! 2D table: row 1 has "0" (place holder) followed by 10 values of normalized
! throttle (-). Other rows have engine speed (rpm) followed by 10 values of engine
! torque (N-m).
MENGINE_CARPET 2D_LINEAR
 0, 0, 0.1, 0.15, 0.2, 0.35, 0.5, 0.7, 0.85, 0.95, 1
 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 500, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 646.25, 49.5, 152.22, 202.74, 206.86, 209.2, 210.36, 210.76, 210.86, 210.91, 210.86
 791.25, 59.4, 185.75, 279.32, 298.29, 301.33, 302.57, 303.01, 303.04, 303.04, 303.04
 937.5, 0, 174.78, 296.05, 322.7, 329.9, 332.51, 333.46, 333.55, 333.54, 333.49
 1383.8, -19.8, 141.25, 347.18, 397.32, 417.23, 424.03, 426.58, 426.8, 426.75, 426.58
 1828.8, -29.7, 94.23, 334.62, 415.8, 442.3, 454.3, 460.17, 461.54, 462.44, 471.24
 2275, -33.66, 51.48, 297, 423.19, 467.37, 484.57, 493.77, 496.28, 498.12, 510.84
 2721.2, -40.33, 19.8, 235.3, 407.34, 475.2, 514.8, 520.74, 526.68, 532.62, 545.76
 3166.2, -50.64, -12.81, 162.59, 364.16, 479.16, 533.99, 548.46, 558.47, 564.3, 574.2
 3612.5, -60.27, -30.32, 112.81, 307, 466.25, 539.81, 570.45, 578.16, 590.04, 599.94
 4058.8, -68.77, -44.12, 75.33, 244.98, 446.9, 534.6, 574.2, 590.04, 601.92, 613.8
 4503.8, -77.13, -56.21, 46.97, 193.06, 402.08, 518.76, 576.18, 594, 607.86, 619.74
 4950, -85.54, -67.42, 23.61, 152.84, 348.7, 497.25, 570.24, 592.02, 605.88, 613.8
 5396.2, -94.41, -78.75, 0.55, 114.9, 300.48, 474.59, 560.34, 580.14, 594, 605.77
 5841.2, -103.65, -90.02, -19.94, 82.38, 250.13, 440.63, 544.5, 564.3, 584.1, 594
 6287.5, -113.48, -101.14, -38.17, 53.98, 205.31, 397.91, 524.7, 544.5, 564.3, 574.2
 6733.8, -123.34, -112.49, -55.07, 28.89, 167.04, 353.17, 493.68, 512.82, 539.28, 544.98
 7178.8, -134.39, -124.33, -71.43, 5.65, 132.39, 306.56, 442.83, 473.03, 487.21, 492.82
 7625, -146.42, -136.82, -87.76, -16.33, 100.76, 261.32, 387.73, 415.84, 429.05, 434.11
 8125, -160.38, -160.38, -160.38, -160.38, -160.38, -160.38, -160.38, -160.38, -160.38, -160.38
 8375, -162.36, -162.36, -162.36, -162.36, -162.36, -162.36, -162.36, -162.36, -162.36, -162.36
ENDTABLE
MENGINE_GAIN        1 ! Gain multiplied with calculated value to get engine torque
MENGINE_OFFSET      0 ; N-m ! Offset added (after gain) to get engine torque
SPIN_START_MENGINE  0 ; rpm ! Offset subtracted from engine speed
SPIN_SCALE_MENGINE  1 ! Scale factor divided into (engine speed -
                      ! SPIN_START_MENGINE)
THROTTLE_START_MENGINE 0 ; - ! Offset subtracted from normalized throttle
THROTTLE_SCALE_MENGINE 1 ! Scale factor divided into (normalized throttle -
                         ! THROTTLE_START_MENGINE)

! MODE_TRANS: Transmission controller mode.  -1 -> reverse, 0 -> neutral, 1 ->
! open-loop (using the function GEAR_TRANS), 2 through 18 -> closed-loop limit
! (maximum gear available). Transmission mode is a function of time (CONSTANT or
! TABLE). Alternatively, a custom equation can be defined at runtime. Transmission
! mode from the calculation can be adjusted with MODE_TRANS_GAIN and
! MODE_TRANS_OFFSET. Time used in the calculation can be adjusted with TSCALE_TRANS
! and TSTART_TRANS.

MODE_TRANS_CONSTANT 0 ; - ! Constant transmission mode
MODE_TRANS_OFFSET   0 ; - ! Offset added (after gain) to get transmission mode

! MU_ROAD: Tire/road friction coefficient (MU) as a function of road station S and
! lateral position L. Use MU = -1 for original tire data (no scaling). MU can be a
! nonlinear CARPET function of lateral position and station or a function of station
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function MU_ROAD_L of lateral
! position (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. MU from the calculation can be adjusted with MU_ROAD_GAIN and
! MU_ROAD_OFFSET. Station used in the calculation can be adjusted with SSCALE_MU_ROAD
! and SSTART_MU_ROAD. Lateral position used in the calculation can be adjusted with
! L_SCALE_MU_ROAD and L_START_MU_ROAD. This configurable function supports 50
! datasets; if indices shown below are not used, e.g., (2), the current value of the
! index IROAD is used to identify the dataset when reading data.

MU_ROAD_CONSTANT(1) 0.85 ; - ! Constant MU component due to station
MU_ROAD_GAIN(1)     1 ! Gain multiplied with calculated value to get MU
MU_ROAD_OFFSET(1)   0 ; - ! Offset added (after gain) to get MU
MU_ROAD_COMBINE(1) MULTIPLY ! How to combine the two components
MU_ROAD_L_CONSTANT(1) 1 ; - ! Constant MU component due to lateral position

! MX_AERO_SHAPING: Coefficient CMX for for X component of aerodynamic moment. CMX is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMX from the
! calculation can be adjusted with MX_AERO_SHAPING_GAIN and MX_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MX_AERO and SLIP_START_MX_AERO.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMX (-)
MX_AERO_SHAPING_TABLE SPLINE ! spline interpolation and extrapolation
 -180, 0
 -90, -0.3
 0, 0
 90, 0.3
 180, 0
ENDTABLE
MX_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CMX
MX_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CMX
SLIP_START_MX_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MX_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      ! SLIP_START_MX_AERO)

! MX_AERO_SHAPING_2: Coefficient CMX2 for X component of aerodynamic moment. CMX2
! can be a nonlinear CARPET function of ride height and pitch or a function of pitch
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function MX_AERO_SHAPING_Z of
! ride height (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. CMX2 from the calculation can be adjusted with
! MX_AERO_SHAPING_2_GAIN and MX_AERO_SHAPING_2_OFFSET. Pitch used in the calculation
! can be adjusted with PITCH_SCALE_MX_AERO and PITCH_START_MX_AERO. Ride height used
! in the calculation can be adjusted with Z_SCALE_MX_AERO and Z_START_MX_AERO.

MX_AERO_SHAPING_2_CONSTANT 1 ; - ! [D] Constant CMX2 component due to pitch
MX_AERO_SHAPING_2_GAIN 1 ! Gain multiplied with calculated value to get CMX2
MX_AERO_SHAPING_2_OFFSET 0 ; - ! Offset added (after gain) to get CMX2
MX_AERO_SHAPING_2_COMBINE MULTIPLY ! How to combine the two components
MX_AERO_SHAPING_Z_CONSTANT 1 ; - ! [D] Constant CMX2 component due to ride height

! MX_AUX: Auxiliary roll moment (exerted on axle). Auxiliary roll moment can be a
! nonlinear CARPET function of static axle load and relative axle roll or a function
! of relative axle roll (CONSTANT, COEFFICIENT, or TABLE) combined with a function
! MX_AUX_FSTATIC of static axle load (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Auxiliary roll moment
! from the calculation can be adjusted with MX_AUX_GAIN and MX_AUX_OFFSET. Relative
! axle roll used in the calculation can be adjusted with ROLL_SCALE_MX_AUX and
! ROLL_START_MX_AUX. Static axle load used in the calculation can be adjusted with
! FSTATIC_SCALE_MX_AUX and FSTATIC_START_MX_AUX. This configurable function supports
! 2 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index IAXLE is used to identify the dataset when reading data.

MX_AUX_COEFFICIENT(1) 384 ! Coefficient: auxiliary roll moment per unit relative
                          ! axle roll (N-m/deg)
MX_AUX_GAIN(1)      1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(1)    0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(1) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(1) 1 ! Scale factor divided into (relative axle roll -
                       ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(1) MULTIPLY ! How to combine the two components
MX_AUX_FSTATIC_CONSTANT(1) 1 ; - ! Constant auxiliary roll moment component due to
                             ! static axle load

! 1D table: col 1 = relative axle roll (deg), col 2 = auxiliary roll moment (N-m)
MX_AUX_TABLE(2) SPLINE ! spline interpolation and extrapolation
 -10, -4490.6
 -9, -3826.9
 -8, -3245.1
 -7, -2727.2
 -6, -2259.3
 -5, -1830.4
 -4, -1431.5
 -3, -1055.1
 -2, -694.76
 -1, -344.84
 0, 0
 1, 344.84
 2, 694.76
 3, 1055.1
 4, 1431.5
 5, 1830.4
 6, 2259.3
 7, 2727.2
 8, 3245.1
 9, 3826.9
 10, 4490.6
ENDTABLE
MX_AUX_GAIN(2)      1 ! Gain multiplied with calculated value to get auxiliary roll
                      ! moment
MX_AUX_OFFSET(2)    0 ; N-m ! Offset added (after gain) to get auxiliary roll moment
ROLL_START_MX_AUX(2) 0 ; deg ! Offset subtracted from relative axle roll
ROLL_SCALE_MX_AUX(2) 1 ! Scale factor divided into (relative axle roll -
                       ! ROLL_START_MX_AUX)
MX_AUX_COMBINE(2) MULTIPLY ! How to combine the two components
MX_AUX_FSTATIC_CONSTANT(2) 1 ; - ! Constant auxiliary roll moment component due to
                             ! static axle load

! MY_AERO_SHAPING: Coefficient CMY for for Y component of aerodynamic moment. CMY is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMY from the
! calculation can be adjusted with MY_AERO_SHAPING_GAIN and MY_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MY_AERO and SLIP_START_MY_AERO.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMY (-)
MY_AERO_SHAPING_TABLE SPLINE ! spline interpolation and extrapolation
 -180, -0.25
 -160, -0.25
 -90, 0
 -20, 0.17
 0, 0.15
 20, 0.17
 90, 0
 160, -0.25
 180, -0.25
ENDTABLE
MY_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CMY
MY_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CMY
SLIP_START_MY_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MY_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      ! SLIP_START_MY_AERO)

! MY_AERO_SHAPING_2: Coefficient CMY2 for Y component of aerodynamic moment. CMY2
! can be a nonlinear CARPET function of ride height and pitch or a function of pitch
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function MY_AERO_SHAPING_Z of
! ride height (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. CMY2 from the calculation can be adjusted with
! MY_AERO_SHAPING_2_GAIN and MY_AERO_SHAPING_2_OFFSET. Pitch used in the calculation
! can be adjusted with PITCH_SCALE_MY_AERO and PITCH_START_MY_AERO. Ride height used
! in the calculation can be adjusted with Z_SCALE_MY_AERO and Z_START_MY_AERO.

MY_AERO_SHAPING_2_CONSTANT 1 ; - ! [D] Constant CMY2 component due to pitch
MY_AERO_SHAPING_2_GAIN 1 ! Gain multiplied with calculated value to get CMY2
MY_AERO_SHAPING_2_OFFSET 0 ; - ! Offset added (after gain) to get CMY2
MY_AERO_SHAPING_2_COMBINE MULTIPLY ! How to combine the two components
MY_AERO_SHAPING_Z_CONSTANT 1 ; - ! [D] Constant CMY2 component due to ride height

! MY_BRAKE: Brake torque at wheel. Brake torque is a function of wheel cylinder
! pressure (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Brake torque from the calculation can be adjusted with
! MY_BRAKE_GAIN and MY_BRAKE_OFFSET. Wheel cylinder pressure used in the calculation
! can be adjusted with PBK_SCALE_MY_BRAKE and PBK_START_MY_BRAKE. This configurable
! function supports 4 datasets; if indices shown below are not used, e.g., (1,2), the
! current values of the indices IAXLE and ISIDE are used to identify the dataset when
! reading data.

MY_BRAKE_COEFFICIENT(1,1) 250 ! Coefficient: brake torque per unit wheel cylinder
                              ! pressure (N-m/MPa), axle 1, left side
MY_BRAKE_GAIN(1,1)  1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                          ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(1,2) 250 ! Coefficient: brake torque per unit wheel cylinder
                              ! pressure (N-m/MPa), axle 1, right side
MY_BRAKE_GAIN(1,2)  1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(1,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(1,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(1,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                          ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(2,1) 150 ! Coefficient: brake torque per unit wheel cylinder
                              ! pressure (N-m/MPa), axle 2, left side
MY_BRAKE_GAIN(2,1)  1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,1) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,1) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,1) 1 ! Scale factor divided into (wheel cylinder pressure -
                          ! PBK_START_MY_BRAKE)

MY_BRAKE_COEFFICIENT(2,2) 150 ! Coefficient: brake torque per unit wheel cylinder
                              ! pressure (N-m/MPa), axle 2, right side
MY_BRAKE_GAIN(2,2)  1 ! Gain multiplied with calculated value to get brake torque
MY_BRAKE_OFFSET(2,2) 0 ; N-m ! Offset added (after gain) to get brake torque
PBK_START_MY_BRAKE(2,2) 0 ; MPa ! Offset subtracted from wheel cylinder pressure
PBK_SCALE_MY_BRAKE(2,2) 1 ! Scale factor divided into (wheel cylinder pressure -
                          ! PBK_START_MY_BRAKE)

! MZ_AERO_SHAPING: Coefficient CMZ for for Z component of aerodynamic moment. CMZ is
! a function of aerodynamic slip angle (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. CMZ from the
! calculation can be adjusted with MZ_AERO_SHAPING_GAIN and MZ_AERO_SHAPING_OFFSET.
! Aerodynamic slip angle used in the calculation can be adjusted with
! SLIP_SCALE_MZ_AERO and SLIP_START_MZ_AERO.

! 1D table: col 1 = aerodynamic slip angle (deg), col 2 = CMZ (-)
MZ_AERO_SHAPING_TABLE SPLINE ! spline interpolation and extrapolation
 -180, 0
 -90, 0.05
 0, 0
 90, -0.05
 180, 0
ENDTABLE
MZ_AERO_SHAPING_GAIN 1 ! Gain multiplied with calculated value to get CMZ
MZ_AERO_SHAPING_OFFSET 0 ; - ! Offset added (after gain) to get CMZ
SLIP_START_MZ_AERO  0 ; deg ! Offset subtracted from aerodynamic slip angle
SLIP_SCALE_MZ_AERO  1 ! Scale factor divided into (aerodynamic slip angle -
                      ! SLIP_START_MZ_AERO)

! MZ_AERO_SHAPING_2: Coefficient CMZ2 for Z component of aerodynamic moment. CMZ2
! can be a nonlinear CARPET function of ride height and pitch or a function of pitch
! (CONSTANT, COEFFICIENT, or TABLE) combined with a function MZ_AERO_SHAPING_Z of
! ride height (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can
! be defined at runtime. CMZ2 from the calculation can be adjusted with
! MZ_AERO_SHAPING_2_GAIN and MZ_AERO_SHAPING_2_OFFSET. Pitch used in the calculation
! can be adjusted with PITCH_SCALE_MZ_AERO and PITCH_START_MZ_AERO. Ride height used
! in the calculation can be adjusted with Z_SCALE_MZ_AERO and Z_START_MZ_AERO.

MZ_AERO_SHAPING_2_CONSTANT 1 ; - ! [D] Constant CMZ2 component due to pitch
MZ_AERO_SHAPING_2_GAIN 1 ! Gain multiplied with calculated value to get CMZ2
MZ_AERO_SHAPING_2_OFFSET 0 ; - ! Offset added (after gain) to get CMZ2
MZ_AERO_SHAPING_2_COMBINE MULTIPLY ! How to combine the two components
MZ_AERO_SHAPING_Z_CONSTANT 1 ; - ! [D] Constant CMZ2 component due to ride height

! MZ_PARKING_STEER: Speed-sensitive steering torque for parking and near-zero speed
! conditions. Steering torque at kingpin can be a nonlinear CARPET function of
! vertical load and vehicle speed or a function of vehicle speed (CONSTANT or TABLE)
! combined with a function MZ_PARKING_STEER_FZ of vertical load (CONSTANT,
! COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined at runtime.
! Steering torque at kingpin from the calculation can be adjusted with
! MZ_PARKING_STEER_GAIN and MZ_PARKING_STEER_OFFSET. Vehicle speed used in the
! calculation can be adjusted with VX_SCALE_MZ_PARKING_STEER and
! VX_START_MZ_PARKING_STEER. Vertical load used in the calculation can be adjusted
! with FZ_SCALE_MZ_PARKING_STEER and FZ_START_MZ_PARKING_STEER. This configurable
! function supports 4 datasets; if indices shown below are not used, e.g., (1,2), the
! current values of the indices IAXLE and ISIDE are used to identify the dataset when
! reading data.

MZ_PARKING_STEER_CONSTANT(1,1) 0 ; N-m ! Constant steering torque at kingpin
                                 ! component due to vehicle speed, axle 1, left
                                 ! side
MZ_PARKING_STEER_GAIN(1,1) 1 ! Gain multiplied with calculated value to get steering
                             ! torque at kingpin
MZ_PARKING_STEER_OFFSET(1,1) 0 ; N-m ! Offset added (after gain) to get steering
                               ! torque at kingpin
MZ_PARKING_STEER_COMBINE(1,1) MULTIPLY ! How to combine the two components
MZ_PARKING_STEER_FZ_CONSTANT(1,1) 1 ; - ! [D] Constant steering torque at kingpin
                                    ! component due to vertical load, axle 1, left
                                    ! side

MZ_PARKING_STEER_CONSTANT(1,2) 0 ; N-m ! Constant steering torque at kingpin
                                 ! component due to vehicle speed, axle 1, right
                                 ! side
MZ_PARKING_STEER_GAIN(1,2) 1 ! Gain multiplied with calculated value to get steering
                             ! torque at kingpin
MZ_PARKING_STEER_OFFSET(1,2) 0 ; N-m ! Offset added (after gain) to get steering
                               ! torque at kingpin
MZ_PARKING_STEER_COMBINE(1,2) MULTIPLY ! How to combine the two components
MZ_PARKING_STEER_FZ_CONSTANT(1,2) 1 ; - ! [D] Constant steering torque at kingpin
                                    ! component due to vertical load, axle 1, right
                                    ! side

MZ_PARKING_STEER_CONSTANT(2,1) 0 ; N-m ! [D] Constant steering torque at kingpin
                                 ! component due to vehicle speed, axle 2, left
                                 ! side
MZ_PARKING_STEER_GAIN(2,1) 1 ! Gain multiplied with calculated value to get steering
                             ! torque at kingpin
MZ_PARKING_STEER_OFFSET(2,1) 0 ; N-m ! Offset added (after gain) to get steering
                               ! torque at kingpin
MZ_PARKING_STEER_COMBINE(2,1) MULTIPLY ! How to combine the two components
MZ_PARKING_STEER_FZ_CONSTANT(2,1) 1 ; - ! [D] Constant steering torque at kingpin
                                    ! component due to vertical load, axle 2, left
                                    ! side

MZ_PARKING_STEER_CONSTANT(2,2) 0 ; N-m ! [D] Constant steering torque at kingpin
                                 ! component due to vehicle speed, axle 2, right
                                 ! side
MZ_PARKING_STEER_GAIN(2,2) 1 ! Gain multiplied with calculated value to get steering
                             ! torque at kingpin
MZ_PARKING_STEER_OFFSET(2,2) 0 ; N-m ! Offset added (after gain) to get steering
                               ! torque at kingpin
MZ_PARKING_STEER_COMBINE(2,2) MULTIPLY ! How to combine the two components
MZ_PARKING_STEER_FZ_CONSTANT(2,2) 1 ; - ! [D] Constant steering torque at kingpin
                                    ! component due to vertical load, axle 2, right
                                    ! side

! MZ_TIRE: Tire aligning moment (Mz) as a function of vertical load (Fz) and lateral
! slip (Alpha). Mz can be a nonlinear CARPET function of Fz and Alpha or a function
! of Alpha multiplied by a function MZ_TIRE_FZ of Fz (CONSTANT, COEFFICIENT, or
! TABLE). Mz from the calculation can be adjusted with MZ_TIRE_GAIN and
! MZ_TIRE_OFFSET. Alpha used in the calculation can be adjusted with
! ALPHA_SCALE_MZ_TIRE and ALPHA_START_MZ_TIRE. Fz used in the calculation can be
! adjusted with FZ_SCALE_MZ_TIRE and FZ_START_MZ_TIRE. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,1) 2D_FROM_ZERO ! axle 1, left side
 0, 1593.58, 3187.16, 4780.74, 6374.32, 7967.9, 9561.48, 11155.06, 12748.65
 0.5, 34.35, 66.71, 96.57, 123.59, 147.51, 168.17, 185.43, 199.2
 1, 53.27, 104.31, 152.55, 197.56, 238.93, 276.26, 309.15, 337.21
 1.5, 52.85, 104.57, 155.01, 203.99, 251.22, 296.35, 338.9, 378.28
 2, 43.71, 87.21, 130.71, 174.32, 218.05, 261.82, 305.41, 348.47
 2.5, 33.99, 68.22, 103.04, 138.74, 175.5, 213.49, 252.76, 293.29
 3, 26.04, 52.49, 79.75, 108.15, 137.96, 169.45, 202.83, 238.31
 3.5, 19.92, 40.32, 61.58, 84.03, 107.95, 133.65, 161.42, 191.56
 4, 15.25, 30.98, 47.57, 65.31, 84.49, 105.41, 128.37, 153.71
 4.5, 11.62, 23.73, 36.66, 50.69, 66.08, 83.13, 102.12, 123.39
 5, 8.75, 17.99, 28.02, 39.09, 51.45, 65.35, 81.09, 98.98
 5.5, 6.45, 13.39, 21.07, 29.75, 39.63, 50.98, 64.04, 79.12
 6, 4.57, 9.61, 15.38, 22.09, 29.95, 39.18, 50.02, 62.76
 6.5, 3.01, 6.48, 10.66, 15.73, 21.9, 29.36, 38.34, 49.11
 7, 1.7, 3.85, 6.68, 10.38, 15.11, 21.09, 28.5, 37.59
 7.5, 0.58, 1.6, 3.29, 5.81, 9.33, 14.03, 20.1, 27.76
 8, -0.39, -0.33, 0.37, 1.88, 4.36, 7.96, 12.87, 19.3
 8.5, -1.23, -2.01, -2.17, -1.53, 0.03, 2.68, 6.58, 11.94
 9, -1.96, -3.49, -4.39, -4.53, -3.76, -1.95, 1.07, 5.49
 9.5, -2.61, -4.79, -6.35, -7.17, -7.11, -6.03, -3.79, -0.21
 10, -3.19, -5.94, -8.1, -9.52, -10.09, -9.67, -8.12, -5.27
 10.5, -3.71, -6.98, -9.66, -11.63, -12.75, -12.91, -11.98, -9.8
 11, -4.17, -7.91, -11.07, -13.52, -15.15, -15.84, -15.46, -13.87
 11.5, -4.59, -8.76, -12.34, -15.23, -17.31, -18.48, -18.6, -17.54
 12, -4.97, -9.52, -13.5, -16.78, -19.28, -20.87, -21.45, -20.88
 12.5, -5.32, -10.22, -14.55, -18.2, -21.07, -23.06, -24.05, -23.92
 13, -5.64, -10.86, -15.51, -19.5, -22.72, -25.06, -26.43, -26.71
 13.5, -5.94, -11.45, -16.4, -20.69, -24.23, -26.9, -28.62, -29.26
 14, -6.21, -11.99, -17.22, -21.79, -25.62, -28.6, -30.64, -31.62
 14.5, -6.46, -12.49, -17.98, -22.81, -26.9, -30.16, -32.5, -33.8
 15, -6.69, -12.96, -18.68, -23.75, -28.1, -31.62, -34.23, -35.82
 15.5, -6.91, -13.39, -19.33, -24.63, -29.21, -32.97, -35.83, -37.69
 16, -7.11, -13.79, -19.94, -25.45, -30.24, -34.23, -37.33, -39.44
 16.5, -7.3, -14.17, -20.51, -26.21, -31.21, -35.41, -38.73, -41.08
 17, -7.47, -14.53, -21.04, -26.93, -32.11, -36.51, -40.04, -42.6
 17.5, -7.64, -14.86, -21.54, -27.6, -32.96, -37.54, -41.26, -44.04
 18, -7.79, -15.17, -22.01, -28.23, -33.76, -38.51, -42.42, -45.38
 18.5, -7.94, -15.46, -22.45, -28.83, -34.51, -39.43, -43.5, -46.65
 19, -8.08, -15.74, -22.87, -29.39, -35.22, -40.29, -44.53, -47.85
 19.5, -8.21, -16, -23.27, -29.92, -35.89, -41.11, -45.5, -48.98
 20, -8.33, -16.25, -23.64, -30.42, -36.52, -41.88, -46.41, -50.05
 20.5, -8.45, -16.49, -23.99, -30.9, -37.12, -42.61, -47.28, -51.06
 21, -8.56, -16.71, -24.33, -31.35, -37.7, -43.3, -48.1, -52.02
 21.5, -8.67, -16.92, -24.65, -31.78, -38.24, -43.96, -48.89, -52.93
 22, -8.77, -17.12, -24.95, -32.19, -38.75, -44.59, -49.63, -53.8
 22.5, -8.87, -17.32, -25.24, -32.58, -39.24, -45.19, -50.34, -54.63
 23, -8.96, -17.5, -25.52, -32.95, -39.71, -45.76, -51.01, -55.42
 23.5, -9.04, -17.67, -25.78, -33.3, -40.16, -46.3, -51.66, -56.17
 24, -9.13, -17.84, -26.04, -33.64, -40.59, -46.82, -52.28, -56.89
 24.5, -9.21, -18, -26.28, -33.96, -41, -47.32, -52.87, -57.58
 25, -9.29, -18.16, -26.51, -34.27, -41.39, -47.8, -53.43, -58.23
 26, -9.29, -18.16, -26.51, -34.27, -41.39, -47.8, -53.43, -58.23
ENDTABLE
MZ_TIRE_GAIN(1,1)   1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,1) 1 ! Scale factor divided into (Alpha - ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(1,2) 2D_FROM_ZERO ! axle 1, right side
 0, 1593.58, 3187.16, 4780.74, 6374.32, 7967.9, 9561.48, 11155.06, 12748.65
 0.5, 34.35, 66.71, 96.57, 123.59, 147.51, 168.17, 185.43, 199.2
 1, 53.27, 104.31, 152.55, 197.56, 238.93, 276.26, 309.15, 337.21
 1.5, 52.85, 104.57, 155.01, 203.99, 251.22, 296.35, 338.9, 378.28
 2, 43.71, 87.21, 130.71, 174.32, 218.05, 261.82, 305.41, 348.47
 2.5, 33.99, 68.22, 103.04, 138.74, 175.5, 213.49, 252.76, 293.29
 3, 26.04, 52.49, 79.75, 108.15, 137.96, 169.45, 202.83, 238.31
 3.5, 19.92, 40.32, 61.58, 84.03, 107.95, 133.65, 161.42, 191.56
 4, 15.25, 30.98, 47.57, 65.31, 84.49, 105.41, 128.37, 153.71
 4.5, 11.62, 23.73, 36.66, 50.69, 66.08, 83.13, 102.12, 123.39
 5, 8.75, 17.99, 28.02, 39.09, 51.45, 65.35, 81.09, 98.98
 5.5, 6.45, 13.39, 21.07, 29.75, 39.63, 50.98, 64.04, 79.12
 6, 4.57, 9.61, 15.38, 22.09, 29.95, 39.18, 50.02, 62.76
 6.5, 3.01, 6.48, 10.66, 15.73, 21.9, 29.36, 38.34, 49.11
 7, 1.7, 3.85, 6.68, 10.38, 15.11, 21.09, 28.5, 37.59
 7.5, 0.58, 1.6, 3.29, 5.81, 9.33, 14.03, 20.1, 27.76
 8, -0.39, -0.33, 0.37, 1.88, 4.36, 7.96, 12.87, 19.3
 8.5, -1.23, -2.01, -2.17, -1.53, 0.03, 2.68, 6.58, 11.94
 9, -1.96, -3.49, -4.39, -4.53, -3.76, -1.95, 1.07, 5.49
 9.5, -2.61, -4.79, -6.35, -7.17, -7.11, -6.03, -3.79, -0.21
 10, -3.19, -5.94, -8.1, -9.52, -10.09, -9.67, -8.12, -5.27
 10.5, -3.71, -6.98, -9.66, -11.63, -12.75, -12.91, -11.98, -9.8
 11, -4.17, -7.91, -11.07, -13.52, -15.15, -15.84, -15.46, -13.87
 11.5, -4.59, -8.76, -12.34, -15.23, -17.31, -18.48, -18.6, -17.54
 12, -4.97, -9.52, -13.5, -16.78, -19.28, -20.87, -21.45, -20.88
 12.5, -5.32, -10.22, -14.55, -18.2, -21.07, -23.06, -24.05, -23.92
 13, -5.64, -10.86, -15.51, -19.5, -22.72, -25.06, -26.43, -26.71
 13.5, -5.94, -11.45, -16.4, -20.69, -24.23, -26.9, -28.62, -29.26
 14, -6.21, -11.99, -17.22, -21.79, -25.62, -28.6, -30.64, -31.62
 14.5, -6.46, -12.49, -17.98, -22.81, -26.9, -30.16, -32.5, -33.8
 15, -6.69, -12.96, -18.68, -23.75, -28.1, -31.62, -34.23, -35.82
 15.5, -6.91, -13.39, -19.33, -24.63, -29.21, -32.97, -35.83, -37.69
 16, -7.11, -13.79, -19.94, -25.45, -30.24, -34.23, -37.33, -39.44
 16.5, -7.3, -14.17, -20.51, -26.21, -31.21, -35.41, -38.73, -41.08
 17, -7.47, -14.53, -21.04, -26.93, -32.11, -36.51, -40.04, -42.6
 17.5, -7.64, -14.86, -21.54, -27.6, -32.96, -37.54, -41.26, -44.04
 18, -7.79, -15.17, -22.01, -28.23, -33.76, -38.51, -42.42, -45.38
 18.5, -7.94, -15.46, -22.45, -28.83, -34.51, -39.43, -43.5, -46.65
 19, -8.08, -15.74, -22.87, -29.39, -35.22, -40.29, -44.53, -47.85
 19.5, -8.21, -16, -23.27, -29.92, -35.89, -41.11, -45.5, -48.98
 20, -8.33, -16.25, -23.64, -30.42, -36.52, -41.88, -46.41, -50.05
 20.5, -8.45, -16.49, -23.99, -30.9, -37.12, -42.61, -47.28, -51.06
 21, -8.56, -16.71, -24.33, -31.35, -37.7, -43.3, -48.1, -52.02
 21.5, -8.67, -16.92, -24.65, -31.78, -38.24, -43.96, -48.89, -52.93
 22, -8.77, -17.12, -24.95, -32.19, -38.75, -44.59, -49.63, -53.8
 22.5, -8.87, -17.32, -25.24, -32.58, -39.24, -45.19, -50.34, -54.63
 23, -8.96, -17.5, -25.52, -32.95, -39.71, -45.76, -51.01, -55.42
 23.5, -9.04, -17.67, -25.78, -33.3, -40.16, -46.3, -51.66, -56.17
 24, -9.13, -17.84, -26.04, -33.64, -40.59, -46.82, -52.28, -56.89
 24.5, -9.21, -18, -26.28, -33.96, -41, -47.32, -52.87, -57.58
 25, -9.29, -18.16, -26.51, -34.27, -41.39, -47.8, -53.43, -58.23
 26, -9.29, -18.16, -26.51, -34.27, -41.39, -47.8, -53.43, -58.23
ENDTABLE
MZ_TIRE_GAIN(1,2)   1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(1,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(1,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(1,2) 1 ! Scale factor divided into (Alpha - ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(1,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(1,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,1) 2D_FROM_ZERO ! axle 2, left side
 0, 1593.58, 3187.16, 4780.74, 6374.32, 7967.9, 9561.48, 11155.06, 12748.65
 0.5, 34.35, 66.71, 96.57, 123.59, 147.51, 168.17, 185.43, 199.2
 1, 53.27, 104.31, 152.55, 197.56, 238.93, 276.26, 309.15, 337.21
 1.5, 52.85, 104.57, 155.01, 203.99, 251.22, 296.35, 338.9, 378.28
 2, 43.71, 87.21, 130.71, 174.32, 218.05, 261.82, 305.41, 348.47
 2.5, 33.99, 68.22, 103.04, 138.74, 175.5, 213.49, 252.76, 293.29
 3, 26.04, 52.49, 79.75, 108.15, 137.96, 169.45, 202.83, 238.31
 3.5, 19.92, 40.32, 61.58, 84.03, 107.95, 133.65, 161.42, 191.56
 4, 15.25, 30.98, 47.57, 65.31, 84.49, 105.41, 128.37, 153.71
 4.5, 11.62, 23.73, 36.66, 50.69, 66.08, 83.13, 102.12, 123.39
 5, 8.75, 17.99, 28.02, 39.09, 51.45, 65.35, 81.09, 98.98
 5.5, 6.45, 13.39, 21.07, 29.75, 39.63, 50.98, 64.04, 79.12
 6, 4.57, 9.61, 15.38, 22.09, 29.95, 39.18, 50.02, 62.76
 6.5, 3.01, 6.48, 10.66, 15.73, 21.9, 29.36, 38.34, 49.11
 7, 1.7, 3.85, 6.68, 10.38, 15.11, 21.09, 28.5, 37.59
 7.5, 0.58, 1.6, 3.29, 5.81, 9.33, 14.03, 20.1, 27.76
 8, -0.39, -0.33, 0.37, 1.88, 4.36, 7.96, 12.87, 19.3
 8.5, -1.23, -2.01, -2.17, -1.53, 0.03, 2.68, 6.58, 11.94
 9, -1.96, -3.49, -4.39, -4.53, -3.76, -1.95, 1.07, 5.49
 9.5, -2.61, -4.79, -6.35, -7.17, -7.11, -6.03, -3.79, -0.21
 10, -3.19, -5.94, -8.1, -9.52, -10.09, -9.67, -8.12, -5.27
 10.5, -3.71, -6.98, -9.66, -11.63, -12.75, -12.91, -11.98, -9.8
 11, -4.17, -7.91, -11.07, -13.52, -15.15, -15.84, -15.46, -13.87
 11.5, -4.59, -8.76, -12.34, -15.23, -17.31, -18.48, -18.6, -17.54
 12, -4.97, -9.52, -13.5, -16.78, -19.28, -20.87, -21.45, -20.88
 12.5, -5.32, -10.22, -14.55, -18.2, -21.07, -23.06, -24.05, -23.92
 13, -5.64, -10.86, -15.51, -19.5, -22.72, -25.06, -26.43, -26.71
 13.5, -5.94, -11.45, -16.4, -20.69, -24.23, -26.9, -28.62, -29.26
 14, -6.21, -11.99, -17.22, -21.79, -25.62, -28.6, -30.64, -31.62
 14.5, -6.46, -12.49, -17.98, -22.81, -26.9, -30.16, -32.5, -33.8
 15, -6.69, -12.96, -18.68, -23.75, -28.1, -31.62, -34.23, -35.82
 15.5, -6.91, -13.39, -19.33, -24.63, -29.21, -32.97, -35.83, -37.69
 16, -7.11, -13.79, -19.94, -25.45, -30.24, -34.23, -37.33, -39.44
 16.5, -7.3, -14.17, -20.51, -26.21, -31.21, -35.41, -38.73, -41.08
 17, -7.47, -14.53, -21.04, -26.93, -32.11, -36.51, -40.04, -42.6
 17.5, -7.64, -14.86, -21.54, -27.6, -32.96, -37.54, -41.26, -44.04
 18, -7.79, -15.17, -22.01, -28.23, -33.76, -38.51, -42.42, -45.38
 18.5, -7.94, -15.46, -22.45, -28.83, -34.51, -39.43, -43.5, -46.65
 19, -8.08, -15.74, -22.87, -29.39, -35.22, -40.29, -44.53, -47.85
 19.5, -8.21, -16, -23.27, -29.92, -35.89, -41.11, -45.5, -48.98
 20, -8.33, -16.25, -23.64, -30.42, -36.52, -41.88, -46.41, -50.05
 20.5, -8.45, -16.49, -23.99, -30.9, -37.12, -42.61, -47.28, -51.06
 21, -8.56, -16.71, -24.33, -31.35, -37.7, -43.3, -48.1, -52.02
 21.5, -8.67, -16.92, -24.65, -31.78, -38.24, -43.96, -48.89, -52.93
 22, -8.77, -17.12, -24.95, -32.19, -38.75, -44.59, -49.63, -53.8
 22.5, -8.87, -17.32, -25.24, -32.58, -39.24, -45.19, -50.34, -54.63
 23, -8.96, -17.5, -25.52, -32.95, -39.71, -45.76, -51.01, -55.42
 23.5, -9.04, -17.67, -25.78, -33.3, -40.16, -46.3, -51.66, -56.17
 24, -9.13, -17.84, -26.04, -33.64, -40.59, -46.82, -52.28, -56.89
 24.5, -9.21, -18, -26.28, -33.96, -41, -47.32, -52.87, -57.58
 25, -9.29, -18.16, -26.51, -34.27, -41.39, -47.8, -53.43, -58.23
 26, -9.29, -18.16, -26.51, -34.27, -41.39, -47.8, -53.43, -58.23
ENDTABLE
MZ_TIRE_GAIN(2,1)   1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,1) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,1) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,1) 1 ! Scale factor divided into (Alpha - ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,1) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,1) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! 2D table: row 1 has "0" (place holder) followed by 8 values of Fz (N). Other rows
! have Alpha (deg) followed by 8 values of Mz (N-m). With type = 2D_FROM _ZERO, the
! table includes a hidden row 2 of zeros along with a hidden column 1 of zeros.
MZ_TIRE_CARPET(2,2) 2D_FROM_ZERO ! axle 2, right side
 0, 1593.58, 3187.16, 4780.74, 6374.32, 7967.9, 9561.48, 11155.06, 12748.65
 0.5, 34.35, 66.71, 96.57, 123.59, 147.51, 168.17, 185.43, 199.2
 1, 53.27, 104.31, 152.55, 197.56, 238.93, 276.26, 309.15, 337.21
 1.5, 52.85, 104.57, 155.01, 203.99, 251.22, 296.35, 338.9, 378.28
 2, 43.71, 87.21, 130.71, 174.32, 218.05, 261.82, 305.41, 348.47
 2.5, 33.99, 68.22, 103.04, 138.74, 175.5, 213.49, 252.76, 293.29
 3, 26.04, 52.49, 79.75, 108.15, 137.96, 169.45, 202.83, 238.31
 3.5, 19.92, 40.32, 61.58, 84.03, 107.95, 133.65, 161.42, 191.56
 4, 15.25, 30.98, 47.57, 65.31, 84.49, 105.41, 128.37, 153.71
 4.5, 11.62, 23.73, 36.66, 50.69, 66.08, 83.13, 102.12, 123.39
 5, 8.75, 17.99, 28.02, 39.09, 51.45, 65.35, 81.09, 98.98
 5.5, 6.45, 13.39, 21.07, 29.75, 39.63, 50.98, 64.04, 79.12
 6, 4.57, 9.61, 15.38, 22.09, 29.95, 39.18, 50.02, 62.76
 6.5, 3.01, 6.48, 10.66, 15.73, 21.9, 29.36, 38.34, 49.11
 7, 1.7, 3.85, 6.68, 10.38, 15.11, 21.09, 28.5, 37.59
 7.5, 0.58, 1.6, 3.29, 5.81, 9.33, 14.03, 20.1, 27.76
 8, -0.39, -0.33, 0.37, 1.88, 4.36, 7.96, 12.87, 19.3
 8.5, -1.23, -2.01, -2.17, -1.53, 0.03, 2.68, 6.58, 11.94
 9, -1.96, -3.49, -4.39, -4.53, -3.76, -1.95, 1.07, 5.49
 9.5, -2.61, -4.79, -6.35, -7.17, -7.11, -6.03, -3.79, -0.21
 10, -3.19, -5.94, -8.1, -9.52, -10.09, -9.67, -8.12, -5.27
 10.5, -3.71, -6.98, -9.66, -11.63, -12.75, -12.91, -11.98, -9.8
 11, -4.17, -7.91, -11.07, -13.52, -15.15, -15.84, -15.46, -13.87
 11.5, -4.59, -8.76, -12.34, -15.23, -17.31, -18.48, -18.6, -17.54
 12, -4.97, -9.52, -13.5, -16.78, -19.28, -20.87, -21.45, -20.88
 12.5, -5.32, -10.22, -14.55, -18.2, -21.07, -23.06, -24.05, -23.92
 13, -5.64, -10.86, -15.51, -19.5, -22.72, -25.06, -26.43, -26.71
 13.5, -5.94, -11.45, -16.4, -20.69, -24.23, -26.9, -28.62, -29.26
 14, -6.21, -11.99, -17.22, -21.79, -25.62, -28.6, -30.64, -31.62
 14.5, -6.46, -12.49, -17.98, -22.81, -26.9, -30.16, -32.5, -33.8
 15, -6.69, -12.96, -18.68, -23.75, -28.1, -31.62, -34.23, -35.82
 15.5, -6.91, -13.39, -19.33, -24.63, -29.21, -32.97, -35.83, -37.69
 16, -7.11, -13.79, -19.94, -25.45, -30.24, -34.23, -37.33, -39.44
 16.5, -7.3, -14.17, -20.51, -26.21, -31.21, -35.41, -38.73, -41.08
 17, -7.47, -14.53, -21.04, -26.93, -32.11, -36.51, -40.04, -42.6
 17.5, -7.64, -14.86, -21.54, -27.6, -32.96, -37.54, -41.26, -44.04
 18, -7.79, -15.17, -22.01, -28.23, -33.76, -38.51, -42.42, -45.38
 18.5, -7.94, -15.46, -22.45, -28.83, -34.51, -39.43, -43.5, -46.65
 19, -8.08, -15.74, -22.87, -29.39, -35.22, -40.29, -44.53, -47.85
 19.5, -8.21, -16, -23.27, -29.92, -35.89, -41.11, -45.5, -48.98
 20, -8.33, -16.25, -23.64, -30.42, -36.52, -41.88, -46.41, -50.05
 20.5, -8.45, -16.49, -23.99, -30.9, -37.12, -42.61, -47.28, -51.06
 21, -8.56, -16.71, -24.33, -31.35, -37.7, -43.3, -48.1, -52.02
 21.5, -8.67, -16.92, -24.65, -31.78, -38.24, -43.96, -48.89, -52.93
 22, -8.77, -17.12, -24.95, -32.19, -38.75, -44.59, -49.63, -53.8
 22.5, -8.87, -17.32, -25.24, -32.58, -39.24, -45.19, -50.34, -54.63
 23, -8.96, -17.5, -25.52, -32.95, -39.71, -45.76, -51.01, -55.42
 23.5, -9.04, -17.67, -25.78, -33.3, -40.16, -46.3, -51.66, -56.17
 24, -9.13, -17.84, -26.04, -33.64, -40.59, -46.82, -52.28, -56.89
 24.5, -9.21, -18, -26.28, -33.96, -41, -47.32, -52.87, -57.58
 25, -9.29, -18.16, -26.51, -34.27, -41.39, -47.8, -53.43, -58.23
 26, -9.29, -18.16, -26.51, -34.27, -41.39, -47.8, -53.43, -58.23
ENDTABLE
MZ_TIRE_GAIN(2,2)   1 ! Gain multiplied with calculated value to get Mz
MZ_TIRE_OFFSET(2,2) 0 ; N-m ! Offset added (after gain) to get Mz
ALPHA_START_MZ_TIRE(2,2) 0 ; deg ! Offset subtracted from Alpha
ALPHA_SCALE_MZ_TIRE(2,2) 1 ! Scale factor divided into (Alpha - ALPHA_START_MZ_TIRE)
FZ_START_MZ_TIRE(2,2) 0 ; N ! Offset subtracted from Fz
FZ_SCALE_MZ_TIRE(2,2) 1 ! Scale factor divided into (Fz - FZ_START_MZ_TIRE)

! M_DIFF_VISC: Torque from viscous differential. The speed and torque differences
! are either [left - right] (half-shaft) or [front - rear] (driveshaft). This torque
! difference is a function of speed difference (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. This torque difference
! from the calculation can be adjusted with M_DIFF_VISC_GAIN and M_DIFF_VISC_OFFSET.
! Speed difference used in the calculation can be adjusted with
! DSPIN_SCALE_M_DIFF_VISC and DSPIN_START_M_DIFF_VISC. This configurable function
! supports 3 datasets; if indices shown below are not used, e.g., (2), the current
! value of the index IDIFF is used to identify the dataset when reading data.

! 1D table: col 1 = speed difference (rpm), col 2 = this torque difference (N-m)
M_DIFF_VISC_TABLE(2) SPLINE ! rear differential
 -1200, 402.88
 -1080, 382.21
 -960, 360.35
 -840, 337.07
 -720, 312.07
 -600, 284.88
 -540, 270.26
 -480, 254.8
 -420, 238.35
 -360, 220.67
 -300, 201.44
 -240, 180.17
 -180, 156.03
 -120, 127.4
 -60, 90.09
 0, 0
 60, -90.09
 120, -127.4
 180, -156.03
 240, -180.17
 300, -201.44
 360, -220.67
 420, -238.35
 480, -254.8
 540, -270.26
 600, -284.88
 720, -312.07
 840, -337.07
 960, -360.35
 1080, -382.21
 1200, -402.88
ENDTABLE
M_DIFF_VISC_GAIN(2) 1 ! Gain multiplied with calculated value to get this torque
                      ! difference
M_DIFF_VISC_OFFSET(2) 0 ; N-m ! Offset added (after gain) to get this torque
                        ! difference
DSPIN_START_M_DIFF_VISC(2) 0 ; rpm ! Offset subtracted from speed difference
DSPIN_SCALE_M_DIFF_VISC(2) 1 ! Scale factor divided into (speed difference -
                             ! DSPIN_START_M_DIFF_VISC)

! M_TBAR: Torsion bar torque vs deflection. Torsion bar torque is a function of
! angle (COEFFICIENT or TABLE). Alternatively, a custom equation can be defined at
! runtime. Torsion bar torque from the calculation can be adjusted with M_TBAR_GAIN
! and M_TBAR_OFFSET.

M_TBAR_COEFFICIENT  2 ! Coefficient: torsion bar torque per unit angle (N-m/deg)
M_TBAR_GAIN         1 ! Gain multiplied with calculated value to get torsion bar
                      ! torque
M_TBAR_OFFSET       0 ; N-m ! Offset added (after gain) to get torsion bar torque

! M_TRANS_AV: Component of transmission output torque due to torsional damping of
! the driveline. Transmission output torque is a function of compliance twist angular
! rate (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Transmission output torque from the calculation can be adjusted
! with M_TRANS_AV_GAIN and M_TRANS_AV_OFFSET. Compliance twist angular rate used in
! the calculation can be adjusted with AV_SCALE_M_TRANS and AV_START_M_TRANS.

M_TRANS_AV_CONSTANT 0 ; N-m ! [D] Constant transmission output torque
M_TRANS_AV_OFFSET   0 ; N-m ! Offset added (after gain) to get transmission output
                      ! torque

! M_TRANS_ROT: Component of transmission output torque due to torsional stiffness of
! the driveline. Transmission output torque is a function of compliance twist angle
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Transmission output torque from the calculation can be adjusted with
! M_TRANS_ROT_GAIN and M_TRANS_ROT_OFFSET. Compliance twist angle used in the
! calculation can be adjusted with ROT_SCALE_M_TRANS and ROT_START_M_TRANS.

M_TRANS_ROT_CONSTANT 0 ; N-m ! [D] Constant transmission output torque
M_TRANS_ROT_OFFSET  0 ; N-m ! Offset added (after gain) to get transmission output
                      ! torque

! PBK_CON: Brake control pressure (master cylinder). Brake pressure is a function of
! time (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be
! defined at runtime. Brake pressure from the calculation can be adjusted with
! PBK_CON_GAIN and PBK_CON_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_PBK_CON and TSTART_PBK_CON.

PBK_CON_CONSTANT    0 ; MPa ! Constant brake pressure
PBK_CON_OFFSET      0 ; MPa ! Offset added (after gain) to get brake pressure

! PBK_DL: Brake delivery pressure (proportioning valve). Delivery pressure can be a
! nonlinear CARPET function of dynamic wheel load and master cylinder pressure or a
! function of master cylinder pressure (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function PBK_DL_FZ of dynamic wheel load (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Delivery pressure from
! the calculation can be adjusted with PBK_DL_GAIN and PBK_DL_OFFSET. Master cylinder
! pressure used in the calculation can be adjusted with PBK_CON_SCALE_PBK_DL and
! PBK_CON_START_PBK_DL. Dynamic wheel load used in the calculation can be adjusted
! with FZ_SCALE_PBK_DL and FZ_START_PBK_DL. This configurable function supports 4
! datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

PBK_DL_COEFFICIENT(1,1) 1 ! Coefficient: delivery pressure per unit master cylinder
                          ! pressure (MPa/MPa), axle 1, left side
PBK_DL_GAIN(1,1)    1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,1)  0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,1) 0 ; MPa ! Offset subtracted from master cylinder pressure
PBK_CON_SCALE_PBK_DL(1,1) 1 ! Scale factor divided into (master cylinder pressure -
                            ! PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,1) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(1,1) 1 ; - ! Constant delivery pressure component due to dynamic
                          ! wheel load, axle 1, left side

PBK_DL_COEFFICIENT(1,2) 1 ! Coefficient: delivery pressure per unit master cylinder
                          ! pressure (MPa/MPa), axle 1, right side
PBK_DL_GAIN(1,2)    1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(1,2)  0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(1,2) 0 ; MPa ! Offset subtracted from master cylinder pressure
PBK_CON_SCALE_PBK_DL(1,2) 1 ! Scale factor divided into (master cylinder pressure -
                            ! PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(1,2) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(1,2) 1 ; - ! Constant delivery pressure component due to dynamic
                          ! wheel load, axle 1, right side

! 1D table: col 1 = master cylinder pressure (MPa), col 2 = delivery pressure (MPa)
PBK_DL_TABLE(2,1) LINEAR ! axle 2, left side
 0, 0
 1.5, 1.5
 2.5, 1.8
ENDTABLE
PBK_DL_GAIN(2,1)    1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,1)  0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,1) 0 ; MPa ! Offset subtracted from master cylinder pressure
PBK_CON_SCALE_PBK_DL(2,1) 1 ! Scale factor divided into (master cylinder pressure -
                            ! PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,1) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(2,1) 1 ; - ! Constant delivery pressure component due to dynamic
                          ! wheel load, axle 2, left side

! 1D table: col 1 = master cylinder pressure (MPa), col 2 = delivery pressure (MPa)
PBK_DL_TABLE(2,2) LINEAR ! axle 2, right side
 0, 0
 1.5, 1.5
 2.5, 1.8
ENDTABLE
PBK_DL_GAIN(2,2)    1 ! Gain multiplied with calculated value to get delivery
                      ! pressure
PBK_DL_OFFSET(2,2)  0 ; MPa ! Offset added (after gain) to get delivery pressure
PBK_CON_START_PBK_DL(2,2) 0 ; MPa ! Offset subtracted from master cylinder pressure
PBK_CON_SCALE_PBK_DL(2,2) 1 ! Scale factor divided into (master cylinder pressure -
                            ! PBK_CON_START_PBK_DL)
PBK_DL_COMBINE(2,2) MULTIPLY ! How to combine the two components
PBK_DL_FZ_CONSTANT(2,2) 1 ; - ! Constant delivery pressure component due to dynamic
                          ! wheel load, axle 2, right side

! RACK_KIN: Nonlinear steering system kinematics for rack and pinion: steer angle at
! the road wheel. Road wheel steer is a function of rack displacement (CONSTANT,
! COEFFICIENT, or TABLE). Road wheel steer from the calculation can be adjusted with
! RACK_KIN_GAIN and RACK_KIN_OFFSET. The derivative of this function is used
! internally. This configurable function supports 4 datasets; if indices shown below
! are not used, e.g., (1,2), the current values of the indices IAXLE and ISIDE are
! used to identify the dataset when reading data.

! 1D table: col 1 = rack displacement (mm), col 2 = road wheel steer (deg)
RACK_KIN_TABLE(1,1) SPLINE ! axle 1, left side
 -57.6, -30.15
 -55.3, -28.93
 -52.99, -27.73
 -50.69, -26.53
 -48.38, -25.34
 -46.08, -24.17
 -43.78, -22.99
 -41.47, -21.82
 -39.17, -20.66
 -36.86, -19.49
 -34.56, -18.33
 -32.26, -17.16
 -29.95, -15.99
 -27.65, -14.81
 -25.34, -13.64
 -23.04, -12.45
 -20.74, -11.26
 -18.43, -10.05
 -16.13, -8.84
 -13.82, -7.62
 -11.52, -6.38
 -9.22, -5.14
 -6.91, -3.88
 -4.61, -2.6
 -2.3, -1.31
 0, 0
 2.3, 1.33
 4.61, 2.67
 6.91, 4.04
 9.22, 5.43
 11.52, 6.84
 13.82, 8.27
 16.13, 9.73
 18.43, 11.21
 20.74, 12.73
 23.04, 14.27
 25.34, 15.84
 27.65, 17.44
 29.95, 19.07
 32.26, 20.73
 34.56, 22.43
 36.86, 24.17
 39.17, 25.94
 41.47, 27.76
 43.78, 29.61
 46.08, 31.5
 48.38, 33.44
 50.69, 35.42
 52.99, 37.45
 55.3, 39.52
 57.6, 41.65
ENDTABLE
RACK_KIN_GAIN(1,1)  1 ! Gain multiplied with calculated value to get road wheel
                      ! steer
RACK_KIN_OFFSET(1,1) 0 ; deg ! Offset added (after gain) to get road wheel steer

! 1D table: col 1 = rack displacement (mm), col 2 = road wheel steer (deg)
RACK_KIN_TABLE(1,2) SPLINE ! axle 1, right side
 -57.6, -41.65
 -55.3, -39.52
 -52.99, -37.45
 -50.69, -35.42
 -48.38, -33.44
 -46.08, -31.5
 -43.78, -29.61
 -41.47, -27.76
 -39.17, -25.94
 -36.86, -24.17
 -34.56, -22.43
 -32.26, -20.73
 -29.95, -19.07
 -27.65, -17.44
 -25.34, -15.84
 -23.04, -14.27
 -20.74, -12.73
 -18.43, -11.21
 -16.13, -9.73
 -13.82, -8.27
 -11.52, -6.84
 -9.22, -5.43
 -6.91, -4.04
 -4.61, -2.67
 -2.3, -1.33
 0, 0
 2.3, 1.31
 4.61, 2.6
 6.91, 3.88
 9.22, 5.14
 11.52, 6.38
 13.82, 7.62
 16.13, 8.84
 18.43, 10.05
 20.74, 11.26
 23.04, 12.45
 25.34, 13.64
 27.65, 14.81
 29.95, 15.99
 32.26, 17.16
 34.56, 18.33
 36.86, 19.49
 39.17, 20.66
 41.47, 21.82
 43.78, 22.99
 46.08, 24.17
 48.38, 25.34
 50.69, 26.53
 52.99, 27.73
 55.3, 28.93
 57.6, 30.15
ENDTABLE
RACK_KIN_GAIN(1,2)  1 ! Gain multiplied with calculated value to get road wheel
                      ! steer
RACK_KIN_OFFSET(1,2) 0 ; deg ! Offset added (after gain) to get road wheel steer

RACK_KIN_COEFFICIENT(2,1) 0.6 ! [D] Coefficient: road wheel steer per unit rack
                              ! displacement (deg/mm), axle 2, left side
RACK_KIN_GAIN(2,1)  1 ! Gain multiplied with calculated value to get road wheel
                      ! steer
RACK_KIN_OFFSET(2,1) 0 ; deg ! Offset added (after gain) to get road wheel steer

RACK_KIN_COEFFICIENT(2,2) 0.6 ! [D] Coefficient: road wheel steer per unit rack
                              ! displacement (deg/mm), axle 2, right side
RACK_KIN_GAIN(2,2)  1 ! Gain multiplied with calculated value to get road wheel
                      ! steer
RACK_KIN_OFFSET(2,2) 0 ; deg ! Offset added (after gain) to get road wheel steer

! RACK_TRAVEL: Steering rack displacement. Rack displacement is a function of pinion
! angle (CONSTANT, COEFFICIENT, or TABLE). Rack displacement from the calculation can
! be adjusted with RACK_TRAVEL_GAIN and RACK_TRAVEL_OFFSET. The derivative of this
! function is used internally. This configurable function supports 2 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index IAXLE
! is used to identify the dataset when reading data.

RACK_TRAVEL_COEFFICIENT(1) 0.1111111111 ! Coefficient: rack displacement per unit
                                        ! pinion angle (mm/deg), axle 1
RACK_TRAVEL_GAIN(1) 1 ! Gain multiplied with calculated value to get rack
                      ! displacement
RACK_TRAVEL_OFFSET(1) 0 ; mm ! Offset added (after gain) to get rack displacement

RACK_TRAVEL_COEFFICIENT(2) 0.1 ! Coefficient: rack displacement per unit pinion
                               ! angle (mm/deg), axle 2
RACK_TRAVEL_GAIN(2) 1 ! Gain multiplied with calculated value to get rack
                      ! displacement
RACK_TRAVEL_OFFSET(2) 0 ; mm ! Offset added (after gain) to get rack displacement

! RM_TC: Torque converter output to input torque ratio vs. speed ratio of torque
! converter output shaft to engine. Torque ratio is a function of speed ratio
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Torque ratio from the calculation can be adjusted with RM_TC_GAIN and
! RM_TC_OFFSET. Speed ratio used in the calculation can be adjusted with
! RSPIN_SCALE_RM_TC and RSPIN_START_RM_TC.

! 1D table: col 1 = speed ratio (-), col 2 = torque ratio (-)
RM_TC_TABLE SPLINE_FLAT ! spline interpolation, flat-line extrapolation
 0, 1.864
 0.102, 1.78
 0.202, 1.701
 0.306, 1.608
 0.353, 1.56
 0.4, 1.519
 0.452, 1.464
 0.502, 1.412
 0.551, 1.356
 0.6, 1.309
 0.65, 1.259
 0.7, 1.203
 0.75, 1.151
 0.801, 1.098
 0.82, 1.074
 0.84, 1.048
 0.849, 1.041
 0.861, 1.027
 0.87, 1.014
 0.881, 0.996
 0.89, 0.996
 0.9, 0.993
 0.91, 0.998
 0.921, 0.986
 0.928, 0.993
 0.94, 0.996
 0.951, 0.981
 0.99, 1
 1, 1
ENDTABLE
RM_TC_GAIN          1 ! Gain multiplied with calculated value to get torque ratio
RM_TC_OFFSET        0 ; - ! Offset added (after gain) to get torque ratio
RSPIN_START_RM_TC   0 ; - ! Offset subtracted from speed ratio
RSPIN_SCALE_RM_TC   1 ! Scale factor divided into (speed ratio - RSPIN_START_RM_TC)

! ROAD_DZ: Ground elevation component that varies with both road station S and
! lateral position L. DZ can be a nonlinear CARPET function of lateral position and
! station or a function of station (CONSTANT, COEFFICIENT, or TABLE) combined with a
! function ROAD_DZ_L of lateral position (CONSTANT, COEFFICIENT, or TABLE). DZ from
! the calculation can be adjusted with ROAD_DZ_GAIN and ROAD_DZ_OFFSET. Station used
! in the calculation can be adjusted with SSCALE_ROAD_DZ and SSTART_ROAD_DZ. Lateral
! position used in the calculation can be adjusted with L_SCALE_ROAD_DZ and
! L_START_ROAD_DZ. The derivative of this function is used internally. This
! configurable function supports 100 datasets; if indices shown below are not used,
! e.g., (1,2), the current values of the indices IROAD and IDZ_ROAD are used to
! identify the dataset when reading data.

ROAD_DZ_CONSTANT(1,1) 0 ; m ! Constant dZ component due to station, Road 1, design
                        ! DZ
ROAD_DZ_GAIN(1,1)   1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(1,1) 0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(1,1) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(1,1) 1 ; - ! Constant dZ component due to lateral position, Road
                          ! 1, design DZ

ROAD_DZ_CONSTANT(1,2) 0 ; m ! [D] Constant dZ component due to station, Road 1,
                        ! additional DZ
ROAD_DZ_GAIN(1,2)   1 ! Gain multiplied with calculated value to get dZ
ROAD_DZ_OFFSET(1,2) 0 ; m ! Offset added (after gain) to get dZ
ROAD_DZ_COMBINE(1,2) MULTIPLY ! How to combine the two components
ROAD_DZ_L_CONSTANT(1,2) 1 ; - ! [D] Constant dZ component due to lateral position,
                          ! Road 1, additional DZ

! ROAD_ZS: Road elevation component related only to road station S. Elevation is a
! function of station (CONSTANT, COEFFICIENT, or TABLE). Elevation from the
! calculation can be adjusted with ROAD_ZS_GAIN and ROAD_ZS_OFFSET. Station used in
! the calculation can be adjusted with SSCALE_ROAD_ZS and SSTART_ROAD_ZS. The
! derivative of this function is used internally. This configurable function supports
! 50 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index IROAD is used to identify the dataset when reading data.

ROAD_ZS_CONSTANT(1) 0 ; m ! Constant elevation
ROAD_ZS_OFFSET(1)   0 ; m ! Offset added (after gain) to get elevation

! R_STEER_SPEED: Rear-wheel steering gain due to speed. The gain is: [rear steer
! control]/[driver steer control]. This ratio is multiplied with the nominal steering
! gear input to determine the input to any rear axle steering gear. Gain is a
! function of speed (CONSTANT, COEFFICIENT, or TABLE). Gain from the calculation can
! be adjusted with R_STEER_SPEED_GAIN and R_STEER_SPEED_OFFSET. Speed used in the
! calculation can be adjusted with VX_SCALE_R_STEER and VX_START_R_STEER. The
! derivative of this function is used internally. This configurable function supports
! 2 datasets; if indices shown below are not used, e.g., (2), the current value of
! the index 2 is used to identify the dataset when reading data.

R_STEER_SPEED_CONSTANT(2) 0 ; - ! [D] Constant gain
R_STEER_SPEED_OFFSET(2) 0 ; - ! Offset added (after gain) to get gain

! STEER_COMP: Steer of each wheel on an axle as a function of the total kingpin
! steering moment from both wheels on the axle, MINUS steering due to suspension
! compliance. Steer is a function of total kingpin moment (CONSTANT, COEFFICIENT, or
! TABLE). Alternatively, a custom equation can be defined at runtime. Steer from the
! calculation can be adjusted with STEER_COMP_GAIN and STEER_COMP_OFFSET. Total
! kingpin moment used in the calculation can be adjusted with M_KP_SCALE_STEER_COMP
! and M_KP_START_STEER_COMP. This configurable function supports 2 datasets; if
! indices shown below are not used, e.g., (2), the current value of the index IAXLE
! is used to identify the dataset when reading data.

STEER_COMP_COEFFICIENT(1) 0.001 ! Coefficient: steer per unit total kingpin moment
                                ! (deg/N-m), axle 1
STEER_COMP_GAIN(1)  1 ! Gain multiplied with calculated value to get steer
STEER_COMP_OFFSET(1) 0 ; deg ! Offset added (after gain) to get steer
M_KP_START_STEER_COMP(1) 0 ; N-m ! Offset subtracted from total kingpin moment
M_KP_SCALE_STEER_COMP(1) 1 ! Scale factor divided into (total kingpin moment -
                           ! M_KP_START_STEER_COMP)

STEER_COMP_CONSTANT(2) 0 ; deg ! Constant steer, axle 2
STEER_COMP_OFFSET(2) 0 ; deg ! Offset added (after gain) to get steer

! STEER_SW: Open loop steering wheel angle as a function of time. Steering wheel
! angle is a function of time (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a
! custom equation can be defined at runtime. Steering wheel angle from the
! calculation can be adjusted with STEER_SW_GAIN and STEER_SW_OFFSET. Time used in
! the calculation can be adjusted with TSCALE_STEER and TSTART_STEER.

STEER_SW_CONSTANT   0 ; deg ! Constant steering wheel angle
STEER_SW_OFFSET     0 ; deg ! Offset added (after gain) to get steering wheel angle

! SUSP_DIVE: Suspension dive (measured at zero steer). Suspension dive is a function
! of jounce (CONSTANT, COEFFICIENT, or TABLE). Suspension dive from the calculation
! can be adjusted with SUSP_DIVE_GAIN and SUSP_DIVE_OFFSET. Jounce used in the
! calculation can be adjusted with JNC_SCALE_SUSP_DIVE and JNC_START_SUSP_DIVE. The
! derivative of this function is used internally. This configurable function supports
! 4 datasets; if indices shown below are not used, e.g., (1,2), the current values of
! the indices IAXLE and ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = jounce (mm), col 2 = suspension dive (deg)
SUSP_DIVE_TABLE(1,1) SPLINE ! axle 1, left side
 -70, 0.282157
 -60, 0.243294
 -50, 0.204028
 -40, 0.164309
 -30, 0.124089
 -20, 0.083323
 -10, 0.041971
 0, 0
 10, -0.042617
 20, -0.085893
 30, -0.129828
 40, -0.174396
 50, -0.21954
 60, -0.265153
 70, -0.311062
ENDTABLE
SUSP_DIVE_GAIN(1,1) 1 ! Gain multiplied with calculated value to get suspension dive
SUSP_DIVE_OFFSET(1,1) 0 ; deg ! Offset added (after gain) to get suspension dive
JNC_START_SUSP_DIVE(1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE(1,1) 1 ! Scale factor divided into (jounce -
                           ! JNC_START_SUSP_DIVE)

! 1D table: col 1 = jounce (mm), col 2 = suspension dive (deg)
SUSP_DIVE_TABLE(1,2) SPLINE ! axle 1, right side
 -70, 0.282157
 -60, 0.243294
 -50, 0.204028
 -40, 0.164309
 -30, 0.124089
 -20, 0.083323
 -10, 0.041971
 0, 0
 10, -0.042617
 20, -0.085893
 30, -0.129828
 40, -0.174396
 50, -0.21954
 60, -0.265153
 70, -0.311062
ENDTABLE
SUSP_DIVE_GAIN(1,2) 1 ! Gain multiplied with calculated value to get suspension dive
SUSP_DIVE_OFFSET(1,2) 0 ; deg ! Offset added (after gain) to get suspension dive
JNC_START_SUSP_DIVE(1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE(1,2) 1 ! Scale factor divided into (jounce -
                           ! JNC_START_SUSP_DIVE)

SUSP_DIVE_COEFFICIENT(2,1) 0 ! Coefficient: suspension dive per unit jounce
                             ! (deg/mm), axle 2, left side
SUSP_DIVE_OFFSET(2,1) 0 ; deg ! Offset added (after gain) to get suspension dive
JNC_START_SUSP_DIVE(2,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE(2,1) 1 ! Scale factor divided into (jounce -
                           ! JNC_START_SUSP_DIVE)

SUSP_DIVE_COEFFICIENT(2,2) 0 ! Coefficient: suspension dive per unit jounce
                             ! (deg/mm), axle 2, right side
SUSP_DIVE_OFFSET(2,2) 0 ; deg ! Offset added (after gain) to get suspension dive
JNC_START_SUSP_DIVE(2,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_DIVE(2,2) 1 ! Scale factor divided into (jounce -
                           ! JNC_START_SUSP_DIVE)

! SUSP_LAT: Suspension Lateral movement inward of unsteered wheel (measured at zero
! steer). Lateral movement inward of unsteered wheel is a function of jounce
! (CONSTANT, COEFFICIENT, or TABLE). Lateral movement inward of unsteered wheel from
! the calculation can be adjusted with SUSP_LAT_GAIN and SUSP_LAT_OFFSET. Jounce used
! in the calculation can be adjusted with JNC_SCALE_SUSP_LAT and JNC_START_SUSP_LAT.
! The derivative of this function is used internally. This configurable function
! supports 4 datasets; if indices shown below are not used, e.g., (1,2), the current
! values of the indices IAXLE and ISIDE are used to identify the dataset when reading
! data.

! 1D table: col 1 = jounce (mm), col 2 = Lateral movement inward of unsteered wheel (mm)
SUSP_LAT_TABLE(1,1) SPLINE ! axle 1, left side
 -70, 2.81522
 -60, 1.82386
 -50, 1.03219
 -40, 0.437944
 -30, 0.039162
 -20, -0.165848
 -10, -0.178513
 0, 0
 10, 0.368777
 20, 0.927155
 30, 1.67473
 40, 2.61133
 50, 3.73709
 60, 5.05237
 70, 6.55783
ENDTABLE
SUSP_LAT_GAIN(1,1)  1 ! Gain multiplied with calculated value to get Lateral
                      ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(1,1) 0 ; mm ! Offset added (after gain) to get Lateral movement
                       ! inward of unsteered wheel
JNC_START_SUSP_LAT(1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_LAT(1,1) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_LAT)

! 1D table: col 1 = jounce (mm), col 2 = Lateral movement inward of unsteered wheel (mm)
SUSP_LAT_TABLE(1,2) SPLINE ! axle 1, right side
 -70, 2.81522
 -60, 1.82386
 -50, 1.03219
 -40, 0.437944
 -30, 0.039162
 -20, -0.165848
 -10, -0.178513
 0, 0
 10, 0.368777
 20, 0.927155
 30, 1.67473
 40, 2.61133
 50, 3.73709
 60, 5.05237
 70, 6.55783
ENDTABLE
SUSP_LAT_GAIN(1,2)  1 ! Gain multiplied with calculated value to get Lateral
                      ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(1,2) 0 ; mm ! Offset added (after gain) to get Lateral movement
                       ! inward of unsteered wheel
JNC_START_SUSP_LAT(1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_LAT(1,2) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_LAT)

! 1D table: col 1 = jounce (mm), col 2 = Lateral movement inward of unsteered wheel (mm)
SUSP_LAT_TABLE(2,1) SPLINE ! axle 2, left side
 -70, 5.34878
 -60, 3.82136
 -50, 2.55534
 -40, 1.54581
 -30, 0.788587
 -20, 0.280222
 -10, 0.018009
 0, 0
 10, 0.22505
 20, 0.692872
 30, 1.40412
 40, 2.36046
 50, 3.56474
 60, 5.02106
 70, 6.73495
ENDTABLE
SUSP_LAT_GAIN(2,1)  1 ! Gain multiplied with calculated value to get Lateral
                      ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(2,1) 0 ; mm ! Offset added (after gain) to get Lateral movement
                       ! inward of unsteered wheel
JNC_START_SUSP_LAT(2,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_LAT(2,1) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_LAT)

! 1D table: col 1 = jounce (mm), col 2 = Lateral movement inward of unsteered wheel (mm)
SUSP_LAT_TABLE(2,2) SPLINE ! axle 2, right side
 -70, 5.34878
 -60, 3.82136
 -50, 2.55534
 -40, 1.54581
 -30, 0.788587
 -20, 0.280222
 -10, 0.018009
 0, 0
 10, 0.22505
 20, 0.692872
 30, 1.40412
 40, 2.36046
 50, 3.56474
 60, 5.02106
 70, 6.73495
ENDTABLE
SUSP_LAT_GAIN(2,2)  1 ! Gain multiplied with calculated value to get Lateral
                      ! movement inward of unsteered wheel
SUSP_LAT_OFFSET(2,2) 0 ; mm ! Offset added (after gain) to get Lateral movement
                       ! inward of unsteered wheel
JNC_START_SUSP_LAT(2,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_LAT(2,2) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_LAT)

! SUSP_X: Suspension X movement forward of unsteered wheel (measured at zero steer).
! X movement forward of unsteered wheel is a function of jounce (CONSTANT,
! COEFFICIENT, or TABLE). X movement forward of unsteered wheel from the calculation
! can be adjusted with SUSP_X_GAIN and SUSP_X_OFFSET. Jounce used in the calculation
! can be adjusted with JNC_SCALE_SUSP_X and JNC_START_SUSP_X. The derivative of this
! function is used internally. This configurable function supports 4 datasets; if
! indices shown below are not used, e.g., (1,2), the current values of the indices
! IAXLE and ISIDE are used to identify the dataset when reading data.

! 1D table: col 1 = jounce (mm), col 2 = X movement forward of unsteered wheel (mm)
SUSP_X_TABLE(1,1) SPLINE ! axle 1, left side
 -70, -0.779336
 -60, -0.596671
 -50, -0.438583
 -40, -0.304523
 -30, -0.194019
 -20, -0.106665
 -10, -0.042102
 0, 0
 10, 0.019968
 20, 0.018152
 30, -0.005034
 40, -0.049059
 50, -0.113201
 60, -0.196434
 70, -0.297272
ENDTABLE
SUSP_X_GAIN(1,1)    1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(1,1)  0 ; mm ! Offset added (after gain) to get X movement forward of
                      ! unsteered wheel
JNC_START_SUSP_X(1,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X(1,1) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)

! 1D table: col 1 = jounce (mm), col 2 = X movement forward of unsteered wheel (mm)
SUSP_X_TABLE(1,2) SPLINE ! axle 1, right side
 -70, -0.779336
 -60, -0.596671
 -50, -0.438583
 -40, -0.304523
 -30, -0.194019
 -20, -0.106665
 -10, -0.042102
 0, 0
 10, 0.019968
 20, 0.018152
 30, -0.005034
 40, -0.049059
 50, -0.113201
 60, -0.196434
 70, -0.297272
ENDTABLE
SUSP_X_GAIN(1,2)    1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(1,2)  0 ; mm ! Offset added (after gain) to get X movement forward of
                      ! unsteered wheel
JNC_START_SUSP_X(1,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X(1,2) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)

! 1D table: col 1 = jounce (mm), col 2 = X movement forward of unsteered wheel (mm)
SUSP_X_TABLE(2,1) SPLINE ! axle 2, left side
 -70, 2.6892
 -60, 1.76827
 -50, 1.01123
 -40, 0.426265
 -30, 0.022328
 -20, -0.190752
 -10, -0.202151
 0, 0
 10, 0.428603
 20, 1.09748
 30, 2.02114
 40, 3.21439
 50, 4.69179
 60, 6.46687
 70, 8.5513
ENDTABLE
SUSP_X_GAIN(2,1)    1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(2,1)  0 ; mm ! Offset added (after gain) to get X movement forward of
                      ! unsteered wheel
JNC_START_SUSP_X(2,1) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X(2,1) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)

! 1D table: col 1 = jounce (mm), col 2 = X movement forward of unsteered wheel (mm)
SUSP_X_TABLE(2,2) SPLINE ! axle 2, right side
 -70, 2.6892
 -60, 1.76827
 -50, 1.01123
 -40, 0.426265
 -30, 0.022328
 -20, -0.190752
 -10, -0.202151
 0, 0
 10, 0.428603
 20, 1.09748
 30, 2.02114
 40, 3.21439
 50, 4.69179
 60, 6.46687
 70, 8.5513
ENDTABLE
SUSP_X_GAIN(2,2)    1 ! Gain multiplied with calculated value to get X movement
                      ! forward of unsteered wheel
SUSP_X_OFFSET(2,2)  0 ; mm ! Offset added (after gain) to get X movement forward of
                      ! unsteered wheel
JNC_START_SUSP_X(2,2) 0 ; mm ! Offset subtracted from jounce
JNC_SCALE_SUSP_X(2,2) 1 ! Scale factor divided into (jounce - JNC_START_SUSP_X)

! THROTTLE_ENGINE: Throttle input (normalized). Normalized throttle input is a
! function of time (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom
! equation can be defined at runtime. Normalized throttle input from the calculation
! can be adjusted with THROTTLE_ENGINE_GAIN and THROTTLE_ENGINE_OFFSET. Time used in
! the calculation can be adjusted with TSCALE_THROTTLE and TSTART_THROTTLE.

THROTTLE_ENGINE_CONSTANT 0 ; - ! Constant normalized throttle input
THROTTLE_ENGINE_OFFSET 0 ; - ! Offset added (after gain) to get normalized throttle
                         ! input

! TOE: Suspension toe (measured at zero steer). Toe is a function of jounce
! (CONSTANT, COEFFICIENT, or TABLE). Toe from the calculation can be adjusted with
! TOE_GAIN and TOE_OFFSET. Jounce used in the calculation can be adjusted with
! JNC_SCALE_TOE and JNC_START_TOE. The derivative of this function is used
! internally. This configurable function supports 4 datasets; if indices shown below
! are not used, e.g., (1,2), the current values of the indices IAXLE and ISIDE are
! used to identify the dataset when reading data.

! 1D table: col 1 = jounce (mm), col 2 = toe (deg)
TOE_TABLE(1,1) SPLINE ! axle 1, left side
 -70, -0.932437
 -60, -0.740516
 -50, -0.56874
 -40, -0.416666
 -30, -0.283952
 -20, -0.170354
 -10, -0.075723
 0, 0
 10, 0.056776
 20, 0.09447
 30, 0.112841
 40, 0.11153
 50, 0.090047
 60, 0.047744
 70, -0.016224
ENDTABLE
TOE_GAIN(1,1)       1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(1,1)     0 ; deg ! Offset added (after gain) to get toe
JNC_START_TOE(1,1)  0 ; mm ! Offset subtracted from jounce
JNC_SCALE_TOE(1,1)  1 ! Scale factor divided into (jounce - JNC_START_TOE)

! 1D table: col 1 = jounce (mm), col 2 = toe (deg)
TOE_TABLE(1,2) SPLINE ! axle 1, right side
 -70, -0.932437
 -60, -0.740516
 -50, -0.56874
 -40, -0.416666
 -30, -0.283952
 -20, -0.170354
 -10, -0.075723
 0, 0
 10, 0.056776
 20, 0.09447
 30, 0.112841
 40, 0.11153
 50, 0.090047
 60, 0.047744
 70, -0.016224
ENDTABLE
TOE_GAIN(1,2)       1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(1,2)     0 ; deg ! Offset added (after gain) to get toe
JNC_START_TOE(1,2)  0 ; mm ! Offset subtracted from jounce
JNC_SCALE_TOE(1,2)  1 ! Scale factor divided into (jounce - JNC_START_TOE)

! 1D table: col 1 = jounce (mm), col 2 = toe (deg)
TOE_TABLE(2,1) SPLINE ! axle 2, left side
 -70, -1.02057
 -60, -0.828098
 -50, -0.65623
 -40, -0.501756
 -30, -0.361641
 -20, -0.233037
 -10, -0.113294
 0, 0
 10, 0.108974
 20, 0.215401
 30, 0.320605
 40, 0.425353
 50, 0.529714
 60, 0.632927
 70, 0.733253
ENDTABLE
TOE_GAIN(2,1)       1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(2,1)     0 ; deg ! Offset added (after gain) to get toe
JNC_START_TOE(2,1)  0 ; mm ! Offset subtracted from jounce
JNC_SCALE_TOE(2,1)  1 ! Scale factor divided into (jounce - JNC_START_TOE)

! 1D table: col 1 = jounce (mm), col 2 = toe (deg)
TOE_TABLE(2,2) SPLINE ! axle 2, right side
 -70, -1.02057
 -60, -0.828098
 -50, -0.65623
 -40, -0.501756
 -30, -0.361641
 -20, -0.233037
 -10, -0.113294
 0, 0
 10, 0.108974
 20, 0.215401
 30, 0.320605
 40, 0.425353
 50, 0.529714
 60, 0.632927
 70, 0.733253
ENDTABLE
TOE_GAIN(2,2)       1 ! Gain multiplied with calculated value to get toe
TOE_OFFSET(2,2)     0 ; deg ! Offset added (after gain) to get toe
JNC_START_TOE(2,2)  0 ; mm ! Offset subtracted from jounce
JNC_SCALE_TOE(2,2)  1 ! Scale factor divided into (jounce - JNC_START_TOE)

! UPSHIFT_TRANS: Transmission speed when upshift occurs. IGEAR specifies the lower
! gear for each table (e.g., IGEAR 2 means upshift from 2 to 3). Transmission speed
! is a function of throttle position (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Transmission speed from
! the calculation can be adjusted with UPSHIFT_TRANS_GAIN and UPSHIFT_TRANS_OFFSET.
! Throttle position used in the calculation can be adjusted with
! THROTTLE_SCALE_UPSHIFT and THROTTLE_START_UPSHIFT. This configurable function
! supports 17 datasets; if indices shown below are not used, e.g., (2), the current
! value of the index IGEAR is used to identify the dataset when reading data.

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(1) LINEAR_FLAT ! shifting between gears 1 and 2
 0, 874
 0.2, 874
 0.8, 1653
 1, 1653
ENDTABLE
UPSHIFT_TRANS_GAIN(1) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(1) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(1) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(1) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(2) LINEAR_FLAT ! shifting between gears 2 and 3
 0, 1282
 0.2, 1282
 0.8, 2840
 1, 2840
ENDTABLE
UPSHIFT_TRANS_GAIN(2) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(2) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(2) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(2) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(3) LINEAR_FLAT ! shifting between gears 3 and 4
 0, 1800
 0.2, 1800
 0.8, 4167
 1, 4167
ENDTABLE
UPSHIFT_TRANS_GAIN(3) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(3) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(3) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(3) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(4) LINEAR_FLAT ! shifting between gears 4 and 5
 0, 2525
 0.2, 2525
 0.8, 5850
 1, 5850
ENDTABLE
UPSHIFT_TRANS_GAIN(4) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(4) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(4) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(4) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! 1D table: col 1 = throttle position (-), col 2 = transmission speed (rpm)
UPSHIFT_TRANS_TABLE(5) LINEAR_FLAT ! shifting between gears 5 and 6
 0, 3093
 0.2, 3093
 0.8, 8205
 1, 8205
ENDTABLE
UPSHIFT_TRANS_GAIN(5) 1 ! Gain multiplied with calculated value to get transmission
                        ! speed
UPSHIFT_TRANS_OFFSET(5) 0 ; rpm ! Offset added (after gain) to get transmission
                          ! speed
THROTTLE_START_UPSHIFT(5) 0 ; - ! Offset subtracted from throttle position
THROTTLE_SCALE_UPSHIFT(5) 1 ! Scale factor divided into (throttle position -
                            ! THROTTLE_START_UPSHIFT)

! WIND_HEADING: Wind heading (yaw) relative to global X. When vehicle yaw is zero,
! then 0 deg -> tailwind, 90 deg -> from right, 180 deg -> headwind. Heading can be a
! nonlinear CARPET function of station and time or a function of time (CONSTANT,
! COEFFICIENT, or TABLE) combined with a function WIND_HEADING_S of station
! (CONSTANT, COEFFICIENT, or TABLE). Alternatively, a custom equation can be defined
! at runtime. Heading from the calculation can be adjusted with WIND_HEADING_GAIN and
! WIND_HEADING_OFFSET. Time used in the calculation can be adjusted with
! TSCALE_WIND_HD and TSTART_WIND_HD. Station used in the calculation can be adjusted
! with SSCALE_WIND_HD and SSTART_WIND_HD.

WIND_HEADING_CONSTANT 0 ; deg ! [D] Constant heading component due to time
WIND_HEADING_GAIN   1 ! Gain multiplied with calculated value to get heading
WIND_HEADING_OFFSET 0 ; deg ! Offset added (after gain) to get heading
WIND_HEADING_COMBINE MULTIPLY ! How to combine the two components
WIND_HEADING_S_CONSTANT 1 ; - ! [D] Constant heading component due to station

! WIND_SPEED: Absolute wind speed. Wind speed can be a nonlinear CARPET function of
! station and time or a function of time (CONSTANT, COEFFICIENT, or TABLE) combined
! with a function WIND_SPEED_S of station (CONSTANT, COEFFICIENT, or TABLE).
! Alternatively, a custom equation can be defined at runtime. Wind speed from the
! calculation can be adjusted with WIND_SPEED_GAIN and WIND_SPEED_OFFSET. Time used
! in the calculation can be adjusted with TSCALE_WIND and TSTART_WIND. Station used
! in the calculation can be adjusted with SSCALE_WIND and SSTART_WIND.

WIND_SPEED_CONSTANT 0 ; km/h ! [D] Constant wind speed component due to time
WIND_SPEED_GAIN     1 ! Gain multiplied with calculated value to get wind speed
WIND_SPEED_OFFSET   0 ; km/h ! Offset added (after gain) to get wind speed
WIND_SPEED_COMBINE MULTIPLY ! How to combine the two components
WIND_SPEED_S_CONSTANT 1 ; - ! [D] Constant wind speed component due to station

! Z_PROFILE: "Wandering profile" (roughness input). Elevation increment is a
! function of distance travelled (CONSTANT or TABLE). Elevation increment from the
! calculation can be adjusted with Z_PROFILE_GAIN and Z_PROFILE_OFFSET. Distance
! travelled used in the calculation can be adjusted with SSCALE_Z_PROFILE and
! SSTART_Z_PROFILE. The derivative of this function is used internally. This
! configurable function supports 2 datasets; if indices shown below are not used,
! e.g., (2), the current value of the index ISIDE is used to identify the dataset
! when reading data.

Z_PROFILE_CONSTANT(1) 0 ; mm ! [D] Constant elevation increment
Z_PROFILE_OFFSET(1) 0 ; mm ! Offset added (after gain) to get elevation increment

Z_PROFILE_CONSTANT(2) 0 ; mm ! [D] Constant elevation increment
Z_PROFILE_OFFSET(2) 0 ; mm ! Offset added (after gain) to get elevation increment

!------------------------------------------------------------------------------------
! NEW VARIABLES DEFINED AT RUN TIME
!------------------------------------------------------------------------------------
DEFINE_PARAMETER MAX_BRAKE_TORQUE = -50;
DEFINE_PARAMETER MAX_TORQUE = 265;
DEFINE_PARAMETER AIR_SPEED_REF = 50; UNITS = km/h;
DEFINE_OUTPUT mod1_L1 = 1.08978e-006;
DEFINE_OUTPUT mod2_L1 = 2.37243e-005;
DEFINE_OUTPUT mod3_L1 = 0.2338;
DEFINE_OUTPUT mod4_L1 = 5.34178;
DEFINE_OUTPUT mod1_R1 = 1.08978e-006;
DEFINE_OUTPUT mod2_R1 = 2.37243e-005;
DEFINE_OUTPUT mod3_R1 = 0.2338;
DEFINE_OUTPUT mod4_R1 = 5.34178;
DEFINE_OUTPUT mod1_L2 = 3.73088e-007;
DEFINE_OUTPUT mod2_L2 = 8.37664e-006;
DEFINE_OUTPUT mod3_L2 = 0.233122;
DEFINE_OUTPUT mod4_L2 = 5.39584;
DEFINE_OUTPUT mod1_R2 = 3.73088e-007;
DEFINE_OUTPUT mod2_R2 = 8.37664e-006;
DEFINE_OUTPUT mod3_R2 = 0.233122;
DEFINE_OUTPUT mod4_R2 = 5.39584;
DEFINE_OUTPUT v_mod2 = 0;
DEFINE_OUTPUT v_mod1 = 0;
DEFINE_OUTPUT v_mod3 = 0.0638265;
DEFINE_OUTPUT v_mod4 = 0.632169;

!------------------------------------------------------------------------------------
! EQUATIONS OUT (AT THE END OF EVERY TIME STEP)
!------------------------------------------------------------------------------------
EQ_OUT MOD1_L1 = (ABS(FY_L1)/FZ_REF(1,1))*MUY_L1;
EQ_OUT MOD2_L1 = SIN(MIN(ABS(ALPHL_L1), 15/DR)*ABS(VXCENL1));
EQ_OUT MOD3_L1 = (ABS(FX_L1)/FZ_REF(1,1))*MUX_L1;
EQ_OUT MOD4_L1 = MIN(ABS(KAPPL_L1), 1)*ABS(VXCENL1);
EQ_OUT MOD1_R1 = (ABS(FY_R1)/FZ_REF(1,2))*MUY_R1;
EQ_OUT MOD2_R1 = SIN(MIN(ABS(ALPHL_R1), 15/DR)*ABS(VXCENR1));
EQ_OUT MOD3_R1 = (ABS(FX_R1)/FZ_REF(1,2))*MUX_R1;
EQ_OUT MOD4_R1 = MIN(ABS(KAPPL_R1), 1)*ABS(VXCENR1);
EQ_OUT MOD1_L2 = (ABS(FY_L2)/FZ_REF(2,1))*MUY_L2;
EQ_OUT MOD2_L2 = SIN(MIN(ABS(ALPHL_L2), 15/DR)*ABS(VXCENL2));
EQ_OUT MOD3_L2 = (ABS(FX_L2)/FZ_REF(2,1))*MUX_L2;
EQ_OUT MOD4_L2 = MIN(ABS(KAPPL_L2), 1)*ABS(VXCENL2);
EQ_OUT MOD1_R2 = (ABS(FY_R2)/FZ_REF(2,2))*MUY_R2;
EQ_OUT MOD2_R2 = SIN(MIN(ABS(ALPHL_R2), 15/DR)*ABS(VXCENR2));
EQ_OUT MOD3_R2 = (ABS(FX_R2)/FZ_REF(2,2))*MUX_R2;
EQ_OUT MOD4_R2 = MIN(ABS(KAPPL_R2), 1)*ABS(VXCENR2);
EQ_OUT V_MOD2 = IF_GT_0_THEN(M_ENGOUT, 0, POW(M_ENGOUT/MAX_BRAKE_TORQUE, 0.5));
EQ_OUT V_MOD1 = IF_GT_0_THEN(M_ENGOUT, POW(M_ENGOUT/MAX_TORQUE, 0.5), 0);
EQ_OUT V_MOD3 = POW(VAIR/AIR_SPEED_REF, 3);
EQ_OUT V_MOD4 = POW(VAIR/AIR_SPEED_REF, 0.5);

!------------------------------------------------------------------------------------
! STATE VARIABLES (NEEDED FOR RESTART)
!------------------------------------------------------------------------------------
SV_2ND_CL_DIFF_LOCKED_1 0 ; - ! Lock state of 2nd diff. 1 clutch
SV_2ND_CL_DIFF_LOCKED_2 0 ; - ! Lock state of 2nd diff. 2 clutch
SV_2ND_CL_DIFF_LOCKED_3 0 ; - ! Lock state of 2nd diff. 3 clutch
SV_2ND_CL_DIFF_SLIP_REF_1 0 ; deg ! Ref. angle for 2nd diff. 1 clutch
SV_2ND_CL_DIFF_SLIP_REF_2 0 ; deg ! Ref. angle for 2nd diff. 2 clutch
SV_2ND_CL_DIFF_SLIP_REF_3 0 ; deg ! Ref. angle for 2nd diff. 3 clutch
SV_2ND_CL_DIFF_SPIN_OLD_1 0 ; rpm ! Rel. spin of 2nd diff. 1 clutch at prev. time
                            ! step
SV_2ND_CL_DIFF_SPIN_OLD_2 0 ; rpm ! Rel. spin of 2nd diff. 2 clutch at prev. time
                            ! step
SV_2ND_CL_DIFF_SPIN_OLD_3 0 ; rpm ! Rel. spin of 2nd diff. 3 clutch at prev. time
                            ! step
SV_AGEAR_OUT_1      0 ; deg ! ODE #10: Angle of steering gear output for axle 1
SV_AGEAR_OUT_2      0 ; deg ! ODE #12: Angle of steering gear output for axle 2
SV_AT_LOCKED_STATE  0 ; - ! Lock state of automatical transmission
SV_AVX 4.443384944e-017 ; deg/s ! ODE #95: Body-X roll rate of vehicle sprung-mass
SV_AVY  0.07538916397 ; deg/s ! ODE #94: Body-Y pitch rate of vehicle sprung-mass
SV_AVY_L1 6.076889508 ; rpm ! ODE #99: Spin of axle 1, L wheel
SV_AVY_L2  4.51976071 ; rpm ! ODE #103: Spin of axle 2, L wheel
SV_AVY_OLD_L1 6.076889508 ; rpm ! Wheel L1 spin (previous time step)
SV_AVY_OLD_L2 4.51976071 ; rpm ! Wheel L2 spin (previous time step)
SV_AVY_OLD_R1 6.076889508 ; rpm ! Wheel R1 spin (previous time step)
SV_AVY_OLD_R2 4.51976071 ; rpm ! Wheel R2 spin (previous time step)
SV_AVY_R1 6.076889508 ; rpm ! ODE #101: Spin of axle 1, R wheel
SV_AVY_R2  4.51976071 ; rpm ! ODE #105: Spin of axle 2, R wheel
SV_AVZ 6.769243417e-018 ; deg/s ! ODE #93: Body-Z yaw rate of vehicle sprung-mass
SV_AV_ENG           0 ; rpm ! ODE #106: Engine crankshaft spin
SV_AV_GEAR_IN -3.350531366e-014 ; deg/s ! ODE #96: Angular rate of steering gear
                                ! input
SV_AV_SHAFT_L1      0 ; rpm ! ODE #109: Left-front driveshaft speed
SV_AV_SHAFT_L2 4.51976071 ; rpm ! ODE #111: Left-rear driveshaft speed
SV_AV_SHAFT_R1      0 ; rpm ! ODE #110: Right-front driveshaft speed
SV_AV_SHAFT_R2 4.51976071 ; rpm ! ODE #112: Right-rear driveshaft speed
SV_AV_STR_SW_T      0 ; deg/s ! ODE #97: Steering wheel angular rate when torque is
                      ! input
SV_AV_TC            0 ; rpm ! ODE #107: Torque coupling output shaft spin
SV_AV_TR_OUT 0.4297234049 ; rpm ! ODE #108: Transmission output shaft spin
SV_A_GEAR_IN 9.480380255e-018 ; deg ! ODE #8: Angle of steering gear input
SV_BETA_OLD 1.748722864e-020 ; deg ! Sideslip (ISO) at previous time step
SV_BETA_RD_OLD 2.185916921e-020 ; deg ! Sideslip (road) at previous time step
SV_BRAKE_STATE_OLD  0 ; - ! Old state of braking, used for clutch control
SV_CL_ACCEL_SHIFT   0 ; - ! Is clutch in auto control for low-speed accel?
SV_CL_AUTO_SHIFT    0 ; - ! Is clutch in auto control for a gear change?
SV_CL_DIFF_LOCKED_1 0 ; - ! Lock state of differential 1 clutch
SV_CL_DIFF_LOCKED_2 0 ; - ! Lock state of differential 2 clutch
SV_CL_DIFF_LOCKED_3 0 ; - ! Lock state of differential 3 clutch
SV_CL_DIFF_SLIP_REF_1 0 ; deg ! Ref. angle for diff. 1 clutch
SV_CL_DIFF_SLIP_REF_2 0 ; deg ! Ref. angle for diff. 2 clutch
SV_CL_DIFF_SLIP_REF_3 0 ; deg ! Ref. angle for diff. 3 clutch
SV_CL_DIFF_SPIN_OLD_1 0 ; rpm ! Rel. spin of diff. 1 clutch at previous time step
SV_CL_DIFF_SPIN_OLD_2 0 ; rpm ! Rel. spin of diff. 2 clutch at previous time step
SV_CL_DIFF_SPIN_OLD_3 0 ; rpm ! Rel. spin of diff. 3 clutch at previous time step
SV_CL_TWIN_LF_LOCKED_STATE 0 ; - ! Lock state of LF twin clutch
SV_CL_TWIN_LF_SLIP_REF 0 ; deg ! Ref. angle for LF twin clutch
SV_CL_TWIN_LF_SPIN_OLD 0 ; rpm ! Rel. spin of LF twin clutch at prev. time step
SV_CL_TWIN_LR_LOCKED_STATE 0 ; - ! Lock state of LR twin clutch
SV_CL_TWIN_LR_SLIP_REF 0 ; deg ! Ref. angle for LR twin clutch
SV_CL_TWIN_LR_SPIN_OLD 0 ; rpm ! Rel. spin of LR twin clutch at prev. time step
SV_CL_TWIN_RF_LOCKED_STATE 0 ; - ! Lock state of RF twin clutch
SV_CL_TWIN_RF_SLIP_REF 0 ; deg ! Ref. angle for RF twin clutch
SV_CL_TWIN_RF_SPIN_OLD 0 ; rpm ! Rel. spin of RF twin clutch at prev. time step
SV_CL_TWIN_RR_LOCKED_STATE 0 ; - ! Lock state of RR twin clutch
SV_CL_TWIN_RR_SLIP_REF 0 ; deg ! Ref. angle for RR twin clutch
SV_CL_TWIN_RR_SPIN_OLD 0 ; rpm ! Rel. spin of RR twin clutch at prev. time step
SV_CMP_S_L1 156.5860069 ; mm ! Compression of L1 suspension spring
SV_CMP_S_L2 -11.26021049 ; mm ! Compression of L2 suspension spring
SV_CMP_S_R1 156.5860069 ; mm ! Compression of R1 suspension spring
SV_CMP_S_R2 -11.26021049 ; mm ! Compression of R2 suspension spring
SV_DAV_CL_OLD       0 ; rpm ! Clutch relative spin (previous time step)
SV_DROT_CL_LK       0 ; rev ! Clutch relative rotation in 'locked' mode
SV_DZDX_GND_OLD     0 ; - ! dZ/dX of ground, sprung mass (prev. time step)
SV_DZDX_L1          0 ; - ! Ground dzdx for tire L1
SV_DZDX_L2          0 ; - ! Ground dzdx for tire L2
SV_DZDX_R1          0 ; - ! Ground dzdx for tire R1
SV_DZDX_R2          0 ; - ! Ground dzdx for tire R2
SV_DZDY_GND_OLD     0 ; - ! dZ/dY of ground, sprung mass (prev. time step)
SV_DZDY_L1          0 ; - ! Ground dzdy for tire L1
SV_DZDY_L2          0 ; - ! Ground dzdy for tire L2
SV_DZDY_R1          0 ; - ! Ground dzdy for tire R1
SV_DZDY_R2          0 ; - ! Ground dzdy for tire R2
SV_ENGINE_STATUS    1 ; - ! Engine running status, 1: running, 0: stall
SV_FBK              0 ; N ! ODE #53: Brake pedal force
SV_FS_L1  4247.282776 ; N ! Force from L1 suspension spring
SV_FS_L2  2705.187694 ; N ! Force from L2 suspension spring
SV_FS_R1  4247.282776 ; N ! Force from R1 suspension spring
SV_FS_R2  2705.187694 ; N ! Force from R2 suspension spring
SV_FUEL     -1.4e-007 ; kg ! ODE #43: Mass of fuel consumed
SV_FX_SM_L1 -1787.887382 ; N ! Tire force in sprung-mass X for wheel L1
SV_FX_SM_L2 -1782.701348 ; N ! Tire force in sprung-mass X for wheel L2
SV_FX_SM_R1 -1787.887382 ; N ! Tire force in sprung-mass X for wheel R1
SV_FX_SM_R2 -1782.701348 ; N ! Tire force in sprung-mass X for wheel R2
SV_FY_SM_L1 -0.02143818537 ; N ! Tire force in sprung-mass Y for wheel L1
SV_FY_SM_L2 0.001725903717 ; N ! Tire force in sprung-mass Y for wheel L2
SV_FY_SM_R1 0.02143818537 ; N ! Tire force in sprung-mass Y for wheel R1
SV_FY_SM_R2 -0.001725903717 ; N ! Tire force in sprung-mass Y for wheel R2
SV_GEAR_IN_A_OLD 9.480380255e-018 ; deg ! Steering gear input angle (manual steer)
                                  ! at previous time step
SV_GEAR_MEM         1 ; - ! Gear saved in memory, used for transision
SV_GEAR_OLD         0 ; - ! Gear selected at previous time step
SV_GEAR_OUT_A_OLD_1 0 ; deg ! Steering gear output angle at previous time step
SV_GEAR_OUT_A_OLD_2 0 ; deg ! Steering gear output angle at previous time step
SV_IVERR            0 ; m ! ODE #113: Speed controller state: integral of [target
                      ! speed] - [actual speed]
SV_I_GEAR_SHIFT 0.036988 ; kg-m2 ! Transmission gear inertia modulated by gear shift
SV_I_GEAR_SHIFT_START 0.037 ; kg-m2 ! Gear spin inertia in when automatic gear shift
                            ! started with T.C.
SV_JNCR_L1 -0.04672462424 ; m/s ! ODE #98: Jounce rate at axle 1, L wheel
SV_JNCR_L2 -0.005739445997 ; m/s ! ODE #102: Jounce rate at axle 2, L wheel
SV_JNCR_R1 -0.04672462424 ; m/s ! ODE #100: Jounce rate at axle 1, R wheel
SV_JNCR_R2 -0.005739445997 ; m/s ! ODE #104: Jounce rate at axle 2, R wheel
SV_JNC_L1 -2.831490514e-005 ; m ! ODE #14: Jounce movement at axle 1, L wheel
SV_JNC_L2 -3.269252456e-006 ; m ! ODE #28: Jounce movement at axle 2, L wheel
SV_JNC_R1 -2.831490514e-005 ; m ! ODE #21: Jounce movement at axle 1, R wheel
SV_JNC_R2 -3.269252456e-006 ; m ! ODE #35: Jounce movement at axle 2, R wheel
SV_LK_CLUTCH        0 ; - ! Clutch lockup state
SV_LK_WHL_L1        0 ; - ! Wheel L1 lockup state
SV_LK_WHL_L2        0 ; - ! Wheel L2 lockup state
SV_LK_WHL_R1        0 ; - ! Wheel R1 lockup state
SV_LK_WHL_R2        0 ; - ! Wheel R2 lockup state
SV_LOCKED_CLUTCH_NEUTRAL_OLD 0 ; - ! Was clutch locked while in neutral?
SV_MY_BRK_L1 577.6662215 ; N-m ! Spin moment for wheel L1
SV_MY_BRK_L2 575.9906867 ; N-m ! Spin moment for wheel L2
SV_MY_BRK_R1 577.6662215 ; N-m ! Spin moment for wheel R1
SV_MY_BRK_R2 575.9906867 ; N-m ! Spin moment for wheel R2
SV_MZ_WHEEL_L1 3.238755648e-005 ; N-m ! Tire MZ for wheel L1
SV_MZ_WHEEL_L2 1.3793345e-005 ; N-m ! Tire MZ for wheel L2
SV_MZ_WHEEL_R1 -3.238755648e-005 ; N-m ! Tire MZ for wheel R1
SV_MZ_WHEEL_R2 -1.3793345e-005 ; N-m ! Tire MZ for wheel R2
SV_M_CL2_CAP_FD_DYN 0 ; N-m ! ODE #79: 1st drive-axle differential second clutch
                      ! capacity (dynamic)
SV_M_CL2_CAP_RD_DYN 0 ; N-m ! ODE #81: 2nd drive-axle differential second clutch
                      ! capacity (dynamic)
SV_M_CL2_CAP_XC_DYN 0 ; N-m ! ODE #83: transfer case second clutch capacity
                      ! (dynamic)
SV_M_CLUTCH_DEL     0 ; N-m ! ODE #77: Time delayed clutch torque capacity
SV_M_CL_CAP_FD_DYN  0 ; N-m ! ODE #78: 1st drive-axle differential clutch capacity
                      ! (dynamic)
SV_M_CL_CAP_RD_DYN  0 ; N-m ! ODE #80: 2nd drive-axle differential clutch capacity
                      ! (dynamic)
SV_M_CL_CAP_XC_DYN  0 ; N-m ! ODE #82: transfer case clutch capacity (dynamic)
SV_M_CL_LF_CAP_DYN 60 ; N-m ! ODE #84: 1st drive axle, left twin clutch capacity
                      ! (dynamic)
SV_M_CL_LR_CAP_DYN 60 ; N-m ! ODE #86: 2nd drive axle left twin clutch capacity
                      ! (dynamic)
SV_M_CL_RF_CAP_DYN 60 ; N-m ! ODE #85: 1st drive axle, right twin clutch capacity
                      ! (dynamic)
SV_M_CL_RR_CAP_DYN 60 ; N-m ! ODE #87: 2nd drive axle, right twin clutch capacity
                      ! (dynamic)
SV_M_KP_L1          0 ; N-m ! Kingpin moment for wheel L1
SV_M_KP_L2          0 ; N-m ! Kingpin moment for wheel L2
SV_M_KP_R1          0 ; N-m ! Kingpin moment for wheel R1
SV_M_KP_R2          0 ; N-m ! Kingpin moment for wheel R2
SV_M_KP_SUM_1 8.67361738e-019 ; N-m ! Kingpin moment sum for axle 1
SV_M_KP_SUM_2 -4.33680869e-019 ; N-m ! Kingpin moment sum for axle 2
SV_M_PARK_OLD_L1    0 ; N-m ! Kingpin steer park torque axle 1, L wheel
SV_M_PARK_OLD_L2    0 ; N-m ! Kingpin steer park torque axle 2, L wheel
SV_M_PARK_OLD_R1    0 ; N-m ! Kingpin steer park torque axle 1, R wheel
SV_M_PARK_OLD_R2    0 ; N-m ! Kingpin steer park torque axle 2, R wheel
SV_N_START_CROSS    0 ; - ! Count of start-crossings on driver path; used only when
                      ! the path is looped.
SV_PBK_L1           0 ; MPa ! ODE #59: L1 brake actuator pressure
SV_PBK_L2           0 ; MPa ! ODE #63: L2 brake actuator pressure
SV_PBK_R1           0 ; MPa ! ODE #61: R1 brake actuator pressure
SV_PBK_R2           0 ; MPa ! ODE #65: R2 brake actuator pressure
SV_PITCH 2.911525935e-005 ; deg ! ODE #5: Pitch of sprung mass of vehicle
SV_RACK_OUT_A_OLD_1 1.053375584e-018 ; mm ! Steering rack output disp at previous
                                     ! time step
SV_RACK_OUT_A_OLD_2 0 ; mm ! Steering rack output disp at previous time step
SV_RGEAR_CVT        0 ; - ! ODE #75: Delayed CVT gear ratio
SV_ROLL 1.473770943e-021 ; deg ! ODE #6: Roll (Euler) of sprung mass of vehicle
SV_ROTX_KC_L1 -0.0003377957414 ; deg ! ODE #17: X kinematic and compl. rotation  of
                               ! wheel L1
SV_ROTX_KC_L2 -8.54545738e-005 ; deg ! ODE #31: X kinematic and compl. rotation  of
                               ! wheel L2
SV_ROTX_KC_R1 0.0003377957414 ; deg ! ODE #24: X kinematic and compl. rotation  of
                              ! wheel R1
SV_ROTX_KC_R2 8.54545738e-005 ; deg ! ODE #38: X kinematic and compl. rotation  of
                              ! wheel R2
SV_ROTY_KC_L1 0.0001197427984 ; deg ! ODE #18: Y kinematic and compl. rotation of
                              ! wheel L1
SV_ROTY_KC_L2       0 ; deg ! ODE #32: Y kinematic and compl. rotation of wheel L2
SV_ROTY_KC_R1 0.0001197427984 ; deg ! ODE #25: Y kinematic and compl. rotation of
                              ! wheel R1
SV_ROTY_KC_R2       0 ; deg ! ODE #39: Y kinematic and compl. rotation of wheel R2
SV_ROT_ENG          0 ; rev ! ODE #42: Engine crankshaft rotation
SV_ROT_L1 5.513657679e-005 ; rev ! ODE #20: Rotation of axle 1, L wheel
SV_ROT_L2 4.24172199e-005 ; rev ! ODE #34: Rotation of axle 2, L wheel
SV_ROT_LK_L1        0 ; rev ! Wheel L1 rotation in 'locked' mode
SV_ROT_LK_L2        0 ; rev ! Wheel L2 rotation in 'locked' mode
SV_ROT_LK_R1        0 ; rev ! Wheel R1 rotation in 'locked' mode
SV_ROT_LK_R2        0 ; rev ! Wheel R2 rotation in 'locked' mode
SV_ROT_R1 5.513657679e-005 ; rev ! ODE #27: Rotation of axle 1, R wheel
SV_ROT_R2 4.24172199e-005 ; rev ! ODE #41: Rotation of axle 2, R wheel
SV_ROT_SHAFT_1      0 ; rev ! ODE #68: Front drive shaft rotation
SV_ROT_SHAFT_2 0.0001739106016 ; rev ! ODE #69: Rear drive shaft rotation
SV_ROT_SHAFT_3      0 ; rev ! ODE #70: Rotation of input shaft to transfer case
SV_ROT_SHAFT_L1     0 ; rev ! ODE #71: Left-front driveshaft rotation
SV_ROT_SHAFT_L2 4.24172199e-005 ; rev ! ODE #73: Left-rear driveshaft rotation
SV_ROT_SHAFT_R1     0 ; rev ! ODE #72: Right-front driveshaft rotation
SV_ROT_SHAFT_R2 4.24172199e-005 ; rev ! ODE #74: Right-rear driveshaft rotation
SV_ROT_TC           0 ; rev ! ODE #66: Torque coupling output shaft rotation
SV_ROT_TR_OUT       0 ; rev ! ODE #67: Transmission output shaft rotation
SV_R_GEAR    3.523848 ; - ! Transmission gear ratio
SV_R_GEAR_SHIFT 3.523848 ; - ! Transmission gear ratio modulated by gear shift
SV_R_GEAR_SHIFT_START 3.538 ; - ! Gear ratio in when automatic gear shift started
                            ! with T.C.
SV_R_L1  0.3249711854 ; m ! Deflected radius for tire L1
SV_R_L2  0.3249977757 ; m ! Deflected radius for tire L2
SV_R_R1  0.3249711854 ; m ! Deflected radius for tire R1
SV_R_R2  0.3249977757 ; m ! Deflected radius for tire R2
SV_SHIFT_DELAY      1 ; - ! Is shifting delay in T.C. active?
SV_SLIP_LAT_L1 -4.275736733e-006 ; - ! ODE #44: Lagged tangent of lateral slip for
                                 ! tire L1
SV_SLIP_LAT_L2 -1.509394283e-006 ; - ! ODE #48: Lagged tangent of lateral slip for
                                 ! tire L2
SV_SLIP_LAT_R1 4.275736733e-006 ; - ! ODE #46: Lagged tangent of lateral slip for
                                ! tire R1
SV_SLIP_LAT_R2 1.509394283e-006 ; - ! ODE #50: Lagged tangent of lateral slip for
                                ! tire R2
SV_SLIP_LONG_L1 -0.9627256411 ; - ! ODE #45: Lagged longitudinal slip for tire L1
SV_SLIP_LONG_L2 -0.9722820984 ; - ! ODE #49: Lagged longitudinal slip for tire L2
SV_SLIP_LONG_R1 -0.9627256411 ; - ! ODE #47: Lagged longitudinal slip for tire R1
SV_SLIP_LONG_R2 -0.9722820984 ; - ! ODE #51: Lagged longitudinal slip for tire R2
SV_SO_DIST 0.005552835008 ; m ! ODE #52: Distance travelled, used to apply
                          ! "wandering profiles" to tires
SV_SPEED_PREVIEW_SSTART 0 ; m ! Start station in path preview array
SV_SPEED_PREVIEW_V_TARGET 0 ; km/h ! Target speed at SV_SPEED_PREVIEW_SSTART
SV_STATION 0.005552560603 ; m ! Station of vehicle on the current driver model path
SV_STA_ROAD 0.005552560603 ; m ! Station of vehicle on the current road reference
                           ! path
SV_STR_COL_OLD      0 ; deg ! Steering column angle (power steer) at previous time
                      ! step
SV_STR_DM 4.853141299e-019 ; deg ! Road-wheel steer from the driver model
SV_STR_DM_OLD 4.853141299e-019 ; deg ! Road-wheel steer from driver model at
                               ! previous time step
SV_STR_KP_L1 0.0009824714554 ; deg ! Kingpin steer angle axle 1, L wheel
SV_STR_KP_L2 3.622559496e-005 ; deg ! Kingpin steer angle axle 2, L wheel
SV_STR_KP_R1 -0.0009824714554 ; deg ! Kingpin steer angle axle 1, R wheel
SV_STR_KP_R2 -3.622559496e-005 ; deg ! Kingpin steer angle axle 2, R wheel
SV_STR_L1 0.0009824714554 ; deg ! ODE #19: Steer (total) of wheel L1
SV_STR_L2 3.622559496e-005 ; deg ! ODE #33: Steer (total) of wheel L2
SV_STR_R1 -0.0009824714554 ; deg ! ODE #26: Steer (total) of wheel R1
SV_STR_R2 -3.622559496e-005 ; deg ! ODE #40: Steer (total) of wheel R2
SV_STR_SUS_F -2.426570649e-020 ; deg ! Front steer due to suspension effects
SV_STR_SUS_R        0 ; deg ! Rear steer due to suspension effects
SV_STR_SW_A         0 ; deg ! ODE #7: Steering wheel angle when angle is input
SV_STR_SW_DM        0 ; deg ! Steering wheel angle from driver model
SV_STR_SW_DM_OLD    0 ; deg ! Steering wheel angle from DM at previous time step
SV_STR_SW_OL_OLD    0 ; deg ! Steering wheel angle from open loop control at
                      ! previous time step
SV_STR_SW_T         0 ; deg ! ODE #9: Steering wheel angle when torque is input
SV_TBT_1            0 ; N-m ! ODE #88: Delayed t-bar torque for 1
SV_TBT_2            0 ; N-m ! ODE #89: Delayed t-bar torque for 2
SV_THR_DEL          0 ; - ! ODE #76: Time delayed engine throttle
SV_TH_AUTO_SHIFT    0 ; - ! Is throttle in auto control for a gear change?
SV_TROT_L1          0 ; C ! ODE #58: L1 brake rotor temperature
SV_TROT_L2          0 ; C ! ODE #62: L2 brake rotor temperature
SV_TROT_R1          0 ; C ! ODE #60: R1 brake rotor temperature
SV_TROT_R2          0 ; C ! ODE #64: R2 brake rotor temperature
SV_T_SHIFT_START    0 ; s ! Time when automatic gear shift started
SV_VBK_L1           0 ; mm3 ! ODE #54: L1 brake caliper volume
SV_VBK_L2           0 ; mm3 ! ODE #56: L2 brake caliper volume
SV_VBK_R1           0 ; mm3 ! ODE #55: R1 brake caliper volume
SV_VBK_R2           0 ; mm3 ! ODE #57: R2 brake caliper volume
SV_VXS    19.98201281 ; km/h ! ODE #90: Body-X speed of laden vehicle sprung-mass CG
SV_VYS -2.610439406e-020 ; m/s ! ODE #91: Body-Y speed of laden vehicle sprung-mass
                         ! CG
SV_VZS -0.000385043198 ; m/s ! ODE #92: Body-Z speed of laden vehicle sprung-mass CG
SV_XO  0.005552560603 ; m ! ODE #1: Global X coord. of sprung-mass origin of vehicle
SV_X_GND_OLD -1.284447439 ; m ! X coord. of ground, sprung mass (prev. time step)
SV_X_KC_L1 -8.920168424e-005 ; m ! ODE #15: Long. kinematic and compl. movement of
                             ! wheel L1
SV_X_KC_L2 -0.0001248610056 ; m ! ODE #29: Long. kinematic and compl. movement of
                            ! wheel L2
SV_X_KC_R1 -8.920168424e-005 ; m ! ODE #22: Long. kinematic and compl. movement of
                             ! wheel R1
SV_X_KC_R2 -0.0001248610056 ; m ! ODE #36: Long. kinematic and compl. movement of
                            ! wheel R2
SV_YAW              0 ; deg ! ODE #4: Yaw of sprung mass of vehicle
SV_YO 1.640605007e-023 ; m ! ODE #2: Global Y coord. of sprung-mass origin of
                       ! vehicle
SV_YRACK_1 1.053375584e-021 ; m ! ODE #11: Y translation of steering rack for axle 1
SV_YRACK_2          0 ; m ! ODE #13: Y translation of steering rack for axle 2
SV_Y_GND_OLD 1.640605007e-023 ; m ! Y coord. of ground, sprung mass (prev. time
                              ! step)
SV_Y_KC_L1 7.733711415e-007 ; m ! ODE #16: Lat. kinematic and compl. movement of
                            ! wheel L1
SV_Y_KC_L2 3.38701578e-008 ; m ! ODE #30: Lat. kinematic and compl. movement of
                           ! wheel L2
SV_Y_KC_R1 -7.733711415e-007 ; m ! ODE #23: Lat. kinematic and compl. movement of
                             ! wheel R1
SV_Y_KC_R2 -3.38701578e-008 ; m ! ODE #37: Lat. kinematic and compl. movement of
                            ! wheel R2
SV_ZO -4.338732615e-007 ; m ! ODE #3: Global Z coord. of sprung-mass origin of
                        ! vehicle
SV_Z_GND_OLD        0 ; m ! Z coord. of ground, sprung mass (prev. time step)

!------------------------------------------------------------------------------------
! IMPORTED VARIABLES, RELATIONS TO NATIVE VARIABLES, INITIAL VALUES, and UNITS
!------------------------------------------------------------------------------------
IMPORT IMP_PBK_L1 REPLACE 0 ; MPa ! #1. L1 brake wheel cylinder (chamber) pressure
IMPORT IMP_PBK_R1 REPLACE 0 ; MPa ! #2. R1 brake wheel cylinder (chamber) pressure
IMPORT IMP_PBK_L2 REPLACE 0 ; MPa ! #3. L2 brake wheel cylinder (chamber) pressure
IMPORT IMP_PBK_R2 REPLACE 0 ; MPa ! #4. R2 brake wheel cylinder (chamber) pressure
IMPORT IMP_STEER_SW REPLACE 0 ; deg ! #5. Steering wheel angle
IMPORT IMP_THROTTLE_ENGINE REPLACE 0 ; - ! #6. Open loop throttle control
IMPORT IMP_MODE_TRANS ADD 0 ; - ! #7. Transmission controller mode: -1 -> reverse, 0
                            ! -> neutral, 1 -> open-loop gear selection, 2 - 18 ->
                            ! closed-loop limit (maximum gear available)
IMPORT IMP_GEAR_TRANS ADD 0 ; - ! #8. Transmission gear

!------------------------------------------------------------------------------------
! EXPORTED VARIABLES
!------------------------------------------------------------------------------------
EXPORT VX 19.98179247 ! #1. Longitudinal speed, vehicle (km/h)
EXPORT VY 6.09863722e-021 ! #2. Lateral speed, vehicle (km/h)
EXPORT AVZ 6.769243417e-018 ! #3. Yaw rate (body-fixed), vehicle (deg/s)
EXPORT YAW          0 ! #4. Yaw, vehicle (deg)
EXPORT XCG_SM -1.009447165 ! #5. SM CG X coordinate, vehicle (m)
EXPORT YCG_SM 2.516086175e-024 ! #6. SM CG Y coordinate, vehicle (m)
EXPORT AVY_L1 6.076889508 ! #7. Wheel L1 spin (rpm)
EXPORT AVY_L2 4.51976071 ! #8. Wheel L2 spin (rpm)
EXPORT AVY_R1 6.076889508 ! #9. Wheel R1 spin (rpm)
EXPORT AVY_R2 4.51976071 ! #10. Wheel R2 spin (rpm)


END
